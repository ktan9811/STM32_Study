
NUCLEOF429ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096f8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000664  080098a8  080098a8  0000a8a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f0c  08009f0c  0000b06c  2**0
                  CONTENTS
  4 .ARM          00000008  08009f0c  08009f0c  0000af0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f14  08009f14  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f14  08009f14  0000af14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009f18  08009f18  0000af18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08009f1c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b06c  2**0
                  CONTENTS
 10 .bss          000055e0  2000006c  2000006c  0000b06c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000564c  2000564c  0000b06c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022683  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c29  00000000  00000000  0002d71f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c20  00000000  00000000  00032348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015b3  00000000  00000000  00033f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006ee6  00000000  00000000  0003551b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021b48  00000000  00000000  0003c401  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0786  00000000  00000000  0005df49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014e6cf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000081b4  00000000  00000000  0014e714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004c  00000000  00000000  001568c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009890 	.word	0x08009890

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000070 	.word	0x20000070
 80001ec:	08009890 	.word	0x08009890

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <app>:
#else
#define log(fmt, ...)
#endif

void app(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
	printf("System Start...\r\n");
 80005a4:	4805      	ldr	r0, [pc, #20]	@ (80005bc <app+0x1c>)
 80005a6:	f008 f985 	bl	80088b4 <puts>
	log();
	osKernelInitialize();
 80005aa:	f004 feb9 	bl	8005320 <osKernelInitialize>
	app_init();
 80005ae:	f000 f807 	bl	80005c0 <app_init>
	osKernelStart();
 80005b2:	f004 fed9 	bl	8005368 <osKernelStart>
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	080098a8 	.word	0x080098a8

080005c0 <app_init>:

static void app_init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	io_exti_init();
 80005c4:	f000 fb36 	bl	8000c34 <io_exti_init>
	uart_init();
 80005c8:	f001 fa58 	bl	8001a7c <uart_init>

	cli_init();
 80005cc:	f000 fa82 	bl	8000ad4 <cli_init>
	polling_init();
 80005d0:	f000 fed8 	bl	8001384 <polling_init>
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <button_init>:

static void io_exti_btn_blue_callback(uint8_t rf, void *arg);
static void uart_btn_callback(void *arg);

void button_init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
	for (int i=0; i<D_BUTTON_MAX; i++) {
 80005de:	2300      	movs	r3, #0
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	e018      	b.n	8000616 <button_init+0x3e>
		gBtnObjs[i].no = 0;
 80005e4:	4913      	ldr	r1, [pc, #76]	@ (8000634 <button_init+0x5c>)
 80005e6:	687a      	ldr	r2, [r7, #4]
 80005e8:	4613      	mov	r3, r2
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	4413      	add	r3, r2
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	440b      	add	r3, r1
 80005f2:	3302      	adds	r3, #2
 80005f4:	2200      	movs	r2, #0
 80005f6:	801a      	strh	r2, [r3, #0]
		gBtnObjs[i].prev_tick = HAL_GetTick();
 80005f8:	f001 fb96 	bl	8001d28 <HAL_GetTick>
 80005fc:	4601      	mov	r1, r0
 80005fe:	480d      	ldr	r0, [pc, #52]	@ (8000634 <button_init+0x5c>)
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	4613      	mov	r3, r2
 8000604:	005b      	lsls	r3, r3, #1
 8000606:	4413      	add	r3, r2
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	4403      	add	r3, r0
 800060c:	3308      	adds	r3, #8
 800060e:	6019      	str	r1, [r3, #0]
	for (int i=0; i<D_BUTTON_MAX; i++) {
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	3301      	adds	r3, #1
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	2b01      	cmp	r3, #1
 800061a:	dde3      	ble.n	80005e4 <button_init+0xc>
	}

	io_exti_regcbf(D_BTN_BLUE_NO, io_exti_btn_blue_callback);
 800061c:	4906      	ldr	r1, [pc, #24]	@ (8000638 <button_init+0x60>)
 800061e:	200d      	movs	r0, #13
 8000620:	f000 fb46 	bl	8000cb0 <io_exti_regcbf>
	uart_regcbf(E_UART_0, uart_btn_callback);
 8000624:	4905      	ldr	r1, [pc, #20]	@ (800063c <button_init+0x64>)
 8000626:	2000      	movs	r0, #0
 8000628:	f001 fa5e 	bl	8001ae8 <uart_regcbf>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000088 	.word	0x20000088
 8000638:	080006e5 	.word	0x080006e5
 800063c:	08000739 	.word	0x08000739

08000640 <button_regcbf>:

bool button_regcbf(uint16_t idx, BUTTON_CBF cbf)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	4603      	mov	r3, r0
 8000648:	6039      	str	r1, [r7, #0]
 800064a:	80fb      	strh	r3, [r7, #6]
	if (idx > D_BUTTON_MAX) return false;
 800064c:	88fb      	ldrh	r3, [r7, #6]
 800064e:	2b02      	cmp	r3, #2
 8000650:	d901      	bls.n	8000656 <button_regcbf+0x16>
 8000652:	2300      	movs	r3, #0
 8000654:	e00a      	b.n	800066c <button_regcbf+0x2c>
	gBtnObjs[idx].cbf = cbf;
 8000656:	88fa      	ldrh	r2, [r7, #6]
 8000658:	4907      	ldr	r1, [pc, #28]	@ (8000678 <button_regcbf+0x38>)
 800065a:	4613      	mov	r3, r2
 800065c:	005b      	lsls	r3, r3, #1
 800065e:	4413      	add	r3, r2
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	440b      	add	r3, r1
 8000664:	3304      	adds	r3, #4
 8000666:	683a      	ldr	r2, [r7, #0]
 8000668:	601a      	str	r2, [r3, #0]
	return true;
 800066a:	2301      	movs	r3, #1
}
 800066c:	4618      	mov	r0, r3
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	20000088 	.word	0x20000088

0800067c <button_proc_blue>:

void button_proc_blue(void *arg)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b084      	sub	sp, #16
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	BUTTON_T *p = &gBtnObjs[E_BTN_BLUE];
 8000684:	4b09      	ldr	r3, [pc, #36]	@ (80006ac <button_proc_blue+0x30>)
 8000686:	60fb      	str	r3, [r7, #12]
	if (p->no == D_BTN_BLUE_NO) {
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	885b      	ldrh	r3, [r3, #2]
 800068c:	2b0d      	cmp	r3, #13
 800068e:	d108      	bne.n	80006a2 <button_proc_blue+0x26>
		printf("rf:%d, no:%d\r\n", p->edge,  p->no);
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	4619      	mov	r1, r3
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	885b      	ldrh	r3, [r3, #2]
 800069a:	461a      	mov	r2, r3
 800069c:	4804      	ldr	r0, [pc, #16]	@ (80006b0 <button_proc_blue+0x34>)
 800069e:	f008 f899 	bl	80087d4 <iprintf>
	}
}
 80006a2:	bf00      	nop
 80006a4:	3710      	adds	r7, #16
 80006a6:	46bd      	mov	sp, r7
 80006a8:	bd80      	pop	{r7, pc}
 80006aa:	bf00      	nop
 80006ac:	20000088 	.word	0x20000088
 80006b0:	080098bc 	.word	0x080098bc

080006b4 <button_proc_uart>:

void button_proc_uart(void *arg)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	BUTTON_T *p = &gBtnObjs[E_BTN_UART];
 80006bc:	4b07      	ldr	r3, [pc, #28]	@ (80006dc <button_proc_uart+0x28>)
 80006be:	60fb      	str	r3, [r7, #12]
	printf("%c:%d\r\n", p->no, p->no);
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	885b      	ldrh	r3, [r3, #2]
 80006c4:	4619      	mov	r1, r3
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	885b      	ldrh	r3, [r3, #2]
 80006ca:	461a      	mov	r2, r3
 80006cc:	4804      	ldr	r0, [pc, #16]	@ (80006e0 <button_proc_uart+0x2c>)
 80006ce:	f008 f881 	bl	80087d4 <iprintf>
}
 80006d2:	bf00      	nop
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000094 	.word	0x20000094
 80006e0:	080098cc 	.word	0x080098cc

080006e4 <io_exti_btn_blue_callback>:

static void io_exti_btn_blue_callback(uint8_t rf, void *arg)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b084      	sub	sp, #16
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	6039      	str	r1, [r7, #0]
 80006ee:	71fb      	strb	r3, [r7, #7]
	volatile uint32_t curr_tick = HAL_GetTick();
 80006f0:	f001 fb1a 	bl	8001d28 <HAL_GetTick>
 80006f4:	4603      	mov	r3, r0
 80006f6:	60bb      	str	r3, [r7, #8]

	BUTTON_T *p = &gBtnObjs[E_BTN_BLUE];
 80006f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000734 <io_exti_btn_blue_callback+0x50>)
 80006fa:	60fb      	str	r3, [r7, #12]

	if (curr_tick - p->prev_tick > 120) {
 80006fc:	68ba      	ldr	r2, [r7, #8]
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	689b      	ldr	r3, [r3, #8]
 8000702:	1ad3      	subs	r3, r2, r3
 8000704:	2b78      	cmp	r3, #120	@ 0x78
 8000706:	d911      	bls.n	800072c <io_exti_btn_blue_callback+0x48>
		p->prev_tick = curr_tick;
 8000708:	68ba      	ldr	r2, [r7, #8]
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	609a      	str	r2, [r3, #8]
		p->edge = rf;
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	79fa      	ldrb	r2, [r7, #7]
 8000712:	701a      	strb	r2, [r3, #0]
		p->no = *(uint16_t *)arg;
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	881a      	ldrh	r2, [r3, #0]
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	805a      	strh	r2, [r3, #2]
		if (p->cbf != NULL) p->cbf((void *)p);
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d003      	beq.n	800072c <io_exti_btn_blue_callback+0x48>
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	68f8      	ldr	r0, [r7, #12]
 800072a:	4798      	blx	r3
	}
}
 800072c:	bf00      	nop
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000088 	.word	0x20000088

08000738 <uart_btn_callback>:

static void uart_btn_callback(void *arg)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	BUF_T *pBuf = (BUF_T *)arg;
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	60fb      	str	r3, [r7, #12]
	BUTTON_T *p = &gBtnObjs[E_BTN_UART];
 8000744:	4b09      	ldr	r3, [pc, #36]	@ (800076c <uart_btn_callback+0x34>)
 8000746:	60bb      	str	r3, [r7, #8]

	p->no = (uint16_t)pBuf->buf[0];
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	461a      	mov	r2, r3
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	805a      	strh	r2, [r3, #2]
	if (p->cbf != NULL) p->cbf((void *)p);
 8000752:	68bb      	ldr	r3, [r7, #8]
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d003      	beq.n	8000762 <uart_btn_callback+0x2a>
 800075a:	68bb      	ldr	r3, [r7, #8]
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	68b8      	ldr	r0, [r7, #8]
 8000760:	4798      	blx	r3

}
 8000762:	bf00      	nop
 8000764:	3710      	adds	r7, #16
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000094 	.word	0x20000094

08000770 <cli_btn_uart>:
	{ NULL,		0,		NULL,			NULL						}
};
extern UART_HandleTypeDef huart2;

static int cli_btn_uart(int argc, char *argv[])
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
 8000778:	6039      	str	r1, [r7, #0]
	if (argc < 2) {
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	2b01      	cmp	r3, #1
 800077e:	dc05      	bgt.n	800078c <cli_btn_uart+0x1c>
		printf("Err : Arg No\r\n");
 8000780:	480d      	ldr	r0, [pc, #52]	@ (80007b8 <cli_btn_uart+0x48>)
 8000782:	f008 f897 	bl	80088b4 <puts>
		return -1;
 8000786:	f04f 33ff 	mov.w	r3, #4294967295
 800078a:	e011      	b.n	80007b0 <cli_btn_uart+0x40>
	}

	HAL_UART_Transmit(&huart2, (uint8_t *)&argv[1][0], 1, 0xffff);
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	3304      	adds	r3, #4
 8000790:	6819      	ldr	r1, [r3, #0]
 8000792:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000796:	2201      	movs	r2, #1
 8000798:	4808      	ldr	r0, [pc, #32]	@ (80007bc <cli_btn_uart+0x4c>)
 800079a:	f003 fa87 	bl	8003cac <HAL_UART_Transmit>
	printf("cli Btn : %c\r\n", argv[1][0]);
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	3304      	adds	r3, #4
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	4619      	mov	r1, r3
 80007a8:	4805      	ldr	r0, [pc, #20]	@ (80007c0 <cli_btn_uart+0x50>)
 80007aa:	f008 f813 	bl	80087d4 <iprintf>

	return 0;
 80007ae:	2300      	movs	r3, #0
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	080099d0 	.word	0x080099d0
 80007bc:	20000440 	.word	0x20000440
 80007c0:	080099e0 	.word	0x080099e0

080007c4 <cli_duty>:


static int cli_duty(int argc, char *argv[])
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
	uint16_t duty;

	if (argc < 2) {
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	dc05      	bgt.n	80007e0 <cli_duty+0x1c>
		printf("Err : Arg No\r\n");
 80007d4:	480c      	ldr	r0, [pc, #48]	@ (8000808 <cli_duty+0x44>)
 80007d6:	f008 f86d 	bl	80088b4 <puts>
		return -1;
 80007da:	f04f 33ff 	mov.w	r3, #4294967295
 80007de:	e00f      	b.n	8000800 <cli_duty+0x3c>
	}

	duty = (uint16_t)strtol(argv[1], NULL, 10);
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	3304      	adds	r3, #4
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	220a      	movs	r2, #10
 80007e8:	2100      	movs	r1, #0
 80007ea:	4618      	mov	r0, r3
 80007ec:	f007 ff26 	bl	800863c <strtol>
 80007f0:	4603      	mov	r3, r0
 80007f2:	81fb      	strh	r3, [r7, #14]
	printf("tim_duty_set(%d)\r\n", duty);
 80007f4:	89fb      	ldrh	r3, [r7, #14]
 80007f6:	4619      	mov	r1, r3
 80007f8:	4804      	ldr	r0, [pc, #16]	@ (800080c <cli_duty+0x48>)
 80007fa:	f007 ffeb 	bl	80087d4 <iprintf>
	//tim_duty_set(duty);

	return 0;
 80007fe:	2300      	movs	r3, #0
}
 8000800:	4618      	mov	r0, r3
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	080099d0 	.word	0x080099d0
 800080c:	080099f0 	.word	0x080099f0

08000810 <cli_dump>:

static int cli_dump(int argc, char *argv[])
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	@ 0x28
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]
	uint32_t address, length, temp;

	if (argc < 3) {
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2b02      	cmp	r3, #2
 800081e:	dc05      	bgt.n	800082c <cli_dump+0x1c>
		printf("Err : Arg No\r\n");
 8000820:	4844      	ldr	r0, [pc, #272]	@ (8000934 <cli_dump+0x124>)
 8000822:	f008 f847 	bl	80088b4 <puts>
		return -1;
 8000826:	f04f 33ff 	mov.w	r3, #4294967295
 800082a:	e07e      	b.n	800092a <cli_dump+0x11a>
	}

	if (strncmp(argv[1], "0x", 2) == 0) address = (uint32_t)strtol(&argv[1][2], NULL, 16);
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	3304      	adds	r3, #4
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	2202      	movs	r2, #2
 8000834:	4940      	ldr	r1, [pc, #256]	@ (8000938 <cli_dump+0x128>)
 8000836:	4618      	mov	r0, r3
 8000838:	f008 f924 	bl	8008a84 <strncmp>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d10b      	bne.n	800085a <cli_dump+0x4a>
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	3304      	adds	r3, #4
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	3302      	adds	r3, #2
 800084a:	2210      	movs	r2, #16
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f007 fef4 	bl	800863c <strtol>
 8000854:	4603      	mov	r3, r0
 8000856:	627b      	str	r3, [r7, #36]	@ 0x24
 8000858:	e009      	b.n	800086e <cli_dump+0x5e>
	else address = (uint32_t)strtol(&argv[1][0], NULL, 16);
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	3304      	adds	r3, #4
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2210      	movs	r2, #16
 8000862:	2100      	movs	r1, #0
 8000864:	4618      	mov	r0, r3
 8000866:	f007 fee9 	bl	800863c <strtol>
 800086a:	4603      	mov	r3, r0
 800086c:	627b      	str	r3, [r7, #36]	@ 0x24

	length = (uint32_t)strtol(argv[2], NULL, 10);
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	3308      	adds	r3, #8
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	220a      	movs	r2, #10
 8000876:	2100      	movs	r1, #0
 8000878:	4618      	mov	r0, r3
 800087a:	f007 fedf 	bl	800863c <strtol>
 800087e:	4603      	mov	r3, r0
 8000880:	623b      	str	r3, [r7, #32]
	if (length > 10) length = 10;
 8000882:	6a3b      	ldr	r3, [r7, #32]
 8000884:	2b0a      	cmp	r3, #10
 8000886:	d901      	bls.n	800088c <cli_dump+0x7c>
 8000888:	230a      	movs	r3, #10
 800088a:	623b      	str	r3, [r7, #32]

	printf("address  %08lX, length = %ld\r\n", address, length);
 800088c:	6a3a      	ldr	r2, [r7, #32]
 800088e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000890:	482a      	ldr	r0, [pc, #168]	@ (800093c <cli_dump+0x12c>)
 8000892:	f007 ff9f 	bl	80087d4 <iprintf>

	for (int i=0; i<length; i++) {
 8000896:	2300      	movs	r3, #0
 8000898:	61bb      	str	r3, [r7, #24]
 800089a:	e03e      	b.n	800091a <cli_dump+0x10a>
		printf("\r\n%08lX : ", (uint32_t)address);
 800089c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800089e:	4828      	ldr	r0, [pc, #160]	@ (8000940 <cli_dump+0x130>)
 80008a0:	f007 ff98 	bl	80087d4 <iprintf>

		temp=address;
 80008a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008a6:	61fb      	str	r3, [r7, #28]
		for (int j=0; j<16; j++) {
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
 80008ac:	e00b      	b.n	80008c6 <cli_dump+0xb6>
			printf("%02X ", *(uint8_t *)temp);
 80008ae:	69fb      	ldr	r3, [r7, #28]
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	4619      	mov	r1, r3
 80008b4:	4823      	ldr	r0, [pc, #140]	@ (8000944 <cli_dump+0x134>)
 80008b6:	f007 ff8d 	bl	80087d4 <iprintf>
			temp++;
 80008ba:	69fb      	ldr	r3, [r7, #28]
 80008bc:	3301      	adds	r3, #1
 80008be:	61fb      	str	r3, [r7, #28]
		for (int j=0; j<16; j++) {
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	3301      	adds	r3, #1
 80008c4:	617b      	str	r3, [r7, #20]
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	2b0f      	cmp	r3, #15
 80008ca:	ddf0      	ble.n	80008ae <cli_dump+0x9e>
		}

		temp=address;
 80008cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008ce:	61fb      	str	r3, [r7, #28]
		for (int j=0; j<16; j++) {
 80008d0:	2300      	movs	r3, #0
 80008d2:	613b      	str	r3, [r7, #16]
 80008d4:	e019      	b.n	800090a <cli_dump+0xfa>
			char c = *(char *)temp;
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	73fb      	strb	r3, [r7, #15]
			c = isalnum(c) ? c : (char)' ';
 80008dc:	7bfb      	ldrb	r3, [r7, #15]
 80008de:	3301      	adds	r3, #1
 80008e0:	4a19      	ldr	r2, [pc, #100]	@ (8000948 <cli_dump+0x138>)
 80008e2:	4413      	add	r3, r2
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	f003 0307 	and.w	r3, r3, #7
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <cli_dump+0xe2>
 80008ee:	7bfb      	ldrb	r3, [r7, #15]
 80008f0:	e000      	b.n	80008f4 <cli_dump+0xe4>
 80008f2:	2320      	movs	r3, #32
 80008f4:	73fb      	strb	r3, [r7, #15]
			printf("%c", c);
 80008f6:	7bfb      	ldrb	r3, [r7, #15]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f007 ff7d 	bl	80087f8 <putchar>
			temp++;
 80008fe:	69fb      	ldr	r3, [r7, #28]
 8000900:	3301      	adds	r3, #1
 8000902:	61fb      	str	r3, [r7, #28]
		for (int j=0; j<16; j++) {
 8000904:	693b      	ldr	r3, [r7, #16]
 8000906:	3301      	adds	r3, #1
 8000908:	613b      	str	r3, [r7, #16]
 800090a:	693b      	ldr	r3, [r7, #16]
 800090c:	2b0f      	cmp	r3, #15
 800090e:	dde2      	ble.n	80008d6 <cli_dump+0xc6>
		}

		address = temp;
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int i=0; i<length; i++) {
 8000914:	69bb      	ldr	r3, [r7, #24]
 8000916:	3301      	adds	r3, #1
 8000918:	61bb      	str	r3, [r7, #24]
 800091a:	69bb      	ldr	r3, [r7, #24]
 800091c:	6a3a      	ldr	r2, [r7, #32]
 800091e:	429a      	cmp	r2, r3
 8000920:	d8bc      	bhi.n	800089c <cli_dump+0x8c>
	}
	printf("\r\n");
 8000922:	480a      	ldr	r0, [pc, #40]	@ (800094c <cli_dump+0x13c>)
 8000924:	f007 ffc6 	bl	80088b4 <puts>

	return 0;
 8000928:	2300      	movs	r3, #0
}
 800092a:	4618      	mov	r0, r3
 800092c:	3728      	adds	r7, #40	@ 0x28
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	080099d0 	.word	0x080099d0
 8000938:	08009a04 	.word	0x08009a04
 800093c:	08009a08 	.word	0x08009a08
 8000940:	08009a28 	.word	0x08009a28
 8000944:	08009a34 	.word	0x08009a34
 8000948:	08009d28 	.word	0x08009d28
 800094c:	08009a3c 	.word	0x08009a3c

08000950 <cli_mode>:

static int cli_mode(int argc, char *argv[])
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b084      	sub	sp, #16
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
 8000958:	6039      	str	r1, [r7, #0]
	if (argc < 2) {
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b01      	cmp	r3, #1
 800095e:	dc05      	bgt.n	800096c <cli_mode+0x1c>
		printf("Err : Arg No\r\n");
 8000960:	4809      	ldr	r0, [pc, #36]	@ (8000988 <cli_mode+0x38>)
 8000962:	f007 ffa7 	bl	80088b4 <puts>
		return -1;
 8000966:	f04f 33ff 	mov.w	r3, #4294967295
 800096a:	e009      	b.n	8000980 <cli_mode+0x30>
	}

	long mode = strtol(argv[1], NULL, 10);
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	3304      	adds	r3, #4
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	220a      	movs	r2, #10
 8000974:	2100      	movs	r1, #0
 8000976:	4618      	mov	r0, r3
 8000978:	f007 fe60 	bl	800863c <strtol>
 800097c:	60f8      	str	r0, [r7, #12]
	//app_mode((int)mode);

	return 0;
 800097e:	2300      	movs	r3, #0
}
 8000980:	4618      	mov	r0, r3
 8000982:	3710      	adds	r7, #16
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	080099d0 	.word	0x080099d0

0800098c <cli_led>:

static int cli_led(int argc, char *argv[])
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
 8000994:	6039      	str	r1, [r7, #0]
	if (argc < 3) {
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	2b02      	cmp	r3, #2
 800099a:	dc05      	bgt.n	80009a8 <cli_led+0x1c>
		printf("Err : Arg No\r\n");
 800099c:	4815      	ldr	r0, [pc, #84]	@ (80009f4 <cli_led+0x68>)
 800099e:	f007 ff89 	bl	80088b4 <puts>
		return -1;
 80009a2:	f04f 33ff 	mov.w	r3, #4294967295
 80009a6:	e021      	b.n	80009ec <cli_led+0x60>
	}

	long no = strtol(argv[1], NULL, 10);
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	3304      	adds	r3, #4
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	220a      	movs	r2, #10
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f007 fe42 	bl	800863c <strtol>
 80009b8:	6138      	str	r0, [r7, #16]
	int onoff = strcmp(argv[2], "off");
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	3308      	adds	r3, #8
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	490d      	ldr	r1, [pc, #52]	@ (80009f8 <cli_led+0x6c>)
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fc14 	bl	80001f0 <strcmp>
 80009c8:	6178      	str	r0, [r7, #20]

	if (onoff != 0) onoff = 1;
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <cli_led+0x48>
 80009d0:	2301      	movs	r3, #1
 80009d2:	617b      	str	r3, [r7, #20]
	bool sts = onoff ? true : false;
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	bf14      	ite	ne
 80009da:	2301      	movne	r3, #1
 80009dc:	2300      	moveq	r3, #0
 80009de:	73fb      	strb	r3, [r7, #15]

	printf("led %ld, %d\r\n", no, onoff);
 80009e0:	697a      	ldr	r2, [r7, #20]
 80009e2:	6939      	ldr	r1, [r7, #16]
 80009e4:	4805      	ldr	r0, [pc, #20]	@ (80009fc <cli_led+0x70>)
 80009e6:	f007 fef5 	bl	80087d4 <iprintf>
	 //led_onoff((uint8_t)no, sts);

	return 0;
 80009ea:	2300      	movs	r3, #0
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3718      	adds	r7, #24
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	080099d0 	.word	0x080099d0
 80009f8:	08009a40 	.word	0x08009a40
 80009fc:	08009a44 	.word	0x08009a44

08000a00 <cli_echo>:

static int cli_echo(int argc, char *argv[])
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	6039      	str	r1, [r7, #0]
	if (argc < 2) {
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	dc05      	bgt.n	8000a1c <cli_echo+0x1c>
		printf("Err : Arg No\r\n");
 8000a10:	4808      	ldr	r0, [pc, #32]	@ (8000a34 <cli_echo+0x34>)
 8000a12:	f007 ff4f 	bl	80088b4 <puts>
		return -1;
 8000a16:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1a:	e007      	b.n	8000a2c <cli_echo+0x2c>
	}
	printf("%s\r\n", argv[1]);
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	3304      	adds	r3, #4
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4619      	mov	r1, r3
 8000a24:	4804      	ldr	r0, [pc, #16]	@ (8000a38 <cli_echo+0x38>)
 8000a26:	f007 fed5 	bl	80087d4 <iprintf>

	return 0;
 8000a2a:	2300      	movs	r3, #0
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	080099d0 	.word	0x080099d0
 8000a38:	08009a54 	.word	0x08009a54

08000a3c <cli_help>:

static int cli_help(int argc, char *argv[])
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	6039      	str	r1, [r7, #0]
	for (int i=0; gCmdListObjs[i].cmd != NULL; i++) {
 8000a46:	2300      	movs	r3, #0
 8000a48:	60fb      	str	r3, [r7, #12]
 8000a4a:	e00c      	b.n	8000a66 <cli_help+0x2a>
		printf("%s\r\n", gCmdListObjs[i].remark);
 8000a4c:	4a0c      	ldr	r2, [pc, #48]	@ (8000a80 <cli_help+0x44>)
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	011b      	lsls	r3, r3, #4
 8000a52:	4413      	add	r3, r2
 8000a54:	330c      	adds	r3, #12
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4619      	mov	r1, r3
 8000a5a:	480a      	ldr	r0, [pc, #40]	@ (8000a84 <cli_help+0x48>)
 8000a5c:	f007 feba 	bl	80087d4 <iprintf>
	for (int i=0; gCmdListObjs[i].cmd != NULL; i++) {
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	3301      	adds	r3, #1
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	4a06      	ldr	r2, [pc, #24]	@ (8000a80 <cli_help+0x44>)
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	011b      	lsls	r3, r3, #4
 8000a6c:	4413      	add	r3, r2
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d1eb      	bne.n	8000a4c <cli_help+0x10>
	}

	return 0;
 8000a74:	2300      	movs	r3, #0
}
 8000a76:	4618      	mov	r0, r3
 8000a78:	3710      	adds	r7, #16
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	08009c38 	.word	0x08009c38
 8000a84:	08009a54 	.word	0x08009a54

08000a88 <cli_thread>:
static void cli_event_set(void *arg);

static BUF_T gBufObj[1];

void cli_thread(void *arg)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	uint32_t flags;
	(void)arg;

	printf("CLI Thread Started...\r\n");
 8000a90:	480c      	ldr	r0, [pc, #48]	@ (8000ac4 <cli_thread+0x3c>)
 8000a92:	f007 ff0f 	bl	80088b4 <puts>

	uart_regcbf(E_UART_1, cli_event_set);
 8000a96:	490c      	ldr	r1, [pc, #48]	@ (8000ac8 <cli_thread+0x40>)
 8000a98:	2001      	movs	r0, #1
 8000a9a:	f001 f825 	bl	8001ae8 <uart_regcbf>

	while (1) {
		flags = osEventFlagsWait(cli_evt_id, 0xffff, osFlagsWaitAny, osWaitForever);
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000acc <cli_thread+0x44>)
 8000aa0:	6818      	ldr	r0, [r3, #0]
 8000aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000aac:	f004 fd96 	bl	80055dc <osEventFlagsWait>
 8000ab0:	60f8      	str	r0, [r7, #12]

		if (flags & 0x0001) cli_parser(&gBufObj[0]);
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	f003 0301 	and.w	r3, r3, #1
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d0f0      	beq.n	8000a9e <cli_thread+0x16>
 8000abc:	4804      	ldr	r0, [pc, #16]	@ (8000ad0 <cli_thread+0x48>)
 8000abe:	f000 f861 	bl	8000b84 <cli_parser>
		flags = osEventFlagsWait(cli_evt_id, 0xffff, osFlagsWaitAny, osWaitForever);
 8000ac2:	e7ec      	b.n	8000a9e <cli_thread+0x16>
 8000ac4:	08009a5c 	.word	0x08009a5c
 8000ac8:	08000b4d 	.word	0x08000b4d
 8000acc:	200000a4 	.word	0x200000a4
 8000ad0:	200000a8 	.word	0x200000a8

08000ad4 <cli_init>:
	}
}

void cli_init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
	cli_evt_id = osEventFlagsNew(NULL);
 8000ad8:	2000      	movs	r0, #0
 8000ada:	f004 fcfd 	bl	80054d8 <osEventFlagsNew>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	4a12      	ldr	r2, [pc, #72]	@ (8000b2c <cli_init+0x58>)
 8000ae2:	6013      	str	r3, [r2, #0]
	if (cli_evt_id != NULL) printf("CLI Event Flags Created...\r\n");
 8000ae4:	4b11      	ldr	r3, [pc, #68]	@ (8000b2c <cli_init+0x58>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d00f      	beq.n	8000b0c <cli_init+0x38>
 8000aec:	4810      	ldr	r0, [pc, #64]	@ (8000b30 <cli_init+0x5c>)
 8000aee:	f007 fee1 	bl	80088b4 <puts>
	else {
		printf("CLI Event Flags Create File...\r\n");
		while (1);
	}

	cli_thread_hnd = osThreadNew(cli_thread, NULL, &cli_thread_attr);
 8000af2:	4a10      	ldr	r2, [pc, #64]	@ (8000b34 <cli_init+0x60>)
 8000af4:	2100      	movs	r1, #0
 8000af6:	4810      	ldr	r0, [pc, #64]	@ (8000b38 <cli_init+0x64>)
 8000af8:	f004 fc5c 	bl	80053b4 <osThreadNew>
 8000afc:	4603      	mov	r3, r0
 8000afe:	4a0f      	ldr	r2, [pc, #60]	@ (8000b3c <cli_init+0x68>)
 8000b00:	6013      	str	r3, [r2, #0]
	if (cli_thread_hnd != NULL) printf("CLI Thread Created...\r\n");
 8000b02:	4b0e      	ldr	r3, [pc, #56]	@ (8000b3c <cli_init+0x68>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d009      	beq.n	8000b1e <cli_init+0x4a>
 8000b0a:	e004      	b.n	8000b16 <cli_init+0x42>
		printf("CLI Event Flags Create File...\r\n");
 8000b0c:	480c      	ldr	r0, [pc, #48]	@ (8000b40 <cli_init+0x6c>)
 8000b0e:	f007 fed1 	bl	80088b4 <puts>
		while (1);
 8000b12:	bf00      	nop
 8000b14:	e7fd      	b.n	8000b12 <cli_init+0x3e>
	if (cli_thread_hnd != NULL) printf("CLI Thread Created...\r\n");
 8000b16:	480b      	ldr	r0, [pc, #44]	@ (8000b44 <cli_init+0x70>)
 8000b18:	f007 fecc 	bl	80088b4 <puts>
	else {
		printf("CLI Thread Create Fail...\r\n");
		while (1);
	}
}
 8000b1c:	e004      	b.n	8000b28 <cli_init+0x54>
		printf("CLI Thread Create Fail...\r\n");
 8000b1e:	480a      	ldr	r0, [pc, #40]	@ (8000b48 <cli_init+0x74>)
 8000b20:	f007 fec8 	bl	80088b4 <puts>
		while (1);
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <cli_init+0x50>
}
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	200000a4 	.word	0x200000a4
 8000b30:	08009a74 	.word	0x08009a74
 8000b34:	08009c14 	.word	0x08009c14
 8000b38:	08000a89 	.word	0x08000a89
 8000b3c:	200000a0 	.word	0x200000a0
 8000b40:	08009a90 	.word	0x08009a90
 8000b44:	08009ab0 	.word	0x08009ab0
 8000b48:	08009ac8 	.word	0x08009ac8

08000b4c <cli_event_set>:

static void cli_event_set(void *arg)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	BUF_T *pBuf = (BUF_T *)arg;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	60fb      	str	r3, [r7, #12]

	memcpy(&gBufObj[0], pBuf, sizeof(BUF_T));
 8000b58:	4a08      	ldr	r2, [pc, #32]	@ (8000b7c <cli_event_set+0x30>)
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	4610      	mov	r0, r2
 8000b5e:	4619      	mov	r1, r3
 8000b60:	2367      	movs	r3, #103	@ 0x67
 8000b62:	461a      	mov	r2, r3
 8000b64:	f008 f8c5 	bl	8008cf2 <memcpy>

	osEventFlagsSet(cli_evt_id, 0x0001);
 8000b68:	4b05      	ldr	r3, [pc, #20]	@ (8000b80 <cli_event_set+0x34>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f004 fcf2 	bl	8005558 <osEventFlagsSet>
}
 8000b74:	bf00      	nop
 8000b76:	3710      	adds	r7, #16
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	200000a8 	.word	0x200000a8
 8000b80:	200000a4 	.word	0x200000a4

08000b84 <cli_parser>:


#define D_DELIMITER		" ,\r\n"

static void cli_parser(BUF_T *arg)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b090      	sub	sp, #64	@ 0x40
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
	int argc = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	char *argv[10];
	char *ptr;

	char *buf = (char *)arg->buf;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	633b      	str	r3, [r7, #48]	@ 0x30

	//printf("rx:%s\r\n", (char *)arg);
	// token 분리
	ptr = strtok(buf, D_DELIMITER);
 8000b94:	4924      	ldr	r1, [pc, #144]	@ (8000c28 <cli_parser+0xa4>)
 8000b96:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000b98:	f007 ff86 	bl	8008aa8 <strtok>
 8000b9c:	63b8      	str	r0, [r7, #56]	@ 0x38
	if (ptr == NULL) return;
 8000b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d03c      	beq.n	8000c1e <cli_parser+0x9a>

	while (ptr != NULL) {
 8000ba4:	e00e      	b.n	8000bc4 <cli_parser+0x40>
		argv[argc] = ptr;
 8000ba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	3340      	adds	r3, #64	@ 0x40
 8000bac:	443b      	add	r3, r7
 8000bae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000bb0:	f843 2c38 	str.w	r2, [r3, #-56]
		argc++;
 8000bb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
		ptr = strtok(NULL, D_DELIMITER);
 8000bba:	491b      	ldr	r1, [pc, #108]	@ (8000c28 <cli_parser+0xa4>)
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	f007 ff73 	bl	8008aa8 <strtok>
 8000bc2:	63b8      	str	r0, [r7, #56]	@ 0x38
	while (ptr != NULL) {
 8000bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d1ed      	bne.n	8000ba6 <cli_parser+0x22>

//	for (int i=0; i<argc; i++) {
//		printf("%d:%s\r\n", i, argv[i]);
//	}

	for (int i=0; gCmdListObjs[i].cmd != NULL; i++) {
 8000bca:	2300      	movs	r3, #0
 8000bcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8000bce:	e01b      	b.n	8000c08 <cli_parser+0x84>
		if (strcmp(gCmdListObjs[i].cmd, argv[0]) == 0) {
 8000bd0:	4a16      	ldr	r2, [pc, #88]	@ (8000c2c <cli_parser+0xa8>)
 8000bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bd4:	011b      	lsls	r3, r3, #4
 8000bd6:	4413      	add	r3, r2
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	68ba      	ldr	r2, [r7, #8]
 8000bdc:	4611      	mov	r1, r2
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff fb06 	bl	80001f0 <strcmp>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d10b      	bne.n	8000c02 <cli_parser+0x7e>
			gCmdListObjs[i].cbf(argc, argv);
 8000bea:	4a10      	ldr	r2, [pc, #64]	@ (8000c2c <cli_parser+0xa8>)
 8000bec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bee:	011b      	lsls	r3, r3, #4
 8000bf0:	4413      	add	r3, r2
 8000bf2:	3308      	adds	r3, #8
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f107 0208 	add.w	r2, r7, #8
 8000bfa:	4611      	mov	r1, r2
 8000bfc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000bfe:	4798      	blx	r3
			return;
 8000c00:	e00e      	b.n	8000c20 <cli_parser+0x9c>
	for (int i=0; gCmdListObjs[i].cmd != NULL; i++) {
 8000c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c04:	3301      	adds	r3, #1
 8000c06:	637b      	str	r3, [r7, #52]	@ 0x34
 8000c08:	4a08      	ldr	r2, [pc, #32]	@ (8000c2c <cli_parser+0xa8>)
 8000c0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c0c:	011b      	lsls	r3, r3, #4
 8000c0e:	4413      	add	r3, r2
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d1dc      	bne.n	8000bd0 <cli_parser+0x4c>
		}
	}

	printf("Unsupported Command\r\n");
 8000c16:	4806      	ldr	r0, [pc, #24]	@ (8000c30 <cli_parser+0xac>)
 8000c18:	f007 fe4c 	bl	80088b4 <puts>
 8000c1c:	e000      	b.n	8000c20 <cli_parser+0x9c>
	if (ptr == NULL) return;
 8000c1e:	bf00      	nop
}
 8000c20:	3740      	adds	r7, #64	@ 0x40
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	08009ae4 	.word	0x08009ae4
 8000c2c:	08009c38 	.word	0x08009c38
 8000c30:	08009aec 	.word	0x08009aec

08000c34 <io_exti_init>:
static IO_EXTI_T gIOExtiObjs[D_IO_EXTI_MAX];

static void io_exti_dummy(uint8_t rf, void *arg);

void io_exti_init(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
	for (int i=0; i<D_IO_EXTI_MAX; i++) {
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	e01f      	b.n	8000c80 <io_exti_init+0x4c>
		gIOExtiObjs[i].port = NULL;
 8000c40:	4918      	ldr	r1, [pc, #96]	@ (8000ca4 <io_exti_init+0x70>)
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	4613      	mov	r3, r2
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	4413      	add	r3, r2
 8000c4a:	009b      	lsls	r3, r3, #2
 8000c4c:	440b      	add	r3, r1
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
		gIOExtiObjs[i].pin = 0;
 8000c52:	4914      	ldr	r1, [pc, #80]	@ (8000ca4 <io_exti_init+0x70>)
 8000c54:	687a      	ldr	r2, [r7, #4]
 8000c56:	4613      	mov	r3, r2
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	4413      	add	r3, r2
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	440b      	add	r3, r1
 8000c60:	3304      	adds	r3, #4
 8000c62:	2200      	movs	r2, #0
 8000c64:	801a      	strh	r2, [r3, #0]
		gIOExtiObjs[i].cbf = io_exti_dummy;
 8000c66:	490f      	ldr	r1, [pc, #60]	@ (8000ca4 <io_exti_init+0x70>)
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	4613      	mov	r3, r2
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	4413      	add	r3, r2
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	440b      	add	r3, r1
 8000c74:	3308      	adds	r3, #8
 8000c76:	4a0c      	ldr	r2, [pc, #48]	@ (8000ca8 <io_exti_init+0x74>)
 8000c78:	601a      	str	r2, [r3, #0]
	for (int i=0; i<D_IO_EXTI_MAX; i++) {
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2b0f      	cmp	r3, #15
 8000c84:	dddc      	ble.n	8000c40 <io_exti_init+0xc>
	}

	gIOExtiObjs[13].port = USER_Btn_GPIO_Port;
 8000c86:	4b07      	ldr	r3, [pc, #28]	@ (8000ca4 <io_exti_init+0x70>)
 8000c88:	4a08      	ldr	r2, [pc, #32]	@ (8000cac <io_exti_init+0x78>)
 8000c8a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
	gIOExtiObjs[13].pin = USER_Btn_Pin;
 8000c8e:	4b05      	ldr	r3, [pc, #20]	@ (8000ca4 <io_exti_init+0x70>)
 8000c90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c94:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	20000110 	.word	0x20000110
 8000ca8:	08000d85 	.word	0x08000d85
 8000cac:	40020800 	.word	0x40020800

08000cb0 <io_exti_regcbf>:

bool io_exti_regcbf(uint8_t idx, IO_CBF_T cbf)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	6039      	str	r1, [r7, #0]
 8000cba:	71fb      	strb	r3, [r7, #7]
	if (idx > D_IO_EXTI_MAX) return false;
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	2b10      	cmp	r3, #16
 8000cc0:	d901      	bls.n	8000cc6 <io_exti_regcbf+0x16>
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <io_exti_regcbf+0x2c>
	gIOExtiObjs[idx].cbf = cbf;
 8000cc6:	79fa      	ldrb	r2, [r7, #7]
 8000cc8:	4907      	ldr	r1, [pc, #28]	@ (8000ce8 <io_exti_regcbf+0x38>)
 8000cca:	4613      	mov	r3, r2
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	4413      	add	r3, r2
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	440b      	add	r3, r1
 8000cd4:	3308      	adds	r3, #8
 8000cd6:	683a      	ldr	r2, [r7, #0]
 8000cd8:	601a      	str	r2, [r3, #0]
	return true;
 8000cda:	2301      	movs	r3, #1
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr
 8000ce8:	20000110 	.word	0x20000110

08000cec <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	80fb      	strh	r3, [r7, #6]
	for (volatile uint16_t i=0; i<D_IO_EXTI_MAX; i++) {
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	81fb      	strh	r3, [r7, #14]
 8000cfa:	e038      	b.n	8000d6e <HAL_GPIO_EXTI_Callback+0x82>
		volatile GPIO_PinState sts = HAL_GPIO_ReadPin(gIOExtiObjs[i].port, gIOExtiObjs[i].pin);
 8000cfc:	89fb      	ldrh	r3, [r7, #14]
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	4619      	mov	r1, r3
 8000d02:	4a1f      	ldr	r2, [pc, #124]	@ (8000d80 <HAL_GPIO_EXTI_Callback+0x94>)
 8000d04:	460b      	mov	r3, r1
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	440b      	add	r3, r1
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	4413      	add	r3, r2
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	89fb      	ldrh	r3, [r7, #14]
 8000d12:	b29b      	uxth	r3, r3
 8000d14:	4618      	mov	r0, r3
 8000d16:	491a      	ldr	r1, [pc, #104]	@ (8000d80 <HAL_GPIO_EXTI_Callback+0x94>)
 8000d18:	4603      	mov	r3, r0
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	4403      	add	r3, r0
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	440b      	add	r3, r1
 8000d22:	3304      	adds	r3, #4
 8000d24:	881b      	ldrh	r3, [r3, #0]
 8000d26:	4619      	mov	r1, r3
 8000d28:	4610      	mov	r0, r2
 8000d2a:	f001 fea5 	bl	8002a78 <HAL_GPIO_ReadPin>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	737b      	strb	r3, [r7, #13]
		if (GPIO_Pin & (0x01 << i)) 	gIOExtiObjs[i].cbf((uint8_t)sts, (void *)&i);
 8000d32:	88fb      	ldrh	r3, [r7, #6]
 8000d34:	89fa      	ldrh	r2, [r7, #14]
 8000d36:	b292      	uxth	r2, r2
 8000d38:	4113      	asrs	r3, r2
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d010      	beq.n	8000d64 <HAL_GPIO_EXTI_Callback+0x78>
 8000d42:	89fb      	ldrh	r3, [r7, #14]
 8000d44:	b29b      	uxth	r3, r3
 8000d46:	4619      	mov	r1, r3
 8000d48:	4a0d      	ldr	r2, [pc, #52]	@ (8000d80 <HAL_GPIO_EXTI_Callback+0x94>)
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	005b      	lsls	r3, r3, #1
 8000d4e:	440b      	add	r3, r1
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	4413      	add	r3, r2
 8000d54:	3308      	adds	r3, #8
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	7b7a      	ldrb	r2, [r7, #13]
 8000d5a:	b2d2      	uxtb	r2, r2
 8000d5c:	f107 010e 	add.w	r1, r7, #14
 8000d60:	4610      	mov	r0, r2
 8000d62:	4798      	blx	r3
	for (volatile uint16_t i=0; i<D_IO_EXTI_MAX; i++) {
 8000d64:	89fb      	ldrh	r3, [r7, #14]
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	3301      	adds	r3, #1
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	81fb      	strh	r3, [r7, #14]
 8000d6e:	89fb      	ldrh	r3, [r7, #14]
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	2b0f      	cmp	r3, #15
 8000d74:	d9c2      	bls.n	8000cfc <HAL_GPIO_EXTI_Callback+0x10>
	}
}
 8000d76:	bf00      	nop
 8000d78:	bf00      	nop
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20000110 	.word	0x20000110

08000d84 <io_exti_dummy>:

static void io_exti_dummy(uint8_t rf, void *arg)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	6039      	str	r1, [r7, #0]
 8000d8e:	71fb      	strb	r3, [r7, #7]
	(void)rf;
	(void)arg;
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <_write>:
//	HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xffff);
//	return ch;
//}

int _write(int file, char *ptr, int len)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	60f8      	str	r0, [r7, #12]
 8000da4:	60b9      	str	r1, [r7, #8]
 8000da6:	607a      	str	r2, [r7, #4]
  (void)file;
  //int DataIdx;

  HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, 0xffff);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	b29a      	uxth	r2, r3
 8000dac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000db0:	68b9      	ldr	r1, [r7, #8]
 8000db2:	4804      	ldr	r0, [pc, #16]	@ (8000dc4 <_write+0x28>)
 8000db4:	f002 ff7a 	bl	8003cac <HAL_UART_Transmit>

  return len;
 8000db8:	687b      	ldr	r3, [r7, #4]
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000488 	.word	0x20000488

08000dc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dcc:	f000 ff46 	bl	8001c5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd0:	f000 f822 	bl	8000e18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd4:	f000 f9a8 	bl	8001128 <MX_GPIO_Init>
  MX_ETH_Init();
 8000dd8:	f000 f888 	bl	8000eec <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000ddc:	f000 f94c 	bl	8001078 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000de0:	f000 f974 	bl	80010cc <MX_USB_OTG_FS_PCD_Init>
  MX_TIM3_Init();
 8000de4:	f000 f8d0 	bl	8000f88 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000de8:	f000 f91c 	bl	8001024 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  app();
 8000dec:	f7ff fbd8 	bl	80005a0 <app>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000df0:	f004 fa96 	bl	8005320 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000df4:	4a05      	ldr	r2, [pc, #20]	@ (8000e0c <main+0x44>)
 8000df6:	2100      	movs	r1, #0
 8000df8:	4805      	ldr	r0, [pc, #20]	@ (8000e10 <main+0x48>)
 8000dfa:	f004 fadb 	bl	80053b4 <osThreadNew>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	4a04      	ldr	r2, [pc, #16]	@ (8000e14 <main+0x4c>)
 8000e02:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000e04:	f004 fab0 	bl	8005368 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e08:	bf00      	nop
 8000e0a:	e7fd      	b.n	8000e08 <main+0x40>
 8000e0c:	08009cb8 	.word	0x08009cb8
 8000e10:	08001295 	.word	0x08001295
 8000e14:	200009b4 	.word	0x200009b4

08000e18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b094      	sub	sp, #80	@ 0x50
 8000e1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e1e:	f107 0320 	add.w	r3, r7, #32
 8000e22:	2230      	movs	r2, #48	@ 0x30
 8000e24:	2100      	movs	r1, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f007 fe24 	bl	8008a74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e2c:	f107 030c 	add.w	r3, r7, #12
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	4b28      	ldr	r3, [pc, #160]	@ (8000ee4 <SystemClock_Config+0xcc>)
 8000e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e44:	4a27      	ldr	r2, [pc, #156]	@ (8000ee4 <SystemClock_Config+0xcc>)
 8000e46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e4c:	4b25      	ldr	r3, [pc, #148]	@ (8000ee4 <SystemClock_Config+0xcc>)
 8000e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e58:	2300      	movs	r3, #0
 8000e5a:	607b      	str	r3, [r7, #4]
 8000e5c:	4b22      	ldr	r3, [pc, #136]	@ (8000ee8 <SystemClock_Config+0xd0>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a21      	ldr	r2, [pc, #132]	@ (8000ee8 <SystemClock_Config+0xd0>)
 8000e62:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e66:	6013      	str	r3, [r2, #0]
 8000e68:	4b1f      	ldr	r3, [pc, #124]	@ (8000ee8 <SystemClock_Config+0xd0>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e70:	607b      	str	r3, [r7, #4]
 8000e72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e74:	2301      	movs	r3, #1
 8000e76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e78:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000e7c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e82:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e88:	2304      	movs	r3, #4
 8000e8a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e8c:	23a8      	movs	r3, #168	@ 0xa8
 8000e8e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e90:	2302      	movs	r3, #2
 8000e92:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e94:	2307      	movs	r3, #7
 8000e96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e98:	f107 0320 	add.w	r3, r7, #32
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f001 ff45 	bl	8002d2c <HAL_RCC_OscConfig>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ea8:	f000 f9fe 	bl	80012a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eac:	230f      	movs	r3, #15
 8000eae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000eb8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ebc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000ebe:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ec2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ec4:	f107 030c 	add.w	r3, r7, #12
 8000ec8:	2105      	movs	r1, #5
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f002 f9a6 	bl	800321c <HAL_RCC_ClockConfig>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ed6:	f000 f9e7 	bl	80012a8 <Error_Handler>
  }
}
 8000eda:	bf00      	nop
 8000edc:	3750      	adds	r7, #80	@ 0x50
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40007000 	.word	0x40007000

08000eec <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000ef0:	4b1f      	ldr	r3, [pc, #124]	@ (8000f70 <MX_ETH_Init+0x84>)
 8000ef2:	4a20      	ldr	r2, [pc, #128]	@ (8000f74 <MX_ETH_Init+0x88>)
 8000ef4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000ef6:	4b20      	ldr	r3, [pc, #128]	@ (8000f78 <MX_ETH_Init+0x8c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000efc:	4b1e      	ldr	r3, [pc, #120]	@ (8000f78 <MX_ETH_Init+0x8c>)
 8000efe:	2280      	movs	r2, #128	@ 0x80
 8000f00:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000f02:	4b1d      	ldr	r3, [pc, #116]	@ (8000f78 <MX_ETH_Init+0x8c>)
 8000f04:	22e1      	movs	r2, #225	@ 0xe1
 8000f06:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000f08:	4b1b      	ldr	r3, [pc, #108]	@ (8000f78 <MX_ETH_Init+0x8c>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000f0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f78 <MX_ETH_Init+0x8c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000f14:	4b18      	ldr	r3, [pc, #96]	@ (8000f78 <MX_ETH_Init+0x8c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000f1a:	4b15      	ldr	r3, [pc, #84]	@ (8000f70 <MX_ETH_Init+0x84>)
 8000f1c:	4a16      	ldr	r2, [pc, #88]	@ (8000f78 <MX_ETH_Init+0x8c>)
 8000f1e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000f20:	4b13      	ldr	r3, [pc, #76]	@ (8000f70 <MX_ETH_Init+0x84>)
 8000f22:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000f26:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000f28:	4b11      	ldr	r3, [pc, #68]	@ (8000f70 <MX_ETH_Init+0x84>)
 8000f2a:	4a14      	ldr	r2, [pc, #80]	@ (8000f7c <MX_ETH_Init+0x90>)
 8000f2c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000f2e:	4b10      	ldr	r3, [pc, #64]	@ (8000f70 <MX_ETH_Init+0x84>)
 8000f30:	4a13      	ldr	r2, [pc, #76]	@ (8000f80 <MX_ETH_Init+0x94>)
 8000f32:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000f34:	4b0e      	ldr	r3, [pc, #56]	@ (8000f70 <MX_ETH_Init+0x84>)
 8000f36:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000f3a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000f3c:	480c      	ldr	r0, [pc, #48]	@ (8000f70 <MX_ETH_Init+0x84>)
 8000f3e:	f001 f8c7 	bl	80020d0 <HAL_ETH_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000f48:	f000 f9ae 	bl	80012a8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000f4c:	2238      	movs	r2, #56	@ 0x38
 8000f4e:	2100      	movs	r1, #0
 8000f50:	480c      	ldr	r0, [pc, #48]	@ (8000f84 <MX_ETH_Init+0x98>)
 8000f52:	f007 fd8f 	bl	8008a74 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000f56:	4b0b      	ldr	r3, [pc, #44]	@ (8000f84 <MX_ETH_Init+0x98>)
 8000f58:	2221      	movs	r2, #33	@ 0x21
 8000f5a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000f5c:	4b09      	ldr	r3, [pc, #36]	@ (8000f84 <MX_ETH_Init+0x98>)
 8000f5e:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000f62:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000f64:	4b07      	ldr	r3, [pc, #28]	@ (8000f84 <MX_ETH_Init+0x98>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000348 	.word	0x20000348
 8000f74:	40028000 	.word	0x40028000
 8000f78:	200009b8 	.word	0x200009b8
 8000f7c:	200002a8 	.word	0x200002a8
 8000f80:	20000208 	.word	0x20000208
 8000f84:	200001d0 	.word	0x200001d0

08000f88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f8e:	f107 0308 	add.w	r3, r7, #8
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000fa4:	4b1d      	ldr	r3, [pc, #116]	@ (800101c <MX_TIM3_Init+0x94>)
 8000fa6:	4a1e      	ldr	r2, [pc, #120]	@ (8001020 <MX_TIM3_Init+0x98>)
 8000fa8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000faa:	4b1c      	ldr	r3, [pc, #112]	@ (800101c <MX_TIM3_Init+0x94>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb0:	4b1a      	ldr	r3, [pc, #104]	@ (800101c <MX_TIM3_Init+0x94>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000fb6:	4b19      	ldr	r3, [pc, #100]	@ (800101c <MX_TIM3_Init+0x94>)
 8000fb8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fbc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fbe:	4b17      	ldr	r3, [pc, #92]	@ (800101c <MX_TIM3_Init+0x94>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fc4:	4b15      	ldr	r3, [pc, #84]	@ (800101c <MX_TIM3_Init+0x94>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000fca:	4814      	ldr	r0, [pc, #80]	@ (800101c <MX_TIM3_Init+0x94>)
 8000fcc:	f002 fb46 	bl	800365c <HAL_TIM_Base_Init>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000fd6:	f000 f967 	bl	80012a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fde:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fe0:	f107 0308 	add.w	r3, r7, #8
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	480d      	ldr	r0, [pc, #52]	@ (800101c <MX_TIM3_Init+0x94>)
 8000fe8:	f002 fb87 	bl	80036fa <HAL_TIM_ConfigClockSource>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000ff2:	f000 f959 	bl	80012a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ffe:	463b      	mov	r3, r7
 8001000:	4619      	mov	r1, r3
 8001002:	4806      	ldr	r0, [pc, #24]	@ (800101c <MX_TIM3_Init+0x94>)
 8001004:	f002 fd86 	bl	8003b14 <HAL_TIMEx_MasterConfigSynchronization>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800100e:	f000 f94b 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001012:	bf00      	nop
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200003f8 	.word	0x200003f8
 8001020:	40000400 	.word	0x40000400

08001024 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001028:	4b11      	ldr	r3, [pc, #68]	@ (8001070 <MX_USART2_UART_Init+0x4c>)
 800102a:	4a12      	ldr	r2, [pc, #72]	@ (8001074 <MX_USART2_UART_Init+0x50>)
 800102c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800102e:	4b10      	ldr	r3, [pc, #64]	@ (8001070 <MX_USART2_UART_Init+0x4c>)
 8001030:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001034:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001036:	4b0e      	ldr	r3, [pc, #56]	@ (8001070 <MX_USART2_UART_Init+0x4c>)
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800103c:	4b0c      	ldr	r3, [pc, #48]	@ (8001070 <MX_USART2_UART_Init+0x4c>)
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001042:	4b0b      	ldr	r3, [pc, #44]	@ (8001070 <MX_USART2_UART_Init+0x4c>)
 8001044:	2200      	movs	r2, #0
 8001046:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001048:	4b09      	ldr	r3, [pc, #36]	@ (8001070 <MX_USART2_UART_Init+0x4c>)
 800104a:	220c      	movs	r2, #12
 800104c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800104e:	4b08      	ldr	r3, [pc, #32]	@ (8001070 <MX_USART2_UART_Init+0x4c>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001054:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <MX_USART2_UART_Init+0x4c>)
 8001056:	2200      	movs	r2, #0
 8001058:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800105a:	4805      	ldr	r0, [pc, #20]	@ (8001070 <MX_USART2_UART_Init+0x4c>)
 800105c:	f002 fdd6 	bl	8003c0c <HAL_UART_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001066:	f000 f91f 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000440 	.word	0x20000440
 8001074:	40004400 	.word	0x40004400

08001078 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800107c:	4b11      	ldr	r3, [pc, #68]	@ (80010c4 <MX_USART3_UART_Init+0x4c>)
 800107e:	4a12      	ldr	r2, [pc, #72]	@ (80010c8 <MX_USART3_UART_Init+0x50>)
 8001080:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001082:	4b10      	ldr	r3, [pc, #64]	@ (80010c4 <MX_USART3_UART_Init+0x4c>)
 8001084:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001088:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800108a:	4b0e      	ldr	r3, [pc, #56]	@ (80010c4 <MX_USART3_UART_Init+0x4c>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001090:	4b0c      	ldr	r3, [pc, #48]	@ (80010c4 <MX_USART3_UART_Init+0x4c>)
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001096:	4b0b      	ldr	r3, [pc, #44]	@ (80010c4 <MX_USART3_UART_Init+0x4c>)
 8001098:	2200      	movs	r2, #0
 800109a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800109c:	4b09      	ldr	r3, [pc, #36]	@ (80010c4 <MX_USART3_UART_Init+0x4c>)
 800109e:	220c      	movs	r2, #12
 80010a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010a2:	4b08      	ldr	r3, [pc, #32]	@ (80010c4 <MX_USART3_UART_Init+0x4c>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010a8:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <MX_USART3_UART_Init+0x4c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80010ae:	4805      	ldr	r0, [pc, #20]	@ (80010c4 <MX_USART3_UART_Init+0x4c>)
 80010b0:	f002 fdac 	bl	8003c0c <HAL_UART_Init>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80010ba:	f000 f8f5 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000488 	.word	0x20000488
 80010c8:	40004800 	.word	0x40004800

080010cc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80010d0:	4b14      	ldr	r3, [pc, #80]	@ (8001124 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010d2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80010d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80010d8:	4b12      	ldr	r3, [pc, #72]	@ (8001124 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010da:	2204      	movs	r2, #4
 80010dc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80010de:	4b11      	ldr	r3, [pc, #68]	@ (8001124 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010e0:	2202      	movs	r2, #2
 80010e2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001124 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001124 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010ec:	2202      	movs	r2, #2
 80010ee:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80010f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001124 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80010f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001124 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80010fc:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80010fe:	2200      	movs	r2, #0
 8001100:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001102:	4b08      	ldr	r3, [pc, #32]	@ (8001124 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001104:	2201      	movs	r2, #1
 8001106:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001108:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800110a:	2200      	movs	r2, #0
 800110c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800110e:	4805      	ldr	r0, [pc, #20]	@ (8001124 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001110:	f001 fcfc 	bl	8002b0c <HAL_PCD_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800111a:	f000 f8c5 	bl	80012a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200004d0 	.word	0x200004d0

08001128 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08c      	sub	sp, #48	@ 0x30
 800112c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112e:	f107 031c 	add.w	r3, r7, #28
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
 800113c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	61bb      	str	r3, [r7, #24]
 8001142:	4b50      	ldr	r3, [pc, #320]	@ (8001284 <MX_GPIO_Init+0x15c>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001146:	4a4f      	ldr	r2, [pc, #316]	@ (8001284 <MX_GPIO_Init+0x15c>)
 8001148:	f043 0304 	orr.w	r3, r3, #4
 800114c:	6313      	str	r3, [r2, #48]	@ 0x30
 800114e:	4b4d      	ldr	r3, [pc, #308]	@ (8001284 <MX_GPIO_Init+0x15c>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	f003 0304 	and.w	r3, r3, #4
 8001156:	61bb      	str	r3, [r7, #24]
 8001158:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
 800115e:	4b49      	ldr	r3, [pc, #292]	@ (8001284 <MX_GPIO_Init+0x15c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001162:	4a48      	ldr	r2, [pc, #288]	@ (8001284 <MX_GPIO_Init+0x15c>)
 8001164:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001168:	6313      	str	r3, [r2, #48]	@ 0x30
 800116a:	4b46      	ldr	r3, [pc, #280]	@ (8001284 <MX_GPIO_Init+0x15c>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001172:	617b      	str	r3, [r7, #20]
 8001174:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
 800117a:	4b42      	ldr	r3, [pc, #264]	@ (8001284 <MX_GPIO_Init+0x15c>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117e:	4a41      	ldr	r2, [pc, #260]	@ (8001284 <MX_GPIO_Init+0x15c>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6313      	str	r3, [r2, #48]	@ 0x30
 8001186:	4b3f      	ldr	r3, [pc, #252]	@ (8001284 <MX_GPIO_Init+0x15c>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	4b3b      	ldr	r3, [pc, #236]	@ (8001284 <MX_GPIO_Init+0x15c>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119a:	4a3a      	ldr	r2, [pc, #232]	@ (8001284 <MX_GPIO_Init+0x15c>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a2:	4b38      	ldr	r3, [pc, #224]	@ (8001284 <MX_GPIO_Init+0x15c>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	4b34      	ldr	r3, [pc, #208]	@ (8001284 <MX_GPIO_Init+0x15c>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	4a33      	ldr	r2, [pc, #204]	@ (8001284 <MX_GPIO_Init+0x15c>)
 80011b8:	f043 0308 	orr.w	r3, r3, #8
 80011bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011be:	4b31      	ldr	r3, [pc, #196]	@ (8001284 <MX_GPIO_Init+0x15c>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	f003 0308 	and.w	r3, r3, #8
 80011c6:	60bb      	str	r3, [r7, #8]
 80011c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001284 <MX_GPIO_Init+0x15c>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	4a2c      	ldr	r2, [pc, #176]	@ (8001284 <MX_GPIO_Init+0x15c>)
 80011d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011da:	4b2a      	ldr	r3, [pc, #168]	@ (8001284 <MX_GPIO_Init+0x15c>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80011e6:	2200      	movs	r2, #0
 80011e8:	f44f 4181 	mov.w	r1, #16512	@ 0x4080
 80011ec:	4826      	ldr	r0, [pc, #152]	@ (8001288 <MX_GPIO_Init+0x160>)
 80011ee:	f001 fc5b 	bl	8002aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2140      	movs	r1, #64	@ 0x40
 80011f6:	4825      	ldr	r0, [pc, #148]	@ (800128c <MX_GPIO_Init+0x164>)
 80011f8:	f001 fc56 	bl	8002aa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80011fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001200:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001202:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001206:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800120c:	f107 031c 	add.w	r3, r7, #28
 8001210:	4619      	mov	r1, r3
 8001212:	481f      	ldr	r0, [pc, #124]	@ (8001290 <MX_GPIO_Init+0x168>)
 8001214:	f001 fa84 	bl	8002720 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001218:	f44f 4381 	mov.w	r3, #16512	@ 0x4080
 800121c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121e:	2301      	movs	r3, #1
 8001220:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2300      	movs	r3, #0
 8001228:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122a:	f107 031c 	add.w	r3, r7, #28
 800122e:	4619      	mov	r1, r3
 8001230:	4815      	ldr	r0, [pc, #84]	@ (8001288 <MX_GPIO_Init+0x160>)
 8001232:	f001 fa75 	bl	8002720 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001236:	2340      	movs	r3, #64	@ 0x40
 8001238:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123a:	2301      	movs	r3, #1
 800123c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001242:	2300      	movs	r3, #0
 8001244:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001246:	f107 031c 	add.w	r3, r7, #28
 800124a:	4619      	mov	r1, r3
 800124c:	480f      	ldr	r0, [pc, #60]	@ (800128c <MX_GPIO_Init+0x164>)
 800124e:	f001 fa67 	bl	8002720 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001252:	2380      	movs	r3, #128	@ 0x80
 8001254:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001256:	2300      	movs	r3, #0
 8001258:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800125e:	f107 031c 	add.w	r3, r7, #28
 8001262:	4619      	mov	r1, r3
 8001264:	4809      	ldr	r0, [pc, #36]	@ (800128c <MX_GPIO_Init+0x164>)
 8001266:	f001 fa5b 	bl	8002720 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	2105      	movs	r1, #5
 800126e:	2028      	movs	r0, #40	@ 0x28
 8001270:	f000 fe65 	bl	8001f3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001274:	2028      	movs	r0, #40	@ 0x28
 8001276:	f000 fe7e 	bl	8001f76 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800127a:	bf00      	nop
 800127c:	3730      	adds	r7, #48	@ 0x30
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40023800 	.word	0x40023800
 8001288:	40020400 	.word	0x40020400
 800128c:	40021800 	.word	0x40021800
 8001290:	40020800 	.word	0x40020800

08001294 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
//  for(;;)
//  {
//    osDelay(1);
//  }
  /* USER CODE END 5 */
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012ac:	b672      	cpsid	i
}
 80012ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b0:	bf00      	nop
 80012b2:	e7fd      	b.n	80012b0 <Error_Handler+0x8>

080012b4 <polling_thread>:
static void btn_uart_callback(void *arg);
//#define D_BTN_BLUE 	0
//static BUTTON_T gBtnBlue;

static void polling_thread(void *arg)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
	uint32_t flags;
	(void)arg;

	printf("Polling Thread Started...\r\n");
 80012bc:	4828      	ldr	r0, [pc, #160]	@ (8001360 <polling_thread+0xac>)
 80012be:	f007 faf9 	bl	80088b4 <puts>

	button_init();
 80012c2:	f7ff f989 	bl	80005d8 <button_init>
	button_regcbf(E_BTN_BLUE, btn_blue_callback);
 80012c6:	4927      	ldr	r1, [pc, #156]	@ (8001364 <polling_thread+0xb0>)
 80012c8:	2000      	movs	r0, #0
 80012ca:	f7ff f9b9 	bl	8000640 <button_regcbf>
	button_regcbf(E_BTN_UART, btn_uart_callback);
 80012ce:	4926      	ldr	r1, [pc, #152]	@ (8001368 <polling_thread+0xb4>)
 80012d0:	2001      	movs	r0, #1
 80012d2:	f7ff f9b5 	bl	8000640 <button_regcbf>

	while (1) {
		flags = osEventFlagsWait(polling_evt_id, 0xffff, osFlagsWaitAny, osWaitForever);
 80012d6:	4b25      	ldr	r3, [pc, #148]	@ (800136c <polling_thread+0xb8>)
 80012d8:	6818      	ldr	r0, [r3, #0]
 80012da:	f04f 33ff 	mov.w	r3, #4294967295
 80012de:	2200      	movs	r2, #0
 80012e0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80012e4:	f004 f97a 	bl	80055dc <osEventFlagsWait>
 80012e8:	60f8      	str	r0, [r7, #12]

		if (flags & 0x0001) {
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d00d      	beq.n	8001310 <polling_thread+0x5c>
			printf("\r\n%s[0x0001][%d]\r\n", __func__, __LINE__);
 80012f4:	222b      	movs	r2, #43	@ 0x2b
 80012f6:	491e      	ldr	r1, [pc, #120]	@ (8001370 <polling_thread+0xbc>)
 80012f8:	481e      	ldr	r0, [pc, #120]	@ (8001374 <polling_thread+0xc0>)
 80012fa:	f007 fa6b 	bl	80087d4 <iprintf>
			osEventFlagsSet(polling_evt_id, 0x0002);
 80012fe:	4b1b      	ldr	r3, [pc, #108]	@ (800136c <polling_thread+0xb8>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2102      	movs	r1, #2
 8001304:	4618      	mov	r0, r3
 8001306:	f004 f927 	bl	8005558 <osEventFlagsSet>
			button_proc_blue(NULL);
 800130a:	2000      	movs	r0, #0
 800130c:	f7ff f9b6 	bl	800067c <button_proc_blue>
		}

		if (flags & 0x0002) {
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d00a      	beq.n	8001330 <polling_thread+0x7c>
			printf("%s[0x0002][%d]\r\n", __func__, __LINE__);
 800131a:	2231      	movs	r2, #49	@ 0x31
 800131c:	4914      	ldr	r1, [pc, #80]	@ (8001370 <polling_thread+0xbc>)
 800131e:	4816      	ldr	r0, [pc, #88]	@ (8001378 <polling_thread+0xc4>)
 8001320:	f007 fa58 	bl	80087d4 <iprintf>
			osEventFlagsSet(polling_evt_id, 0x0004);
 8001324:	4b11      	ldr	r3, [pc, #68]	@ (800136c <polling_thread+0xb8>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2104      	movs	r1, #4
 800132a:	4618      	mov	r0, r3
 800132c:	f004 f914 	bl	8005558 <osEventFlagsSet>
		}

		if (flags & 0x0004) {
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f003 0304 	and.w	r3, r3, #4
 8001336:	2b00      	cmp	r3, #0
 8001338:	d004      	beq.n	8001344 <polling_thread+0x90>
			printf("%s[0x0004][%d]\r\n", __func__, __LINE__);
 800133a:	2236      	movs	r2, #54	@ 0x36
 800133c:	490c      	ldr	r1, [pc, #48]	@ (8001370 <polling_thread+0xbc>)
 800133e:	480f      	ldr	r0, [pc, #60]	@ (800137c <polling_thread+0xc8>)
 8001340:	f007 fa48 	bl	80087d4 <iprintf>
		}

		if (flags & 0x0008) {
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f003 0308 	and.w	r3, r3, #8
 800134a:	2b00      	cmp	r3, #0
 800134c:	d0c3      	beq.n	80012d6 <polling_thread+0x22>
			printf("%s[0x0008][%d]\r\n", __func__, __LINE__);
 800134e:	223a      	movs	r2, #58	@ 0x3a
 8001350:	4907      	ldr	r1, [pc, #28]	@ (8001370 <polling_thread+0xbc>)
 8001352:	480b      	ldr	r0, [pc, #44]	@ (8001380 <polling_thread+0xcc>)
 8001354:	f007 fa3e 	bl	80087d4 <iprintf>
			button_proc_uart(NULL);
 8001358:	2000      	movs	r0, #0
 800135a:	f7ff f9ab 	bl	80006b4 <button_proc_uart>
		flags = osEventFlagsWait(polling_evt_id, 0xffff, osFlagsWaitAny, osWaitForever);
 800135e:	e7ba      	b.n	80012d6 <polling_thread+0x22>
 8001360:	08009b10 	.word	0x08009b10
 8001364:	080013fd 	.word	0x080013fd
 8001368:	0800141d 	.word	0x0800141d
 800136c:	200009c4 	.word	0x200009c4
 8001370:	08009d00 	.word	0x08009d00
 8001374:	08009b2c 	.word	0x08009b2c
 8001378:	08009b40 	.word	0x08009b40
 800137c:	08009b54 	.word	0x08009b54
 8001380:	08009b68 	.word	0x08009b68

08001384 <polling_init>:
		}
	}
}

void polling_init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
	polling_evt_id = osEventFlagsNew(NULL);
 8001388:	2000      	movs	r0, #0
 800138a:	f004 f8a5 	bl	80054d8 <osEventFlagsNew>
 800138e:	4603      	mov	r3, r0
 8001390:	4a12      	ldr	r2, [pc, #72]	@ (80013dc <polling_init+0x58>)
 8001392:	6013      	str	r3, [r2, #0]
	if (polling_evt_id != NULL) printf("Polling Event Flags Created...\r\n");
 8001394:	4b11      	ldr	r3, [pc, #68]	@ (80013dc <polling_init+0x58>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d00f      	beq.n	80013bc <polling_init+0x38>
 800139c:	4810      	ldr	r0, [pc, #64]	@ (80013e0 <polling_init+0x5c>)
 800139e:	f007 fa89 	bl	80088b4 <puts>
	else {
		printf("Polling Event Flags Create File...\r\n");
		while (1);
	}

	polling_thread_hnd = osThreadNew(polling_thread, NULL, &polling_thread_attr);
 80013a2:	4a10      	ldr	r2, [pc, #64]	@ (80013e4 <polling_init+0x60>)
 80013a4:	2100      	movs	r1, #0
 80013a6:	4810      	ldr	r0, [pc, #64]	@ (80013e8 <polling_init+0x64>)
 80013a8:	f004 f804 	bl	80053b4 <osThreadNew>
 80013ac:	4603      	mov	r3, r0
 80013ae:	4a0f      	ldr	r2, [pc, #60]	@ (80013ec <polling_init+0x68>)
 80013b0:	6013      	str	r3, [r2, #0]
	if (polling_thread_hnd != NULL) printf("Polling Thread Created...\r\n");
 80013b2:	4b0e      	ldr	r3, [pc, #56]	@ (80013ec <polling_init+0x68>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d009      	beq.n	80013ce <polling_init+0x4a>
 80013ba:	e004      	b.n	80013c6 <polling_init+0x42>
		printf("Polling Event Flags Create File...\r\n");
 80013bc:	480c      	ldr	r0, [pc, #48]	@ (80013f0 <polling_init+0x6c>)
 80013be:	f007 fa79 	bl	80088b4 <puts>
		while (1);
 80013c2:	bf00      	nop
 80013c4:	e7fd      	b.n	80013c2 <polling_init+0x3e>
	if (polling_thread_hnd != NULL) printf("Polling Thread Created...\r\n");
 80013c6:	480b      	ldr	r0, [pc, #44]	@ (80013f4 <polling_init+0x70>)
 80013c8:	f007 fa74 	bl	80088b4 <puts>
	else {
		printf("Polling Thread Create Fail...\r\n");
		while (1);
	}
}
 80013cc:	e004      	b.n	80013d8 <polling_init+0x54>
		printf("Polling Thread Create Fail...\r\n");
 80013ce:	480a      	ldr	r0, [pc, #40]	@ (80013f8 <polling_init+0x74>)
 80013d0:	f007 fa70 	bl	80088b4 <puts>
		while (1);
 80013d4:	bf00      	nop
 80013d6:	e7fd      	b.n	80013d4 <polling_init+0x50>
}
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	200009c4 	.word	0x200009c4
 80013e0:	08009b7c 	.word	0x08009b7c
 80013e4:	08009cdc 	.word	0x08009cdc
 80013e8:	080012b5 	.word	0x080012b5
 80013ec:	200009c0 	.word	0x200009c0
 80013f0:	08009b9c 	.word	0x08009b9c
 80013f4:	08009bc0 	.word	0x08009bc0
 80013f8:	08009bdc 	.word	0x08009bdc

080013fc <btn_blue_callback>:

static void btn_blue_callback(void *arg)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]

//	if (arg == NULL) return;
//	p = (BUTTON_T *)arg;
//	gBtnBlue.edge = p->edge;
//	gBtnBlue.no = p->no;
	osEventFlagsSet(polling_evt_id, 0x0001);
 8001404:	4b04      	ldr	r3, [pc, #16]	@ (8001418 <btn_blue_callback+0x1c>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2101      	movs	r1, #1
 800140a:	4618      	mov	r0, r3
 800140c:	f004 f8a4 	bl	8005558 <osEventFlagsSet>
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	200009c4 	.word	0x200009c4

0800141c <btn_uart_callback>:

static void btn_uart_callback(void *arg)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
	osEventFlagsSet(polling_evt_id, 0x0008);
 8001424:	4b04      	ldr	r3, [pc, #16]	@ (8001438 <btn_uart_callback+0x1c>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2108      	movs	r1, #8
 800142a:	4618      	mov	r0, r3
 800142c:	f004 f894 	bl	8005558 <osEventFlagsSet>
}
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	200009c4 	.word	0x200009c4

0800143c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	4b12      	ldr	r3, [pc, #72]	@ (8001490 <HAL_MspInit+0x54>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144a:	4a11      	ldr	r2, [pc, #68]	@ (8001490 <HAL_MspInit+0x54>)
 800144c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001450:	6453      	str	r3, [r2, #68]	@ 0x44
 8001452:	4b0f      	ldr	r3, [pc, #60]	@ (8001490 <HAL_MspInit+0x54>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001456:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	603b      	str	r3, [r7, #0]
 8001462:	4b0b      	ldr	r3, [pc, #44]	@ (8001490 <HAL_MspInit+0x54>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001466:	4a0a      	ldr	r2, [pc, #40]	@ (8001490 <HAL_MspInit+0x54>)
 8001468:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800146c:	6413      	str	r3, [r2, #64]	@ 0x40
 800146e:	4b08      	ldr	r3, [pc, #32]	@ (8001490 <HAL_MspInit+0x54>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001476:	603b      	str	r3, [r7, #0]
 8001478:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800147a:	2200      	movs	r2, #0
 800147c:	210f      	movs	r1, #15
 800147e:	f06f 0001 	mvn.w	r0, #1
 8001482:	f000 fd5c 	bl	8001f3e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40023800 	.word	0x40023800

08001494 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08e      	sub	sp, #56	@ 0x38
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a55      	ldr	r2, [pc, #340]	@ (8001608 <HAL_ETH_MspInit+0x174>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	f040 80a4 	bne.w	8001600 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80014b8:	2300      	movs	r3, #0
 80014ba:	623b      	str	r3, [r7, #32]
 80014bc:	4b53      	ldr	r3, [pc, #332]	@ (800160c <HAL_ETH_MspInit+0x178>)
 80014be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c0:	4a52      	ldr	r2, [pc, #328]	@ (800160c <HAL_ETH_MspInit+0x178>)
 80014c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80014c8:	4b50      	ldr	r3, [pc, #320]	@ (800160c <HAL_ETH_MspInit+0x178>)
 80014ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014d0:	623b      	str	r3, [r7, #32]
 80014d2:	6a3b      	ldr	r3, [r7, #32]
 80014d4:	2300      	movs	r3, #0
 80014d6:	61fb      	str	r3, [r7, #28]
 80014d8:	4b4c      	ldr	r3, [pc, #304]	@ (800160c <HAL_ETH_MspInit+0x178>)
 80014da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014dc:	4a4b      	ldr	r2, [pc, #300]	@ (800160c <HAL_ETH_MspInit+0x178>)
 80014de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80014e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80014e4:	4b49      	ldr	r3, [pc, #292]	@ (800160c <HAL_ETH_MspInit+0x178>)
 80014e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80014ec:	61fb      	str	r3, [r7, #28]
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	2300      	movs	r3, #0
 80014f2:	61bb      	str	r3, [r7, #24]
 80014f4:	4b45      	ldr	r3, [pc, #276]	@ (800160c <HAL_ETH_MspInit+0x178>)
 80014f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f8:	4a44      	ldr	r2, [pc, #272]	@ (800160c <HAL_ETH_MspInit+0x178>)
 80014fa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80014fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001500:	4b42      	ldr	r3, [pc, #264]	@ (800160c <HAL_ETH_MspInit+0x178>)
 8001502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001504:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001508:	61bb      	str	r3, [r7, #24]
 800150a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	4b3e      	ldr	r3, [pc, #248]	@ (800160c <HAL_ETH_MspInit+0x178>)
 8001512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001514:	4a3d      	ldr	r2, [pc, #244]	@ (800160c <HAL_ETH_MspInit+0x178>)
 8001516:	f043 0304 	orr.w	r3, r3, #4
 800151a:	6313      	str	r3, [r2, #48]	@ 0x30
 800151c:	4b3b      	ldr	r3, [pc, #236]	@ (800160c <HAL_ETH_MspInit+0x178>)
 800151e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001520:	f003 0304 	and.w	r3, r3, #4
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001528:	2300      	movs	r3, #0
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	4b37      	ldr	r3, [pc, #220]	@ (800160c <HAL_ETH_MspInit+0x178>)
 800152e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001530:	4a36      	ldr	r2, [pc, #216]	@ (800160c <HAL_ETH_MspInit+0x178>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	6313      	str	r3, [r2, #48]	@ 0x30
 8001538:	4b34      	ldr	r3, [pc, #208]	@ (800160c <HAL_ETH_MspInit+0x178>)
 800153a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	613b      	str	r3, [r7, #16]
 8001542:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	4b30      	ldr	r3, [pc, #192]	@ (800160c <HAL_ETH_MspInit+0x178>)
 800154a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154c:	4a2f      	ldr	r2, [pc, #188]	@ (800160c <HAL_ETH_MspInit+0x178>)
 800154e:	f043 0302 	orr.w	r3, r3, #2
 8001552:	6313      	str	r3, [r2, #48]	@ 0x30
 8001554:	4b2d      	ldr	r3, [pc, #180]	@ (800160c <HAL_ETH_MspInit+0x178>)
 8001556:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001558:	f003 0302 	and.w	r3, r3, #2
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001560:	2300      	movs	r3, #0
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	4b29      	ldr	r3, [pc, #164]	@ (800160c <HAL_ETH_MspInit+0x178>)
 8001566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001568:	4a28      	ldr	r2, [pc, #160]	@ (800160c <HAL_ETH_MspInit+0x178>)
 800156a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800156e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001570:	4b26      	ldr	r3, [pc, #152]	@ (800160c <HAL_ETH_MspInit+0x178>)
 8001572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001578:	60bb      	str	r3, [r7, #8]
 800157a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800157c:	2332      	movs	r3, #50	@ 0x32
 800157e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001580:	2302      	movs	r3, #2
 8001582:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001588:	2303      	movs	r3, #3
 800158a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800158c:	230b      	movs	r3, #11
 800158e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001590:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001594:	4619      	mov	r1, r3
 8001596:	481e      	ldr	r0, [pc, #120]	@ (8001610 <HAL_ETH_MspInit+0x17c>)
 8001598:	f001 f8c2 	bl	8002720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800159c:	2386      	movs	r3, #134	@ 0x86
 800159e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	2302      	movs	r3, #2
 80015a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a8:	2303      	movs	r3, #3
 80015aa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015ac:	230b      	movs	r3, #11
 80015ae:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015b4:	4619      	mov	r1, r3
 80015b6:	4817      	ldr	r0, [pc, #92]	@ (8001614 <HAL_ETH_MspInit+0x180>)
 80015b8:	f001 f8b2 	bl	8002720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80015bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015c0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ca:	2303      	movs	r3, #3
 80015cc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015ce:	230b      	movs	r3, #11
 80015d0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80015d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015d6:	4619      	mov	r1, r3
 80015d8:	480f      	ldr	r0, [pc, #60]	@ (8001618 <HAL_ETH_MspInit+0x184>)
 80015da:	f001 f8a1 	bl	8002720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80015de:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80015e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e4:	2302      	movs	r3, #2
 80015e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ec:	2303      	movs	r3, #3
 80015ee:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80015f0:	230b      	movs	r3, #11
 80015f2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015f8:	4619      	mov	r1, r3
 80015fa:	4808      	ldr	r0, [pc, #32]	@ (800161c <HAL_ETH_MspInit+0x188>)
 80015fc:	f001 f890 	bl	8002720 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001600:	bf00      	nop
 8001602:	3738      	adds	r7, #56	@ 0x38
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	40028000 	.word	0x40028000
 800160c:	40023800 	.word	0x40023800
 8001610:	40020800 	.word	0x40020800
 8001614:	40020000 	.word	0x40020000
 8001618:	40020400 	.word	0x40020400
 800161c:	40021800 	.word	0x40021800

08001620 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08a      	sub	sp, #40	@ 0x28
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM3)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a19      	ldr	r2, [pc, #100]	@ (80016a4 <HAL_TIM_Base_MspInit+0x84>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d12b      	bne.n	800169a <HAL_TIM_Base_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	613b      	str	r3, [r7, #16]
 8001646:	4b18      	ldr	r3, [pc, #96]	@ (80016a8 <HAL_TIM_Base_MspInit+0x88>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164a:	4a17      	ldr	r2, [pc, #92]	@ (80016a8 <HAL_TIM_Base_MspInit+0x88>)
 800164c:	f043 0302 	orr.w	r3, r3, #2
 8001650:	6413      	str	r3, [r2, #64]	@ 0x40
 8001652:	4b15      	ldr	r3, [pc, #84]	@ (80016a8 <HAL_TIM_Base_MspInit+0x88>)
 8001654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	613b      	str	r3, [r7, #16]
 800165c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165e:	2300      	movs	r3, #0
 8001660:	60fb      	str	r3, [r7, #12]
 8001662:	4b11      	ldr	r3, [pc, #68]	@ (80016a8 <HAL_TIM_Base_MspInit+0x88>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001666:	4a10      	ldr	r2, [pc, #64]	@ (80016a8 <HAL_TIM_Base_MspInit+0x88>)
 8001668:	f043 0302 	orr.w	r3, r3, #2
 800166c:	6313      	str	r3, [r2, #48]	@ 0x30
 800166e:	4b0e      	ldr	r3, [pc, #56]	@ (80016a8 <HAL_TIM_Base_MspInit+0x88>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800167a:	2301      	movs	r3, #1
 800167c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800167e:	2302      	movs	r3, #2
 8001680:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001682:	2300      	movs	r3, #0
 8001684:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001686:	2300      	movs	r3, #0
 8001688:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800168a:	2302      	movs	r3, #2
 800168c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	4619      	mov	r1, r3
 8001694:	4805      	ldr	r0, [pc, #20]	@ (80016ac <HAL_TIM_Base_MspInit+0x8c>)
 8001696:	f001 f843 	bl	8002720 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800169a:	bf00      	nop
 800169c:	3728      	adds	r7, #40	@ 0x28
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40000400 	.word	0x40000400
 80016a8:	40023800 	.word	0x40023800
 80016ac:	40020400 	.word	0x40020400

080016b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08c      	sub	sp, #48	@ 0x30
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 031c 	add.w	r3, r7, #28
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a3a      	ldr	r2, [pc, #232]	@ (80017b8 <HAL_UART_MspInit+0x108>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d134      	bne.n	800173c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	61bb      	str	r3, [r7, #24]
 80016d6:	4b39      	ldr	r3, [pc, #228]	@ (80017bc <HAL_UART_MspInit+0x10c>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016da:	4a38      	ldr	r2, [pc, #224]	@ (80017bc <HAL_UART_MspInit+0x10c>)
 80016dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016e2:	4b36      	ldr	r3, [pc, #216]	@ (80017bc <HAL_UART_MspInit+0x10c>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ea:	61bb      	str	r3, [r7, #24]
 80016ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	617b      	str	r3, [r7, #20]
 80016f2:	4b32      	ldr	r3, [pc, #200]	@ (80017bc <HAL_UART_MspInit+0x10c>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	4a31      	ldr	r2, [pc, #196]	@ (80017bc <HAL_UART_MspInit+0x10c>)
 80016f8:	f043 0308 	orr.w	r3, r3, #8
 80016fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016fe:	4b2f      	ldr	r3, [pc, #188]	@ (80017bc <HAL_UART_MspInit+0x10c>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800170a:	2360      	movs	r3, #96	@ 0x60
 800170c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170e:	2302      	movs	r3, #2
 8001710:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001716:	2303      	movs	r3, #3
 8001718:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800171a:	2307      	movs	r3, #7
 800171c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800171e:	f107 031c 	add.w	r3, r7, #28
 8001722:	4619      	mov	r1, r3
 8001724:	4826      	ldr	r0, [pc, #152]	@ (80017c0 <HAL_UART_MspInit+0x110>)
 8001726:	f000 fffb 	bl	8002720 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800172a:	2200      	movs	r2, #0
 800172c:	2105      	movs	r1, #5
 800172e:	2026      	movs	r0, #38	@ 0x26
 8001730:	f000 fc05 	bl	8001f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001734:	2026      	movs	r0, #38	@ 0x26
 8001736:	f000 fc1e 	bl	8001f76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800173a:	e039      	b.n	80017b0 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART3)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a20      	ldr	r2, [pc, #128]	@ (80017c4 <HAL_UART_MspInit+0x114>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d134      	bne.n	80017b0 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001746:	2300      	movs	r3, #0
 8001748:	613b      	str	r3, [r7, #16]
 800174a:	4b1c      	ldr	r3, [pc, #112]	@ (80017bc <HAL_UART_MspInit+0x10c>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174e:	4a1b      	ldr	r2, [pc, #108]	@ (80017bc <HAL_UART_MspInit+0x10c>)
 8001750:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001754:	6413      	str	r3, [r2, #64]	@ 0x40
 8001756:	4b19      	ldr	r3, [pc, #100]	@ (80017bc <HAL_UART_MspInit+0x10c>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800175a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	4b15      	ldr	r3, [pc, #84]	@ (80017bc <HAL_UART_MspInit+0x10c>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	4a14      	ldr	r2, [pc, #80]	@ (80017bc <HAL_UART_MspInit+0x10c>)
 800176c:	f043 0308 	orr.w	r3, r3, #8
 8001770:	6313      	str	r3, [r2, #48]	@ 0x30
 8001772:	4b12      	ldr	r3, [pc, #72]	@ (80017bc <HAL_UART_MspInit+0x10c>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001776:	f003 0308 	and.w	r3, r3, #8
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800177e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001784:	2302      	movs	r3, #2
 8001786:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178c:	2303      	movs	r3, #3
 800178e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001790:	2307      	movs	r3, #7
 8001792:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001794:	f107 031c 	add.w	r3, r7, #28
 8001798:	4619      	mov	r1, r3
 800179a:	4809      	ldr	r0, [pc, #36]	@ (80017c0 <HAL_UART_MspInit+0x110>)
 800179c:	f000 ffc0 	bl	8002720 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80017a0:	2200      	movs	r2, #0
 80017a2:	2105      	movs	r1, #5
 80017a4:	2027      	movs	r0, #39	@ 0x27
 80017a6:	f000 fbca 	bl	8001f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80017aa:	2027      	movs	r0, #39	@ 0x27
 80017ac:	f000 fbe3 	bl	8001f76 <HAL_NVIC_EnableIRQ>
}
 80017b0:	bf00      	nop
 80017b2:	3730      	adds	r7, #48	@ 0x30
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	40004400 	.word	0x40004400
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40020c00 	.word	0x40020c00
 80017c4:	40004800 	.word	0x40004800

080017c8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08a      	sub	sp, #40	@ 0x28
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d0:	f107 0314 	add.w	r3, r7, #20
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
 80017de:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017e8:	d13f      	bne.n	800186a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ea:	2300      	movs	r3, #0
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	4b21      	ldr	r3, [pc, #132]	@ (8001874 <HAL_PCD_MspInit+0xac>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	4a20      	ldr	r2, [pc, #128]	@ (8001874 <HAL_PCD_MspInit+0xac>)
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001874 <HAL_PCD_MspInit+0xac>)
 80017fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	613b      	str	r3, [r7, #16]
 8001804:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001806:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800180a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180c:	2302      	movs	r3, #2
 800180e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001810:	2300      	movs	r3, #0
 8001812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001814:	2303      	movs	r3, #3
 8001816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001818:	230a      	movs	r3, #10
 800181a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	4619      	mov	r1, r3
 8001822:	4815      	ldr	r0, [pc, #84]	@ (8001878 <HAL_PCD_MspInit+0xb0>)
 8001824:	f000 ff7c 	bl	8002720 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001828:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800182c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800182e:	2300      	movs	r3, #0
 8001830:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001836:	f107 0314 	add.w	r3, r7, #20
 800183a:	4619      	mov	r1, r3
 800183c:	480e      	ldr	r0, [pc, #56]	@ (8001878 <HAL_PCD_MspInit+0xb0>)
 800183e:	f000 ff6f 	bl	8002720 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001842:	4b0c      	ldr	r3, [pc, #48]	@ (8001874 <HAL_PCD_MspInit+0xac>)
 8001844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001846:	4a0b      	ldr	r2, [pc, #44]	@ (8001874 <HAL_PCD_MspInit+0xac>)
 8001848:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800184c:	6353      	str	r3, [r2, #52]	@ 0x34
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	4b08      	ldr	r3, [pc, #32]	@ (8001874 <HAL_PCD_MspInit+0xac>)
 8001854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001856:	4a07      	ldr	r2, [pc, #28]	@ (8001874 <HAL_PCD_MspInit+0xac>)
 8001858:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800185c:	6453      	str	r3, [r2, #68]	@ 0x44
 800185e:	4b05      	ldr	r3, [pc, #20]	@ (8001874 <HAL_PCD_MspInit+0xac>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001862:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800186a:	bf00      	nop
 800186c:	3728      	adds	r7, #40	@ 0x28
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40023800 	.word	0x40023800
 8001878:	40020000 	.word	0x40020000

0800187c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001880:	bf00      	nop
 8001882:	e7fd      	b.n	8001880 <NMI_Handler+0x4>

08001884 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001888:	bf00      	nop
 800188a:	e7fd      	b.n	8001888 <HardFault_Handler+0x4>

0800188c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001890:	bf00      	nop
 8001892:	e7fd      	b.n	8001890 <MemManage_Handler+0x4>

08001894 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001898:	bf00      	nop
 800189a:	e7fd      	b.n	8001898 <BusFault_Handler+0x4>

0800189c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a0:	bf00      	nop
 80018a2:	e7fd      	b.n	80018a0 <UsageFault_Handler+0x4>

080018a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a8:	bf00      	nop
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b6:	f000 fa23 	bl	8001d00 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80018ba:	f005 fd91 	bl	80073e0 <xTaskGetSchedulerState>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d001      	beq.n	80018c8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80018c4:	f006 fbc0 	bl	8008048 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}

080018cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018d0:	4802      	ldr	r0, [pc, #8]	@ (80018dc <USART2_IRQHandler+0x10>)
 80018d2:	f002 fa9b 	bl	8003e0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000440 	.word	0x20000440

080018e0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80018e4:	4802      	ldr	r0, [pc, #8]	@ (80018f0 <USART3_IRQHandler+0x10>)
 80018e6:	f002 fa91 	bl	8003e0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000488 	.word	0x20000488

080018f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80018f8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80018fc:	f001 f8ee 	bl	8002adc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}

08001904 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  return 1;
 8001908:	2301      	movs	r3, #1
}
 800190a:	4618      	mov	r0, r3
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <_kill>:

int _kill(int pid, int sig)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800191e:	f007 f9bb 	bl	8008c98 <__errno>
 8001922:	4603      	mov	r3, r0
 8001924:	2216      	movs	r2, #22
 8001926:	601a      	str	r2, [r3, #0]
  return -1;
 8001928:	f04f 33ff 	mov.w	r3, #4294967295
}
 800192c:	4618      	mov	r0, r3
 800192e:	3708      	adds	r7, #8
 8001930:	46bd      	mov	sp, r7
 8001932:	bd80      	pop	{r7, pc}

08001934 <_exit>:

void _exit (int status)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800193c:	f04f 31ff 	mov.w	r1, #4294967295
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff ffe7 	bl	8001914 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001946:	bf00      	nop
 8001948:	e7fd      	b.n	8001946 <_exit+0x12>

0800194a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b086      	sub	sp, #24
 800194e:	af00      	add	r7, sp, #0
 8001950:	60f8      	str	r0, [r7, #12]
 8001952:	60b9      	str	r1, [r7, #8]
 8001954:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
 800195a:	e00a      	b.n	8001972 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800195c:	f3af 8000 	nop.w
 8001960:	4601      	mov	r1, r0
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	1c5a      	adds	r2, r3, #1
 8001966:	60ba      	str	r2, [r7, #8]
 8001968:	b2ca      	uxtb	r2, r1
 800196a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	3301      	adds	r3, #1
 8001970:	617b      	str	r3, [r7, #20]
 8001972:	697a      	ldr	r2, [r7, #20]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	429a      	cmp	r2, r3
 8001978:	dbf0      	blt.n	800195c <_read+0x12>
  }

  return len;
 800197a:	687b      	ldr	r3, [r7, #4]
}
 800197c:	4618      	mov	r0, r3
 800197e:	3718      	adds	r7, #24
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800198c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001990:	4618      	mov	r0, r3
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
 80019a4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019ac:	605a      	str	r2, [r3, #4]
  return 0;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <_isatty>:

int _isatty(int file)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019c4:	2301      	movs	r3, #1
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr

080019d2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019d2:	b480      	push	{r7}
 80019d4:	b085      	sub	sp, #20
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	60f8      	str	r0, [r7, #12]
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019de:	2300      	movs	r3, #0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019f4:	4a14      	ldr	r2, [pc, #80]	@ (8001a48 <_sbrk+0x5c>)
 80019f6:	4b15      	ldr	r3, [pc, #84]	@ (8001a4c <_sbrk+0x60>)
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a00:	4b13      	ldr	r3, [pc, #76]	@ (8001a50 <_sbrk+0x64>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d102      	bne.n	8001a0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a08:	4b11      	ldr	r3, [pc, #68]	@ (8001a50 <_sbrk+0x64>)
 8001a0a:	4a12      	ldr	r2, [pc, #72]	@ (8001a54 <_sbrk+0x68>)
 8001a0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a0e:	4b10      	ldr	r3, [pc, #64]	@ (8001a50 <_sbrk+0x64>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d207      	bcs.n	8001a2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a1c:	f007 f93c 	bl	8008c98 <__errno>
 8001a20:	4603      	mov	r3, r0
 8001a22:	220c      	movs	r2, #12
 8001a24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a26:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2a:	e009      	b.n	8001a40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a2c:	4b08      	ldr	r3, [pc, #32]	@ (8001a50 <_sbrk+0x64>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a32:	4b07      	ldr	r3, [pc, #28]	@ (8001a50 <_sbrk+0x64>)
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4413      	add	r3, r2
 8001a3a:	4a05      	ldr	r2, [pc, #20]	@ (8001a50 <_sbrk+0x64>)
 8001a3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20030000 	.word	0x20030000
 8001a4c:	00000400 	.word	0x00000400
 8001a50:	200009c8 	.word	0x200009c8
 8001a54:	20005650 	.word	0x20005650

08001a58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a5c:	4b06      	ldr	r3, [pc, #24]	@ (8001a78 <SystemInit+0x20>)
 8001a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a62:	4a05      	ldr	r2, [pc, #20]	@ (8001a78 <SystemInit+0x20>)
 8001a64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <uart_init>:
//static void (*uart_cbf[D_BUF_OBJ_MAX])(void *);
//typedef void (*UART_CBF)(void *);
static UART_CBF uart_cbf[D_BUF_OBJ_MAX];

void uart_init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
	for (int i=0; i<D_BUF_OBJ_MAX; i++) {
 8001a82:	2300      	movs	r3, #0
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	e014      	b.n	8001ab2 <uart_init+0x36>
		gBufObjs[i].idx = 0;
 8001a88:	4a12      	ldr	r2, [pc, #72]	@ (8001ad4 <uart_init+0x58>)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2167      	movs	r1, #103	@ 0x67
 8001a8e:	fb01 f303 	mul.w	r3, r1, r3
 8001a92:	4413      	add	r3, r2
 8001a94:	3365      	adds	r3, #101	@ 0x65
 8001a96:	2200      	movs	r2, #0
 8001a98:	701a      	strb	r2, [r3, #0]
		gBufObjs[i].flag = false;
 8001a9a:	4a0e      	ldr	r2, [pc, #56]	@ (8001ad4 <uart_init+0x58>)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2167      	movs	r1, #103	@ 0x67
 8001aa0:	fb01 f303 	mul.w	r3, r1, r3
 8001aa4:	4413      	add	r3, r2
 8001aa6:	3366      	adds	r3, #102	@ 0x66
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<D_BUF_OBJ_MAX; i++) {
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	607b      	str	r3, [r7, #4]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	dde7      	ble.n	8001a88 <uart_init+0xc>
	}

	// 인터럽트 방식 수신 시작 : 1바이트
	HAL_UART_Receive_IT(&huart2, (uint8_t *)&rxdata[E_UART_0], 1); // uart 2
 8001ab8:	2201      	movs	r2, #1
 8001aba:	4907      	ldr	r1, [pc, #28]	@ (8001ad8 <uart_init+0x5c>)
 8001abc:	4807      	ldr	r0, [pc, #28]	@ (8001adc <uart_init+0x60>)
 8001abe:	f002 f980 	bl	8003dc2 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart3, (uint8_t *)&rxdata[E_UART_1], 1);	// uart 3
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	4906      	ldr	r1, [pc, #24]	@ (8001ae0 <uart_init+0x64>)
 8001ac6:	4807      	ldr	r0, [pc, #28]	@ (8001ae4 <uart_init+0x68>)
 8001ac8:	f002 f97b 	bl	8003dc2 <HAL_UART_Receive_IT>
}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	200009d0 	.word	0x200009d0
 8001ad8:	200009cc 	.word	0x200009cc
 8001adc:	20000440 	.word	0x20000440
 8001ae0:	200009cd 	.word	0x200009cd
 8001ae4:	20000488 	.word	0x20000488

08001ae8 <uart_regcbf>:

bool uart_regcbf(uint8_t idx, UART_CBF cbf)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	6039      	str	r1, [r7, #0]
 8001af2:	71fb      	strb	r3, [r7, #7]
	if (idx > D_BUF_OBJ_MAX) return false;
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	2b03      	cmp	r3, #3
 8001af8:	d901      	bls.n	8001afe <uart_regcbf+0x16>
 8001afa:	2300      	movs	r3, #0
 8001afc:	e005      	b.n	8001b0a <uart_regcbf+0x22>
	uart_cbf[idx] = cbf;
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	4905      	ldr	r1, [pc, #20]	@ (8001b18 <uart_regcbf+0x30>)
 8001b02:	683a      	ldr	r2, [r7, #0]
 8001b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	return true;
 8001b08:	2301      	movs	r3, #1
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	20000b08 	.word	0x20000b08

08001b1c <HAL_UART_RxCpltCallback>:
//	}
//}

// 인터럽트 서비스 루틴 (ISR)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b084      	sub	sp, #16
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
	volatile uint8_t rxd;

	if (huart == &huart2) {	// idx = 0
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a31      	ldr	r2, [pc, #196]	@ (8001bec <HAL_UART_RxCpltCallback+0xd0>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d10f      	bne.n	8001b4c <HAL_UART_RxCpltCallback+0x30>
		rxd = rxdata[E_UART_0];
 8001b2c:	4b30      	ldr	r3, [pc, #192]	@ (8001bf0 <HAL_UART_RxCpltCallback+0xd4>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	72fb      	strb	r3, [r7, #11]
		HAL_UART_Receive_IT(huart, (uint8_t *)&rxdata[E_UART_0], 1);
 8001b32:	2201      	movs	r2, #1
 8001b34:	492e      	ldr	r1, [pc, #184]	@ (8001bf0 <HAL_UART_RxCpltCallback+0xd4>)
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f002 f943 	bl	8003dc2 <HAL_UART_Receive_IT>

		if (uart_cbf[0] != NULL) uart_cbf[E_UART_0]((void *)&gBufObjs[E_UART_0]);
 8001b3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001bf4 <HAL_UART_RxCpltCallback+0xd8>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d003      	beq.n	8001b4c <HAL_UART_RxCpltCallback+0x30>
 8001b44:	4b2b      	ldr	r3, [pc, #172]	@ (8001bf4 <HAL_UART_RxCpltCallback+0xd8>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	482b      	ldr	r0, [pc, #172]	@ (8001bf8 <HAL_UART_RxCpltCallback+0xdc>)
 8001b4a:	4798      	blx	r3
	}

	if (huart == &huart3) { // idx = 1
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a2b      	ldr	r2, [pc, #172]	@ (8001bfc <HAL_UART_RxCpltCallback+0xe0>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d146      	bne.n	8001be2 <HAL_UART_RxCpltCallback+0xc6>
		rxd = rxdata[E_UART_1];
 8001b54:	4b26      	ldr	r3, [pc, #152]	@ (8001bf0 <HAL_UART_RxCpltCallback+0xd4>)
 8001b56:	785b      	ldrb	r3, [r3, #1]
 8001b58:	72fb      	strb	r3, [r7, #11]
		HAL_UART_Receive_IT(huart, (uint8_t *)&rxdata[E_UART_1], 1);
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	4928      	ldr	r1, [pc, #160]	@ (8001c00 <HAL_UART_RxCpltCallback+0xe4>)
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f002 f92f 	bl	8003dc2 <HAL_UART_Receive_IT>

		BUF_T *p = (BUF_T *)&gBufObjs[E_UART_1];
 8001b64:	4b27      	ldr	r3, [pc, #156]	@ (8001c04 <HAL_UART_RxCpltCallback+0xe8>)
 8001b66:	60fb      	str	r3, [r7, #12]
		if (p->flag == false) {
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d137      	bne.n	8001be2 <HAL_UART_RxCpltCallback+0xc6>
			p->buf[p->idx] = rxd;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f893 3065 	ldrb.w	r3, [r3, #101]	@ 0x65
 8001b78:	461a      	mov	r2, r3
 8001b7a:	7afb      	ldrb	r3, [r7, #11]
 8001b7c:	b2d9      	uxtb	r1, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	5499      	strb	r1, [r3, r2]
			//p->idx++;
			//p->idx %= D_BUF_MAX;
			if (p->idx < D_BUF_MAX) p->idx++;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f893 3065 	ldrb.w	r3, [r3, #101]	@ 0x65
 8001b88:	2b63      	cmp	r3, #99	@ 0x63
 8001b8a:	d807      	bhi.n	8001b9c <HAL_UART_RxCpltCallback+0x80>
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f893 3065 	ldrb.w	r3, [r3, #101]	@ 0x65
 8001b92:	3301      	adds	r3, #1
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65

			if (rxd == '\r' || rxd == '\n') {
 8001b9c:	7afb      	ldrb	r3, [r7, #11]
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b0d      	cmp	r3, #13
 8001ba2:	d003      	beq.n	8001bac <HAL_UART_RxCpltCallback+0x90>
 8001ba4:	7afb      	ldrb	r3, [r7, #11]
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b0a      	cmp	r3, #10
 8001baa:	d11a      	bne.n	8001be2 <HAL_UART_RxCpltCallback+0xc6>
				p->buf[p->idx] = 0; //'\0';
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f893 3065 	ldrb.w	r3, [r3, #101]	@ 0x65
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	5499      	strb	r1, [r3, r2]
				p->flag = true;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
				if (uart_cbf[1] != NULL) uart_cbf[1]((void *)&gBufObjs[E_UART_1]);
 8001bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf4 <HAL_UART_RxCpltCallback+0xd8>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_UART_RxCpltCallback+0xb6>
 8001bca:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf4 <HAL_UART_RxCpltCallback+0xd8>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	480d      	ldr	r0, [pc, #52]	@ (8001c04 <HAL_UART_RxCpltCallback+0xe8>)
 8001bd0:	4798      	blx	r3
				p->idx = 0;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
				p->flag = false;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
			}
		}
	}
}
 8001be2:	bf00      	nop
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000440 	.word	0x20000440
 8001bf0:	200009cc 	.word	0x200009cc
 8001bf4:	20000b08 	.word	0x20000b08
 8001bf8:	200009d0 	.word	0x200009d0
 8001bfc:	20000488 	.word	0x20000488
 8001c00:	200009cd 	.word	0x200009cd
 8001c04:	20000a37 	.word	0x20000a37

08001c08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001c08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c40 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c0c:	f7ff ff24 	bl	8001a58 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c10:	480c      	ldr	r0, [pc, #48]	@ (8001c44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c12:	490d      	ldr	r1, [pc, #52]	@ (8001c48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c14:	4a0d      	ldr	r2, [pc, #52]	@ (8001c4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c18:	e002      	b.n	8001c20 <LoopCopyDataInit>

08001c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c1e:	3304      	adds	r3, #4

08001c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c24:	d3f9      	bcc.n	8001c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c26:	4a0a      	ldr	r2, [pc, #40]	@ (8001c50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c28:	4c0a      	ldr	r4, [pc, #40]	@ (8001c54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c2c:	e001      	b.n	8001c32 <LoopFillZerobss>

08001c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c30:	3204      	adds	r2, #4

08001c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c34:	d3fb      	bcc.n	8001c2e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001c36:	f007 f835 	bl	8008ca4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c3a:	f7ff f8c5 	bl	8000dc8 <main>
  bx  lr    
 8001c3e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001c40:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c48:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001c4c:	08009f1c 	.word	0x08009f1c
  ldr r2, =_sbss
 8001c50:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001c54:	2000564c 	.word	0x2000564c

08001c58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c58:	e7fe      	b.n	8001c58 <ADC_IRQHandler>
	...

08001c5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c60:	4b0e      	ldr	r3, [pc, #56]	@ (8001c9c <HAL_Init+0x40>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a0d      	ldr	r2, [pc, #52]	@ (8001c9c <HAL_Init+0x40>)
 8001c66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c9c <HAL_Init+0x40>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a0a      	ldr	r2, [pc, #40]	@ (8001c9c <HAL_Init+0x40>)
 8001c72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c78:	4b08      	ldr	r3, [pc, #32]	@ (8001c9c <HAL_Init+0x40>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a07      	ldr	r2, [pc, #28]	@ (8001c9c <HAL_Init+0x40>)
 8001c7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c84:	2003      	movs	r0, #3
 8001c86:	f000 f94f 	bl	8001f28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c8a:	200f      	movs	r0, #15
 8001c8c:	f000 f808 	bl	8001ca0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c90:	f7ff fbd4 	bl	800143c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40023c00 	.word	0x40023c00

08001ca0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ca8:	4b12      	ldr	r3, [pc, #72]	@ (8001cf4 <HAL_InitTick+0x54>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	4b12      	ldr	r3, [pc, #72]	@ (8001cf8 <HAL_InitTick+0x58>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f000 f967 	bl	8001f92 <HAL_SYSTICK_Config>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e00e      	b.n	8001cec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b0f      	cmp	r3, #15
 8001cd2:	d80a      	bhi.n	8001cea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cdc:	f000 f92f 	bl	8001f3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ce0:	4a06      	ldr	r2, [pc, #24]	@ (8001cfc <HAL_InitTick+0x5c>)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	e000      	b.n	8001cec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3708      	adds	r7, #8
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	20000000 	.word	0x20000000
 8001cf8:	20000008 	.word	0x20000008
 8001cfc:	20000004 	.word	0x20000004

08001d00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d04:	4b06      	ldr	r3, [pc, #24]	@ (8001d20 <HAL_IncTick+0x20>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	461a      	mov	r2, r3
 8001d0a:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <HAL_IncTick+0x24>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4413      	add	r3, r2
 8001d10:	4a04      	ldr	r2, [pc, #16]	@ (8001d24 <HAL_IncTick+0x24>)
 8001d12:	6013      	str	r3, [r2, #0]
}
 8001d14:	bf00      	nop
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	20000008 	.word	0x20000008
 8001d24:	20000b14 	.word	0x20000b14

08001d28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d2c:	4b03      	ldr	r3, [pc, #12]	@ (8001d3c <HAL_GetTick+0x14>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	20000b14 	.word	0x20000b14

08001d40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d48:	f7ff ffee 	bl	8001d28 <HAL_GetTick>
 8001d4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d58:	d005      	beq.n	8001d66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d84 <HAL_Delay+0x44>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	4413      	add	r3, r2
 8001d64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d66:	bf00      	nop
 8001d68:	f7ff ffde 	bl	8001d28 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d8f7      	bhi.n	8001d68 <HAL_Delay+0x28>
  {
  }
}
 8001d78:	bf00      	nop
 8001d7a:	bf00      	nop
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000008 	.word	0x20000008

08001d88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d98:	4b0c      	ldr	r3, [pc, #48]	@ (8001dcc <__NVIC_SetPriorityGrouping+0x44>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d9e:	68ba      	ldr	r2, [r7, #8]
 8001da0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001da4:	4013      	ands	r3, r2
 8001da6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001db0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001db4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001db8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dba:	4a04      	ldr	r2, [pc, #16]	@ (8001dcc <__NVIC_SetPriorityGrouping+0x44>)
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	60d3      	str	r3, [r2, #12]
}
 8001dc0:	bf00      	nop
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dd4:	4b04      	ldr	r3, [pc, #16]	@ (8001de8 <__NVIC_GetPriorityGrouping+0x18>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	0a1b      	lsrs	r3, r3, #8
 8001dda:	f003 0307 	and.w	r3, r3, #7
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4603      	mov	r3, r0
 8001df4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	db0b      	blt.n	8001e16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dfe:	79fb      	ldrb	r3, [r7, #7]
 8001e00:	f003 021f 	and.w	r2, r3, #31
 8001e04:	4907      	ldr	r1, [pc, #28]	@ (8001e24 <__NVIC_EnableIRQ+0x38>)
 8001e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0a:	095b      	lsrs	r3, r3, #5
 8001e0c:	2001      	movs	r0, #1
 8001e0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e16:	bf00      	nop
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	e000e100 	.word	0xe000e100

08001e28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	6039      	str	r1, [r7, #0]
 8001e32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	db0a      	blt.n	8001e52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	b2da      	uxtb	r2, r3
 8001e40:	490c      	ldr	r1, [pc, #48]	@ (8001e74 <__NVIC_SetPriority+0x4c>)
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	0112      	lsls	r2, r2, #4
 8001e48:	b2d2      	uxtb	r2, r2
 8001e4a:	440b      	add	r3, r1
 8001e4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e50:	e00a      	b.n	8001e68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	4908      	ldr	r1, [pc, #32]	@ (8001e78 <__NVIC_SetPriority+0x50>)
 8001e58:	79fb      	ldrb	r3, [r7, #7]
 8001e5a:	f003 030f 	and.w	r3, r3, #15
 8001e5e:	3b04      	subs	r3, #4
 8001e60:	0112      	lsls	r2, r2, #4
 8001e62:	b2d2      	uxtb	r2, r2
 8001e64:	440b      	add	r3, r1
 8001e66:	761a      	strb	r2, [r3, #24]
}
 8001e68:	bf00      	nop
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	e000e100 	.word	0xe000e100
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b089      	sub	sp, #36	@ 0x24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f003 0307 	and.w	r3, r3, #7
 8001e8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	f1c3 0307 	rsb	r3, r3, #7
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	bf28      	it	cs
 8001e9a:	2304      	movcs	r3, #4
 8001e9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	3304      	adds	r3, #4
 8001ea2:	2b06      	cmp	r3, #6
 8001ea4:	d902      	bls.n	8001eac <NVIC_EncodePriority+0x30>
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	3b03      	subs	r3, #3
 8001eaa:	e000      	b.n	8001eae <NVIC_EncodePriority+0x32>
 8001eac:	2300      	movs	r3, #0
 8001eae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	43da      	mvns	r2, r3
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	401a      	ands	r2, r3
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ec4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ece:	43d9      	mvns	r1, r3
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed4:	4313      	orrs	r3, r2
         );
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3724      	adds	r7, #36	@ 0x24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
	...

08001ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ef4:	d301      	bcc.n	8001efa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e00f      	b.n	8001f1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001efa:	4a0a      	ldr	r2, [pc, #40]	@ (8001f24 <SysTick_Config+0x40>)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f02:	210f      	movs	r1, #15
 8001f04:	f04f 30ff 	mov.w	r0, #4294967295
 8001f08:	f7ff ff8e 	bl	8001e28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f0c:	4b05      	ldr	r3, [pc, #20]	@ (8001f24 <SysTick_Config+0x40>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f12:	4b04      	ldr	r3, [pc, #16]	@ (8001f24 <SysTick_Config+0x40>)
 8001f14:	2207      	movs	r2, #7
 8001f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	e000e010 	.word	0xe000e010

08001f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7ff ff29 	bl	8001d88 <__NVIC_SetPriorityGrouping>
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b086      	sub	sp, #24
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	4603      	mov	r3, r0
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	607a      	str	r2, [r7, #4]
 8001f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f50:	f7ff ff3e 	bl	8001dd0 <__NVIC_GetPriorityGrouping>
 8001f54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	68b9      	ldr	r1, [r7, #8]
 8001f5a:	6978      	ldr	r0, [r7, #20]
 8001f5c:	f7ff ff8e 	bl	8001e7c <NVIC_EncodePriority>
 8001f60:	4602      	mov	r2, r0
 8001f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f66:	4611      	mov	r1, r2
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff ff5d 	bl	8001e28 <__NVIC_SetPriority>
}
 8001f6e:	bf00      	nop
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff ff31 	bl	8001dec <__NVIC_EnableIRQ>
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b082      	sub	sp, #8
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7ff ffa2 	bl	8001ee4 <SysTick_Config>
 8001fa0:	4603      	mov	r3, r0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b084      	sub	sp, #16
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fb6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001fb8:	f7ff feb6 	bl	8001d28 <HAL_GetTick>
 8001fbc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d008      	beq.n	8001fdc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2280      	movs	r2, #128	@ 0x80
 8001fce:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e052      	b.n	8002082 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 0216 	bic.w	r2, r2, #22
 8001fea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	695a      	ldr	r2, [r3, #20]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ffa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002000:	2b00      	cmp	r3, #0
 8002002:	d103      	bne.n	800200c <HAL_DMA_Abort+0x62>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002008:	2b00      	cmp	r3, #0
 800200a:	d007      	beq.n	800201c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0208 	bic.w	r2, r2, #8
 800201a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f022 0201 	bic.w	r2, r2, #1
 800202a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800202c:	e013      	b.n	8002056 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800202e:	f7ff fe7b 	bl	8001d28 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b05      	cmp	r3, #5
 800203a:	d90c      	bls.n	8002056 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2220      	movs	r2, #32
 8002040:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2203      	movs	r2, #3
 8002046:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e015      	b.n	8002082 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1e4      	bne.n	800202e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002068:	223f      	movs	r2, #63	@ 0x3f
 800206a:	409a      	lsls	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002080:	2300      	movs	r3, #0
}
 8002082:	4618      	mov	r0, r3
 8002084:	3710      	adds	r7, #16
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}

0800208a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800208a:	b480      	push	{r7}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b02      	cmp	r3, #2
 800209c:	d004      	beq.n	80020a8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2280      	movs	r2, #128	@ 0x80
 80020a2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e00c      	b.n	80020c2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2205      	movs	r2, #5
 80020ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f022 0201 	bic.w	r2, r2, #1
 80020be:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
	...

080020d0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e06c      	b.n	80021bc <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d106      	bne.n	80020fa <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2223      	movs	r2, #35	@ 0x23
 80020f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7ff f9cd 	bl	8001494 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	4b31      	ldr	r3, [pc, #196]	@ (80021c4 <HAL_ETH_Init+0xf4>)
 8002100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002102:	4a30      	ldr	r2, [pc, #192]	@ (80021c4 <HAL_ETH_Init+0xf4>)
 8002104:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002108:	6453      	str	r3, [r2, #68]	@ 0x44
 800210a:	4b2e      	ldr	r3, [pc, #184]	@ (80021c4 <HAL_ETH_Init+0xf4>)
 800210c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002112:	60bb      	str	r3, [r7, #8]
 8002114:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002116:	4b2c      	ldr	r3, [pc, #176]	@ (80021c8 <HAL_ETH_Init+0xf8>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	4a2b      	ldr	r2, [pc, #172]	@ (80021c8 <HAL_ETH_Init+0xf8>)
 800211c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002120:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002122:	4b29      	ldr	r3, [pc, #164]	@ (80021c8 <HAL_ETH_Init+0xf8>)
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	4927      	ldr	r1, [pc, #156]	@ (80021c8 <HAL_ETH_Init+0xf8>)
 800212c:	4313      	orrs	r3, r2
 800212e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002130:	4b25      	ldr	r3, [pc, #148]	@ (80021c8 <HAL_ETH_Init+0xf8>)
 8002132:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6812      	ldr	r2, [r2, #0]
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800214a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800214c:	f7ff fdec 	bl	8001d28 <HAL_GetTick>
 8002150:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002152:	e011      	b.n	8002178 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002154:	f7ff fde8 	bl	8001d28 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002162:	d909      	bls.n	8002178 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2204      	movs	r2, #4
 8002168:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	22e0      	movs	r2, #224	@ 0xe0
 8002170:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e021      	b.n	80021bc <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1e4      	bne.n	8002154 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f958 	bl	8002440 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f000 f9ff 	bl	8002594 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 fa55 	bl	8002646 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	461a      	mov	r2, r3
 80021a2:	2100      	movs	r1, #0
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 f9bd 	bl	8002524 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2210      	movs	r2, #16
 80021b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40023800 	.word	0x40023800
 80021c8:	40013800 	.word	0x40013800

080021cc <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	4b51      	ldr	r3, [pc, #324]	@ (8002328 <ETH_SetMACConfig+0x15c>)
 80021e2:	4013      	ands	r3, r2
 80021e4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	7c1b      	ldrb	r3, [r3, #16]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d102      	bne.n	80021f4 <ETH_SetMACConfig+0x28>
 80021ee:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80021f2:	e000      	b.n	80021f6 <ETH_SetMACConfig+0x2a>
 80021f4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	7c5b      	ldrb	r3, [r3, #17]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d102      	bne.n	8002204 <ETH_SetMACConfig+0x38>
 80021fe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002202:	e000      	b.n	8002206 <ETH_SetMACConfig+0x3a>
 8002204:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002206:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800220c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	7fdb      	ldrb	r3, [r3, #31]
 8002212:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002214:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800221a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	7f92      	ldrb	r2, [r2, #30]
 8002220:	2a00      	cmp	r2, #0
 8002222:	d102      	bne.n	800222a <ETH_SetMACConfig+0x5e>
 8002224:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002228:	e000      	b.n	800222c <ETH_SetMACConfig+0x60>
 800222a:	2200      	movs	r2, #0
                        macconf->Speed |
 800222c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	7f1b      	ldrb	r3, [r3, #28]
 8002232:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002234:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800223a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	791b      	ldrb	r3, [r3, #4]
 8002240:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002242:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	f892 2020 	ldrb.w	r2, [r2, #32]
 800224a:	2a00      	cmp	r2, #0
 800224c:	d102      	bne.n	8002254 <ETH_SetMACConfig+0x88>
 800224e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002252:	e000      	b.n	8002256 <ETH_SetMACConfig+0x8a>
 8002254:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002256:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	7bdb      	ldrb	r3, [r3, #15]
 800225c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800225e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002264:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800226c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800226e:	4313      	orrs	r3, r2
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	4313      	orrs	r3, r2
 8002274:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002286:	2001      	movs	r0, #1
 8002288:	f7ff fd5a 	bl	8001d40 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68fa      	ldr	r2, [r7, #12]
 8002292:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80022a2:	4013      	ands	r3, r2
 80022a4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022aa:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80022b2:	2a00      	cmp	r2, #0
 80022b4:	d101      	bne.n	80022ba <ETH_SetMACConfig+0xee>
 80022b6:	2280      	movs	r2, #128	@ 0x80
 80022b8:	e000      	b.n	80022bc <ETH_SetMACConfig+0xf0>
 80022ba:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80022bc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80022c2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80022ca:	2a01      	cmp	r2, #1
 80022cc:	d101      	bne.n	80022d2 <ETH_SetMACConfig+0x106>
 80022ce:	2208      	movs	r2, #8
 80022d0:	e000      	b.n	80022d4 <ETH_SetMACConfig+0x108>
 80022d2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80022d4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80022dc:	2a01      	cmp	r2, #1
 80022de:	d101      	bne.n	80022e4 <ETH_SetMACConfig+0x118>
 80022e0:	2204      	movs	r2, #4
 80022e2:	e000      	b.n	80022e6 <ETH_SetMACConfig+0x11a>
 80022e4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80022e6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80022ee:	2a01      	cmp	r2, #1
 80022f0:	d101      	bne.n	80022f6 <ETH_SetMACConfig+0x12a>
 80022f2:	2202      	movs	r2, #2
 80022f4:	e000      	b.n	80022f8 <ETH_SetMACConfig+0x12c>
 80022f6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80022f8:	4313      	orrs	r3, r2
 80022fa:	68fa      	ldr	r2, [r7, #12]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002310:	2001      	movs	r0, #1
 8002312:	f7ff fd15 	bl	8001d40 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	619a      	str	r2, [r3, #24]
}
 800231e:	bf00      	nop
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	ff20810f 	.word	0xff20810f

0800232c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	4b3d      	ldr	r3, [pc, #244]	@ (800243c <ETH_SetDMAConfig+0x110>)
 8002346:	4013      	ands	r3, r2
 8002348:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	7b1b      	ldrb	r3, [r3, #12]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d102      	bne.n	8002358 <ETH_SetDMAConfig+0x2c>
 8002352:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002356:	e000      	b.n	800235a <ETH_SetDMAConfig+0x2e>
 8002358:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	7b5b      	ldrb	r3, [r3, #13]
 800235e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002360:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	7f52      	ldrb	r2, [r2, #29]
 8002366:	2a00      	cmp	r2, #0
 8002368:	d102      	bne.n	8002370 <ETH_SetDMAConfig+0x44>
 800236a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800236e:	e000      	b.n	8002372 <ETH_SetDMAConfig+0x46>
 8002370:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002372:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	7b9b      	ldrb	r3, [r3, #14]
 8002378:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800237a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002380:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	7f1b      	ldrb	r3, [r3, #28]
 8002386:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002388:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	7f9b      	ldrb	r3, [r3, #30]
 800238e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002390:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002396:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800239e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80023a0:	4313      	orrs	r3, r2
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023b0:	461a      	mov	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80023c2:	2001      	movs	r0, #1
 80023c4:	f7ff fcbc 	bl	8001d40 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023d0:	461a      	mov	r2, r3
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	791b      	ldrb	r3, [r3, #4]
 80023da:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80023e0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80023e6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80023ec:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80023f4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80023f6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023fc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80023fe:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002404:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	6812      	ldr	r2, [r2, #0]
 800240a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800240e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002412:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002420:	2001      	movs	r0, #1
 8002422:	f7ff fc8d 	bl	8001d40 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800242e:	461a      	mov	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6013      	str	r3, [r2, #0]
}
 8002434:	bf00      	nop
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	f8de3f23 	.word	0xf8de3f23

08002440 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b0a6      	sub	sp, #152	@ 0x98
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002448:	2301      	movs	r3, #1
 800244a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800244e:	2301      	movs	r3, #1
 8002450:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002454:	2300      	movs	r3, #0
 8002456:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002458:	2300      	movs	r3, #0
 800245a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800245e:	2301      	movs	r3, #1
 8002460:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002464:	2300      	movs	r3, #0
 8002466:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800246a:	2301      	movs	r3, #1
 800246c:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002470:	2300      	movs	r3, #0
 8002472:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002476:	2300      	movs	r3, #0
 8002478:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800247c:	2300      	movs	r3, #0
 800247e:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002480:	2300      	movs	r3, #0
 8002482:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002486:	2300      	movs	r3, #0
 8002488:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800248a:	2300      	movs	r3, #0
 800248c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002490:	2300      	movs	r3, #0
 8002492:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002496:	2300      	movs	r3, #0
 8002498:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800249c:	2300      	movs	r3, #0
 800249e:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80024a2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80024a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80024a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80024ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80024ae:	2300      	movs	r3, #0
 80024b0:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80024b4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80024b8:	4619      	mov	r1, r3
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f7ff fe86 	bl	80021cc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80024c0:	2301      	movs	r3, #1
 80024c2:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80024c4:	2301      	movs	r3, #1
 80024c6:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80024c8:	2301      	movs	r3, #1
 80024ca:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80024ce:	2301      	movs	r3, #1
 80024d0:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80024d6:	2300      	movs	r3, #0
 80024d8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80024dc:	2300      	movs	r3, #0
 80024de:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80024e2:	2300      	movs	r3, #0
 80024e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80024e6:	2301      	movs	r3, #1
 80024e8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80024ec:	2301      	movs	r3, #1
 80024ee:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80024f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80024f4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80024f6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80024fa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80024fc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002500:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002502:	2301      	movs	r3, #1
 8002504:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002508:	2300      	movs	r3, #0
 800250a:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800250c:	2300      	movs	r3, #0
 800250e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002510:	f107 0308 	add.w	r3, r7, #8
 8002514:	4619      	mov	r1, r3
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7ff ff08 	bl	800232c <ETH_SetDMAConfig>
}
 800251c:	bf00      	nop
 800251e:	3798      	adds	r7, #152	@ 0x98
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002524:	b480      	push	{r7}
 8002526:	b087      	sub	sp, #28
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3305      	adds	r3, #5
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	021b      	lsls	r3, r3, #8
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	3204      	adds	r2, #4
 800253c:	7812      	ldrb	r2, [r2, #0]
 800253e:	4313      	orrs	r3, r2
 8002540:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	4b11      	ldr	r3, [pc, #68]	@ (800258c <ETH_MACAddressConfig+0x68>)
 8002546:	4413      	add	r3, r2
 8002548:	461a      	mov	r2, r3
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	3303      	adds	r3, #3
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	061a      	lsls	r2, r3, #24
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3302      	adds	r3, #2
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	041b      	lsls	r3, r3, #16
 800255e:	431a      	orrs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3301      	adds	r3, #1
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	021b      	lsls	r3, r3, #8
 8002568:	4313      	orrs	r3, r2
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	7812      	ldrb	r2, [r2, #0]
 800256e:	4313      	orrs	r3, r2
 8002570:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	4b06      	ldr	r3, [pc, #24]	@ (8002590 <ETH_MACAddressConfig+0x6c>)
 8002576:	4413      	add	r3, r2
 8002578:	461a      	mov	r2, r3
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	6013      	str	r3, [r2, #0]
}
 800257e:	bf00      	nop
 8002580:	371c      	adds	r7, #28
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	40028040 	.word	0x40028040
 8002590:	40028044 	.word	0x40028044

08002594 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800259c:	2300      	movs	r3, #0
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	e03e      	b.n	8002620 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68d9      	ldr	r1, [r3, #12]
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	4613      	mov	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	00db      	lsls	r3, r3, #3
 80025b0:	440b      	add	r3, r1
 80025b2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	2200      	movs	r2, #0
 80025b8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2200      	movs	r2, #0
 80025be:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	2200      	movs	r2, #0
 80025c4:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	2200      	movs	r2, #0
 80025ca:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80025cc:	68b9      	ldr	r1, [r7, #8]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68fa      	ldr	r2, [r7, #12]
 80025d2:	3206      	adds	r2, #6
 80025d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d80c      	bhi.n	8002604 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	68d9      	ldr	r1, [r3, #12]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	1c5a      	adds	r2, r3, #1
 80025f2:	4613      	mov	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	440b      	add	r3, r1
 80025fc:	461a      	mov	r2, r3
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	60da      	str	r2, [r3, #12]
 8002602:	e004      	b.n	800260e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	461a      	mov	r2, r3
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	3301      	adds	r3, #1
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2b03      	cmp	r3, #3
 8002624:	d9bd      	bls.n	80025a2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68da      	ldr	r2, [r3, #12]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002638:	611a      	str	r2, [r3, #16]
}
 800263a:	bf00      	nop
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002646:	b480      	push	{r7}
 8002648:	b085      	sub	sp, #20
 800264a:	af00      	add	r7, sp, #0
 800264c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800264e:	2300      	movs	r3, #0
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	e046      	b.n	80026e2 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6919      	ldr	r1, [r3, #16]
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	4613      	mov	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	00db      	lsls	r3, r3, #3
 8002662:	440b      	add	r3, r1
 8002664:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	2200      	movs	r2, #0
 8002670:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	2200      	movs	r2, #0
 8002676:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2200      	movs	r2, #0
 800267c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	2200      	movs	r2, #0
 8002682:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	2200      	movs	r2, #0
 8002688:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002690:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	f244 52f4 	movw	r2, #17908	@ 0x45f4
 8002698:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80026a6:	68b9      	ldr	r1, [r7, #8]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	3212      	adds	r2, #18
 80026ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d80c      	bhi.n	80026d2 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6919      	ldr	r1, [r3, #16]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	1c5a      	adds	r2, r3, #1
 80026c0:	4613      	mov	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	440b      	add	r3, r1
 80026ca:	461a      	mov	r2, r3
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	60da      	str	r2, [r3, #12]
 80026d0:	e004      	b.n	80026dc <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	461a      	mov	r2, r3
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	3301      	adds	r3, #1
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	2b03      	cmp	r3, #3
 80026e6:	d9b5      	bls.n	8002654 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691a      	ldr	r2, [r3, #16]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002712:	60da      	str	r2, [r3, #12]
}
 8002714:	bf00      	nop
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002720:	b480      	push	{r7}
 8002722:	b089      	sub	sp, #36	@ 0x24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800272a:	2300      	movs	r3, #0
 800272c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800272e:	2300      	movs	r3, #0
 8002730:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002732:	2300      	movs	r3, #0
 8002734:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
 800273a:	e177      	b.n	8002a2c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800273c:	2201      	movs	r2, #1
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	4013      	ands	r3, r2
 800274e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	429a      	cmp	r2, r3
 8002756:	f040 8166 	bne.w	8002a26 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	2b01      	cmp	r3, #1
 8002764:	d005      	beq.n	8002772 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800276e:	2b02      	cmp	r3, #2
 8002770:	d130      	bne.n	80027d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	2203      	movs	r2, #3
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	43db      	mvns	r3, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4013      	ands	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	68da      	ldr	r2, [r3, #12]
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4313      	orrs	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027a8:	2201      	movs	r2, #1
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	43db      	mvns	r3, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4013      	ands	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	091b      	lsrs	r3, r3, #4
 80027be:	f003 0201 	and.w	r2, r3, #1
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 0303 	and.w	r3, r3, #3
 80027dc:	2b03      	cmp	r3, #3
 80027de:	d017      	beq.n	8002810 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	2203      	movs	r2, #3
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4313      	orrs	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 0303 	and.w	r3, r3, #3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d123      	bne.n	8002864 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	08da      	lsrs	r2, r3, #3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3208      	adds	r2, #8
 8002824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002828:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	220f      	movs	r2, #15
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	691a      	ldr	r2, [r3, #16]
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	08da      	lsrs	r2, r3, #3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3208      	adds	r2, #8
 800285e:	69b9      	ldr	r1, [r7, #24]
 8002860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	2203      	movs	r2, #3
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	43db      	mvns	r3, r3
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4013      	ands	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 0203 	and.w	r2, r3, #3
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 80c0 	beq.w	8002a26 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	4b66      	ldr	r3, [pc, #408]	@ (8002a44 <HAL_GPIO_Init+0x324>)
 80028ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ae:	4a65      	ldr	r2, [pc, #404]	@ (8002a44 <HAL_GPIO_Init+0x324>)
 80028b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80028b6:	4b63      	ldr	r3, [pc, #396]	@ (8002a44 <HAL_GPIO_Init+0x324>)
 80028b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028c2:	4a61      	ldr	r2, [pc, #388]	@ (8002a48 <HAL_GPIO_Init+0x328>)
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	089b      	lsrs	r3, r3, #2
 80028c8:	3302      	adds	r3, #2
 80028ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	220f      	movs	r2, #15
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43db      	mvns	r3, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4013      	ands	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a58      	ldr	r2, [pc, #352]	@ (8002a4c <HAL_GPIO_Init+0x32c>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d037      	beq.n	800295e <HAL_GPIO_Init+0x23e>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a57      	ldr	r2, [pc, #348]	@ (8002a50 <HAL_GPIO_Init+0x330>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d031      	beq.n	800295a <HAL_GPIO_Init+0x23a>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a56      	ldr	r2, [pc, #344]	@ (8002a54 <HAL_GPIO_Init+0x334>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d02b      	beq.n	8002956 <HAL_GPIO_Init+0x236>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a55      	ldr	r2, [pc, #340]	@ (8002a58 <HAL_GPIO_Init+0x338>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d025      	beq.n	8002952 <HAL_GPIO_Init+0x232>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a54      	ldr	r2, [pc, #336]	@ (8002a5c <HAL_GPIO_Init+0x33c>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d01f      	beq.n	800294e <HAL_GPIO_Init+0x22e>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a53      	ldr	r2, [pc, #332]	@ (8002a60 <HAL_GPIO_Init+0x340>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d019      	beq.n	800294a <HAL_GPIO_Init+0x22a>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a52      	ldr	r2, [pc, #328]	@ (8002a64 <HAL_GPIO_Init+0x344>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d013      	beq.n	8002946 <HAL_GPIO_Init+0x226>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a51      	ldr	r2, [pc, #324]	@ (8002a68 <HAL_GPIO_Init+0x348>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d00d      	beq.n	8002942 <HAL_GPIO_Init+0x222>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a50      	ldr	r2, [pc, #320]	@ (8002a6c <HAL_GPIO_Init+0x34c>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d007      	beq.n	800293e <HAL_GPIO_Init+0x21e>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a4f      	ldr	r2, [pc, #316]	@ (8002a70 <HAL_GPIO_Init+0x350>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d101      	bne.n	800293a <HAL_GPIO_Init+0x21a>
 8002936:	2309      	movs	r3, #9
 8002938:	e012      	b.n	8002960 <HAL_GPIO_Init+0x240>
 800293a:	230a      	movs	r3, #10
 800293c:	e010      	b.n	8002960 <HAL_GPIO_Init+0x240>
 800293e:	2308      	movs	r3, #8
 8002940:	e00e      	b.n	8002960 <HAL_GPIO_Init+0x240>
 8002942:	2307      	movs	r3, #7
 8002944:	e00c      	b.n	8002960 <HAL_GPIO_Init+0x240>
 8002946:	2306      	movs	r3, #6
 8002948:	e00a      	b.n	8002960 <HAL_GPIO_Init+0x240>
 800294a:	2305      	movs	r3, #5
 800294c:	e008      	b.n	8002960 <HAL_GPIO_Init+0x240>
 800294e:	2304      	movs	r3, #4
 8002950:	e006      	b.n	8002960 <HAL_GPIO_Init+0x240>
 8002952:	2303      	movs	r3, #3
 8002954:	e004      	b.n	8002960 <HAL_GPIO_Init+0x240>
 8002956:	2302      	movs	r3, #2
 8002958:	e002      	b.n	8002960 <HAL_GPIO_Init+0x240>
 800295a:	2301      	movs	r3, #1
 800295c:	e000      	b.n	8002960 <HAL_GPIO_Init+0x240>
 800295e:	2300      	movs	r3, #0
 8002960:	69fa      	ldr	r2, [r7, #28]
 8002962:	f002 0203 	and.w	r2, r2, #3
 8002966:	0092      	lsls	r2, r2, #2
 8002968:	4093      	lsls	r3, r2
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4313      	orrs	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002970:	4935      	ldr	r1, [pc, #212]	@ (8002a48 <HAL_GPIO_Init+0x328>)
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	089b      	lsrs	r3, r3, #2
 8002976:	3302      	adds	r3, #2
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800297e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a74 <HAL_GPIO_Init+0x354>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	43db      	mvns	r3, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4013      	ands	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4313      	orrs	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029a2:	4a34      	ldr	r2, [pc, #208]	@ (8002a74 <HAL_GPIO_Init+0x354>)
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029a8:	4b32      	ldr	r3, [pc, #200]	@ (8002a74 <HAL_GPIO_Init+0x354>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029cc:	4a29      	ldr	r2, [pc, #164]	@ (8002a74 <HAL_GPIO_Init+0x354>)
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029d2:	4b28      	ldr	r3, [pc, #160]	@ (8002a74 <HAL_GPIO_Init+0x354>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	43db      	mvns	r3, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4013      	ands	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029f6:	4a1f      	ldr	r2, [pc, #124]	@ (8002a74 <HAL_GPIO_Init+0x354>)
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002a74 <HAL_GPIO_Init+0x354>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	43db      	mvns	r3, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a20:	4a14      	ldr	r2, [pc, #80]	@ (8002a74 <HAL_GPIO_Init+0x354>)
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	61fb      	str	r3, [r7, #28]
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	2b0f      	cmp	r3, #15
 8002a30:	f67f ae84 	bls.w	800273c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a34:	bf00      	nop
 8002a36:	bf00      	nop
 8002a38:	3724      	adds	r7, #36	@ 0x24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	40023800 	.word	0x40023800
 8002a48:	40013800 	.word	0x40013800
 8002a4c:	40020000 	.word	0x40020000
 8002a50:	40020400 	.word	0x40020400
 8002a54:	40020800 	.word	0x40020800
 8002a58:	40020c00 	.word	0x40020c00
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	40021400 	.word	0x40021400
 8002a64:	40021800 	.word	0x40021800
 8002a68:	40021c00 	.word	0x40021c00
 8002a6c:	40022000 	.word	0x40022000
 8002a70:	40022400 	.word	0x40022400
 8002a74:	40013c00 	.word	0x40013c00

08002a78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	460b      	mov	r3, r1
 8002a82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	691a      	ldr	r2, [r3, #16]
 8002a88:	887b      	ldrh	r3, [r7, #2]
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d002      	beq.n	8002a96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a90:	2301      	movs	r3, #1
 8002a92:	73fb      	strb	r3, [r7, #15]
 8002a94:	e001      	b.n	8002a9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a96:	2300      	movs	r3, #0
 8002a98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3714      	adds	r7, #20
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	807b      	strh	r3, [r7, #2]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ab8:	787b      	ldrb	r3, [r7, #1]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002abe:	887a      	ldrh	r2, [r7, #2]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ac4:	e003      	b.n	8002ace <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ac6:	887b      	ldrh	r3, [r7, #2]
 8002ac8:	041a      	lsls	r2, r3, #16
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	619a      	str	r2, [r3, #24]
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
	...

08002adc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002ae6:	4b08      	ldr	r3, [pc, #32]	@ (8002b08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ae8:	695a      	ldr	r2, [r3, #20]
 8002aea:	88fb      	ldrh	r3, [r7, #6]
 8002aec:	4013      	ands	r3, r2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d006      	beq.n	8002b00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002af2:	4a05      	ldr	r2, [pc, #20]	@ (8002b08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002af4:	88fb      	ldrh	r3, [r7, #6]
 8002af6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002af8:	88fb      	ldrh	r3, [r7, #6]
 8002afa:	4618      	mov	r0, r3
 8002afc:	f7fe f8f6 	bl	8000cec <HAL_GPIO_EXTI_Callback>
  }
}
 8002b00:	bf00      	nop
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	40013c00 	.word	0x40013c00

08002b0c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af02      	add	r7, sp, #8
 8002b12:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e101      	b.n	8002d22 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d106      	bne.n	8002b3e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f7fe fe45 	bl	80017c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2203      	movs	r2, #3
 8002b42:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b4c:	d102      	bne.n	8002b54 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f002 f911 	bl	8004d80 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6818      	ldr	r0, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	7c1a      	ldrb	r2, [r3, #16]
 8002b66:	f88d 2000 	strb.w	r2, [sp]
 8002b6a:	3304      	adds	r3, #4
 8002b6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b6e:	f002 f8a3 	bl	8004cb8 <USB_CoreInit>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2202      	movs	r2, #2
 8002b7c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e0ce      	b.n	8002d22 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2100      	movs	r1, #0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f002 f909 	bl	8004da2 <USB_SetCurrentMode>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d005      	beq.n	8002ba2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2202      	movs	r2, #2
 8002b9a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e0bf      	b.n	8002d22 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	73fb      	strb	r3, [r7, #15]
 8002ba6:	e04a      	b.n	8002c3e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002ba8:	7bfa      	ldrb	r2, [r7, #15]
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	4613      	mov	r3, r2
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	4413      	add	r3, r2
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	440b      	add	r3, r1
 8002bb6:	3315      	adds	r3, #21
 8002bb8:	2201      	movs	r2, #1
 8002bba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bbc:	7bfa      	ldrb	r2, [r7, #15]
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	3314      	adds	r3, #20
 8002bcc:	7bfa      	ldrb	r2, [r7, #15]
 8002bce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002bd0:	7bfa      	ldrb	r2, [r7, #15]
 8002bd2:	7bfb      	ldrb	r3, [r7, #15]
 8002bd4:	b298      	uxth	r0, r3
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	4413      	add	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	332e      	adds	r3, #46	@ 0x2e
 8002be4:	4602      	mov	r2, r0
 8002be6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002be8:	7bfa      	ldrb	r2, [r7, #15]
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	4613      	mov	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	3318      	adds	r3, #24
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002bfc:	7bfa      	ldrb	r2, [r7, #15]
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	4613      	mov	r3, r2
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	4413      	add	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	440b      	add	r3, r1
 8002c0a:	331c      	adds	r3, #28
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c10:	7bfa      	ldrb	r2, [r7, #15]
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	4613      	mov	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	4413      	add	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	3320      	adds	r3, #32
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c24:	7bfa      	ldrb	r2, [r7, #15]
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	3324      	adds	r3, #36	@ 0x24
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	73fb      	strb	r3, [r7, #15]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	791b      	ldrb	r3, [r3, #4]
 8002c42:	7bfa      	ldrb	r2, [r7, #15]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d3af      	bcc.n	8002ba8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c48:	2300      	movs	r3, #0
 8002c4a:	73fb      	strb	r3, [r7, #15]
 8002c4c:	e044      	b.n	8002cd8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c4e:	7bfa      	ldrb	r2, [r7, #15]
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	4613      	mov	r3, r2
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	4413      	add	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	440b      	add	r3, r1
 8002c5c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002c60:	2200      	movs	r2, #0
 8002c62:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c64:	7bfa      	ldrb	r2, [r7, #15]
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	4413      	add	r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002c76:	7bfa      	ldrb	r2, [r7, #15]
 8002c78:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c7a:	7bfa      	ldrb	r2, [r7, #15]
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	4413      	add	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	440b      	add	r3, r1
 8002c88:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c90:	7bfa      	ldrb	r2, [r7, #15]
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	4613      	mov	r3, r2
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	4413      	add	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ca6:	7bfa      	ldrb	r2, [r7, #15]
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	4613      	mov	r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	4413      	add	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002cb8:	2200      	movs	r2, #0
 8002cba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cbc:	7bfa      	ldrb	r2, [r7, #15]
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	00db      	lsls	r3, r3, #3
 8002cc4:	4413      	add	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cd2:	7bfb      	ldrb	r3, [r7, #15]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	73fb      	strb	r3, [r7, #15]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	791b      	ldrb	r3, [r3, #4]
 8002cdc:	7bfa      	ldrb	r2, [r7, #15]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d3b5      	bcc.n	8002c4e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6818      	ldr	r0, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	7c1a      	ldrb	r2, [r3, #16]
 8002cea:	f88d 2000 	strb.w	r2, [sp]
 8002cee:	3304      	adds	r3, #4
 8002cf0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cf2:	f002 f8a3 	bl	8004e3c <USB_DevInit>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d005      	beq.n	8002d08 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2202      	movs	r2, #2
 8002d00:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e00c      	b.n	8002d22 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f002 fa6b 	bl	80051f6 <USB_DevDisconnect>

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
	...

08002d2c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e267      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d075      	beq.n	8002e36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d4a:	4b88      	ldr	r3, [pc, #544]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 030c 	and.w	r3, r3, #12
 8002d52:	2b04      	cmp	r3, #4
 8002d54:	d00c      	beq.n	8002d70 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d56:	4b85      	ldr	r3, [pc, #532]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d5e:	2b08      	cmp	r3, #8
 8002d60:	d112      	bne.n	8002d88 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d62:	4b82      	ldr	r3, [pc, #520]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d6a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d6e:	d10b      	bne.n	8002d88 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d70:	4b7e      	ldr	r3, [pc, #504]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d05b      	beq.n	8002e34 <HAL_RCC_OscConfig+0x108>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d157      	bne.n	8002e34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e242      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d90:	d106      	bne.n	8002da0 <HAL_RCC_OscConfig+0x74>
 8002d92:	4b76      	ldr	r3, [pc, #472]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a75      	ldr	r2, [pc, #468]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d9c:	6013      	str	r3, [r2, #0]
 8002d9e:	e01d      	b.n	8002ddc <HAL_RCC_OscConfig+0xb0>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002da8:	d10c      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x98>
 8002daa:	4b70      	ldr	r3, [pc, #448]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a6f      	ldr	r2, [pc, #444]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002db0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002db4:	6013      	str	r3, [r2, #0]
 8002db6:	4b6d      	ldr	r3, [pc, #436]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a6c      	ldr	r2, [pc, #432]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002dbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dc0:	6013      	str	r3, [r2, #0]
 8002dc2:	e00b      	b.n	8002ddc <HAL_RCC_OscConfig+0xb0>
 8002dc4:	4b69      	ldr	r3, [pc, #420]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a68      	ldr	r2, [pc, #416]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002dca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dce:	6013      	str	r3, [r2, #0]
 8002dd0:	4b66      	ldr	r3, [pc, #408]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a65      	ldr	r2, [pc, #404]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002dd6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002dda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d013      	beq.n	8002e0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002de4:	f7fe ffa0 	bl	8001d28 <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dec:	f7fe ff9c 	bl	8001d28 <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b64      	cmp	r3, #100	@ 0x64
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e207      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dfe:	4b5b      	ldr	r3, [pc, #364]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d0f0      	beq.n	8002dec <HAL_RCC_OscConfig+0xc0>
 8002e0a:	e014      	b.n	8002e36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0c:	f7fe ff8c 	bl	8001d28 <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e14:	f7fe ff88 	bl	8001d28 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b64      	cmp	r3, #100	@ 0x64
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e1f3      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e26:	4b51      	ldr	r3, [pc, #324]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1f0      	bne.n	8002e14 <HAL_RCC_OscConfig+0xe8>
 8002e32:	e000      	b.n	8002e36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d063      	beq.n	8002f0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e42:	4b4a      	ldr	r3, [pc, #296]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 030c 	and.w	r3, r3, #12
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00b      	beq.n	8002e66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e4e:	4b47      	ldr	r3, [pc, #284]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e56:	2b08      	cmp	r3, #8
 8002e58:	d11c      	bne.n	8002e94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e5a:	4b44      	ldr	r3, [pc, #272]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d116      	bne.n	8002e94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e66:	4b41      	ldr	r3, [pc, #260]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d005      	beq.n	8002e7e <HAL_RCC_OscConfig+0x152>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d001      	beq.n	8002e7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e1c7      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e7e:	4b3b      	ldr	r3, [pc, #236]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	4937      	ldr	r1, [pc, #220]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e92:	e03a      	b.n	8002f0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d020      	beq.n	8002ede <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e9c:	4b34      	ldr	r3, [pc, #208]	@ (8002f70 <HAL_RCC_OscConfig+0x244>)
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea2:	f7fe ff41 	bl	8001d28 <HAL_GetTick>
 8002ea6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ea8:	e008      	b.n	8002ebc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eaa:	f7fe ff3d 	bl	8001d28 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e1a8      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ebc:	4b2b      	ldr	r3, [pc, #172]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d0f0      	beq.n	8002eaa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ec8:	4b28      	ldr	r3, [pc, #160]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691b      	ldr	r3, [r3, #16]
 8002ed4:	00db      	lsls	r3, r3, #3
 8002ed6:	4925      	ldr	r1, [pc, #148]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	600b      	str	r3, [r1, #0]
 8002edc:	e015      	b.n	8002f0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ede:	4b24      	ldr	r3, [pc, #144]	@ (8002f70 <HAL_RCC_OscConfig+0x244>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee4:	f7fe ff20 	bl	8001d28 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eec:	f7fe ff1c 	bl	8001d28 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e187      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002efe:	4b1b      	ldr	r3, [pc, #108]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1f0      	bne.n	8002eec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0308 	and.w	r3, r3, #8
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d036      	beq.n	8002f84 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d016      	beq.n	8002f4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f1e:	4b15      	ldr	r3, [pc, #84]	@ (8002f74 <HAL_RCC_OscConfig+0x248>)
 8002f20:	2201      	movs	r2, #1
 8002f22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f24:	f7fe ff00 	bl	8001d28 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f2c:	f7fe fefc 	bl	8001d28 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e167      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f6c <HAL_RCC_OscConfig+0x240>)
 8002f40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0f0      	beq.n	8002f2c <HAL_RCC_OscConfig+0x200>
 8002f4a:	e01b      	b.n	8002f84 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f4c:	4b09      	ldr	r3, [pc, #36]	@ (8002f74 <HAL_RCC_OscConfig+0x248>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f52:	f7fe fee9 	bl	8001d28 <HAL_GetTick>
 8002f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f58:	e00e      	b.n	8002f78 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f5a:	f7fe fee5 	bl	8001d28 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d907      	bls.n	8002f78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e150      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
 8002f6c:	40023800 	.word	0x40023800
 8002f70:	42470000 	.word	0x42470000
 8002f74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f78:	4b88      	ldr	r3, [pc, #544]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 8002f7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f7c:	f003 0302 	and.w	r3, r3, #2
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d1ea      	bne.n	8002f5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f000 8097 	beq.w	80030c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f92:	2300      	movs	r3, #0
 8002f94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f96:	4b81      	ldr	r3, [pc, #516]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 8002f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d10f      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	4b7d      	ldr	r3, [pc, #500]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002faa:	4a7c      	ldr	r2, [pc, #496]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 8002fac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fb2:	4b7a      	ldr	r3, [pc, #488]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fba:	60bb      	str	r3, [r7, #8]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc2:	4b77      	ldr	r3, [pc, #476]	@ (80031a0 <HAL_RCC_OscConfig+0x474>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d118      	bne.n	8003000 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fce:	4b74      	ldr	r3, [pc, #464]	@ (80031a0 <HAL_RCC_OscConfig+0x474>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a73      	ldr	r2, [pc, #460]	@ (80031a0 <HAL_RCC_OscConfig+0x474>)
 8002fd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fda:	f7fe fea5 	bl	8001d28 <HAL_GetTick>
 8002fde:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe0:	e008      	b.n	8002ff4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe2:	f7fe fea1 	bl	8001d28 <HAL_GetTick>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	2b02      	cmp	r3, #2
 8002fee:	d901      	bls.n	8002ff4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	e10c      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff4:	4b6a      	ldr	r3, [pc, #424]	@ (80031a0 <HAL_RCC_OscConfig+0x474>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d0f0      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	2b01      	cmp	r3, #1
 8003006:	d106      	bne.n	8003016 <HAL_RCC_OscConfig+0x2ea>
 8003008:	4b64      	ldr	r3, [pc, #400]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 800300a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800300c:	4a63      	ldr	r2, [pc, #396]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 800300e:	f043 0301 	orr.w	r3, r3, #1
 8003012:	6713      	str	r3, [r2, #112]	@ 0x70
 8003014:	e01c      	b.n	8003050 <HAL_RCC_OscConfig+0x324>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	2b05      	cmp	r3, #5
 800301c:	d10c      	bne.n	8003038 <HAL_RCC_OscConfig+0x30c>
 800301e:	4b5f      	ldr	r3, [pc, #380]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 8003020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003022:	4a5e      	ldr	r2, [pc, #376]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 8003024:	f043 0304 	orr.w	r3, r3, #4
 8003028:	6713      	str	r3, [r2, #112]	@ 0x70
 800302a:	4b5c      	ldr	r3, [pc, #368]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 800302c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800302e:	4a5b      	ldr	r2, [pc, #364]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 8003030:	f043 0301 	orr.w	r3, r3, #1
 8003034:	6713      	str	r3, [r2, #112]	@ 0x70
 8003036:	e00b      	b.n	8003050 <HAL_RCC_OscConfig+0x324>
 8003038:	4b58      	ldr	r3, [pc, #352]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 800303a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800303c:	4a57      	ldr	r2, [pc, #348]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 800303e:	f023 0301 	bic.w	r3, r3, #1
 8003042:	6713      	str	r3, [r2, #112]	@ 0x70
 8003044:	4b55      	ldr	r3, [pc, #340]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 8003046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003048:	4a54      	ldr	r2, [pc, #336]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 800304a:	f023 0304 	bic.w	r3, r3, #4
 800304e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d015      	beq.n	8003084 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003058:	f7fe fe66 	bl	8001d28 <HAL_GetTick>
 800305c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800305e:	e00a      	b.n	8003076 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003060:	f7fe fe62 	bl	8001d28 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800306e:	4293      	cmp	r3, r2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e0cb      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003076:	4b49      	ldr	r3, [pc, #292]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 8003078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0ee      	beq.n	8003060 <HAL_RCC_OscConfig+0x334>
 8003082:	e014      	b.n	80030ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003084:	f7fe fe50 	bl	8001d28 <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800308a:	e00a      	b.n	80030a2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800308c:	f7fe fe4c 	bl	8001d28 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	f241 3288 	movw	r2, #5000	@ 0x1388
 800309a:	4293      	cmp	r3, r2
 800309c:	d901      	bls.n	80030a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800309e:	2303      	movs	r3, #3
 80030a0:	e0b5      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030a2:	4b3e      	ldr	r3, [pc, #248]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 80030a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d1ee      	bne.n	800308c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030ae:	7dfb      	ldrb	r3, [r7, #23]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d105      	bne.n	80030c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030b4:	4b39      	ldr	r3, [pc, #228]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 80030b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b8:	4a38      	ldr	r2, [pc, #224]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 80030ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 80a1 	beq.w	800320c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030ca:	4b34      	ldr	r3, [pc, #208]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 030c 	and.w	r3, r3, #12
 80030d2:	2b08      	cmp	r3, #8
 80030d4:	d05c      	beq.n	8003190 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d141      	bne.n	8003162 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030de:	4b31      	ldr	r3, [pc, #196]	@ (80031a4 <HAL_RCC_OscConfig+0x478>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e4:	f7fe fe20 	bl	8001d28 <HAL_GetTick>
 80030e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ea:	e008      	b.n	80030fe <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ec:	f7fe fe1c 	bl	8001d28 <HAL_GetTick>
 80030f0:	4602      	mov	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d901      	bls.n	80030fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	e087      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fe:	4b27      	ldr	r3, [pc, #156]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1f0      	bne.n	80030ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	69da      	ldr	r2, [r3, #28]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003118:	019b      	lsls	r3, r3, #6
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003120:	085b      	lsrs	r3, r3, #1
 8003122:	3b01      	subs	r3, #1
 8003124:	041b      	lsls	r3, r3, #16
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800312c:	061b      	lsls	r3, r3, #24
 800312e:	491b      	ldr	r1, [pc, #108]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 8003130:	4313      	orrs	r3, r2
 8003132:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003134:	4b1b      	ldr	r3, [pc, #108]	@ (80031a4 <HAL_RCC_OscConfig+0x478>)
 8003136:	2201      	movs	r2, #1
 8003138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313a:	f7fe fdf5 	bl	8001d28 <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003140:	e008      	b.n	8003154 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003142:	f7fe fdf1 	bl	8001d28 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d901      	bls.n	8003154 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e05c      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003154:	4b11      	ldr	r3, [pc, #68]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d0f0      	beq.n	8003142 <HAL_RCC_OscConfig+0x416>
 8003160:	e054      	b.n	800320c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003162:	4b10      	ldr	r3, [pc, #64]	@ (80031a4 <HAL_RCC_OscConfig+0x478>)
 8003164:	2200      	movs	r2, #0
 8003166:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003168:	f7fe fdde 	bl	8001d28 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003170:	f7fe fdda 	bl	8001d28 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e045      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003182:	4b06      	ldr	r3, [pc, #24]	@ (800319c <HAL_RCC_OscConfig+0x470>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1f0      	bne.n	8003170 <HAL_RCC_OscConfig+0x444>
 800318e:	e03d      	b.n	800320c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	699b      	ldr	r3, [r3, #24]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d107      	bne.n	80031a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e038      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
 800319c:	40023800 	.word	0x40023800
 80031a0:	40007000 	.word	0x40007000
 80031a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003218 <HAL_RCC_OscConfig+0x4ec>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d028      	beq.n	8003208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d121      	bne.n	8003208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d11a      	bne.n	8003208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031d2:	68fa      	ldr	r2, [r7, #12]
 80031d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80031d8:	4013      	ands	r3, r2
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80031de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d111      	bne.n	8003208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ee:	085b      	lsrs	r3, r3, #1
 80031f0:	3b01      	subs	r3, #1
 80031f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d107      	bne.n	8003208 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003202:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003204:	429a      	cmp	r2, r3
 8003206:	d001      	beq.n	800320c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e000      	b.n	800320e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800320c:	2300      	movs	r3, #0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3718      	adds	r7, #24
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40023800 	.word	0x40023800

0800321c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e0cc      	b.n	80033ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003230:	4b68      	ldr	r3, [pc, #416]	@ (80033d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 030f 	and.w	r3, r3, #15
 8003238:	683a      	ldr	r2, [r7, #0]
 800323a:	429a      	cmp	r2, r3
 800323c:	d90c      	bls.n	8003258 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800323e:	4b65      	ldr	r3, [pc, #404]	@ (80033d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	b2d2      	uxtb	r2, r2
 8003244:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003246:	4b63      	ldr	r3, [pc, #396]	@ (80033d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	683a      	ldr	r2, [r7, #0]
 8003250:	429a      	cmp	r2, r3
 8003252:	d001      	beq.n	8003258 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e0b8      	b.n	80033ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0302 	and.w	r3, r3, #2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d020      	beq.n	80032a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b00      	cmp	r3, #0
 800326e:	d005      	beq.n	800327c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003270:	4b59      	ldr	r3, [pc, #356]	@ (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	4a58      	ldr	r2, [pc, #352]	@ (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003276:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800327a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0308 	and.w	r3, r3, #8
 8003284:	2b00      	cmp	r3, #0
 8003286:	d005      	beq.n	8003294 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003288:	4b53      	ldr	r3, [pc, #332]	@ (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	4a52      	ldr	r2, [pc, #328]	@ (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 800328e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003292:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003294:	4b50      	ldr	r3, [pc, #320]	@ (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	494d      	ldr	r1, [pc, #308]	@ (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d044      	beq.n	800333c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d107      	bne.n	80032ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ba:	4b47      	ldr	r3, [pc, #284]	@ (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d119      	bne.n	80032fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e07f      	b.n	80033ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d003      	beq.n	80032da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032d6:	2b03      	cmp	r3, #3
 80032d8:	d107      	bne.n	80032ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032da:	4b3f      	ldr	r3, [pc, #252]	@ (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d109      	bne.n	80032fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e06f      	b.n	80033ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ea:	4b3b      	ldr	r3, [pc, #236]	@ (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e067      	b.n	80033ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032fa:	4b37      	ldr	r3, [pc, #220]	@ (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f023 0203 	bic.w	r2, r3, #3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	4934      	ldr	r1, [pc, #208]	@ (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003308:	4313      	orrs	r3, r2
 800330a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800330c:	f7fe fd0c 	bl	8001d28 <HAL_GetTick>
 8003310:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003312:	e00a      	b.n	800332a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003314:	f7fe fd08 	bl	8001d28 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003322:	4293      	cmp	r3, r2
 8003324:	d901      	bls.n	800332a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e04f      	b.n	80033ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800332a:	4b2b      	ldr	r3, [pc, #172]	@ (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 020c 	and.w	r2, r3, #12
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	429a      	cmp	r2, r3
 800333a:	d1eb      	bne.n	8003314 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800333c:	4b25      	ldr	r3, [pc, #148]	@ (80033d4 <HAL_RCC_ClockConfig+0x1b8>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 030f 	and.w	r3, r3, #15
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	429a      	cmp	r2, r3
 8003348:	d20c      	bcs.n	8003364 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334a:	4b22      	ldr	r3, [pc, #136]	@ (80033d4 <HAL_RCC_ClockConfig+0x1b8>)
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	b2d2      	uxtb	r2, r2
 8003350:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003352:	4b20      	ldr	r3, [pc, #128]	@ (80033d4 <HAL_RCC_ClockConfig+0x1b8>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 030f 	and.w	r3, r3, #15
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	429a      	cmp	r2, r3
 800335e:	d001      	beq.n	8003364 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e032      	b.n	80033ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	2b00      	cmp	r3, #0
 800336e:	d008      	beq.n	8003382 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003370:	4b19      	ldr	r3, [pc, #100]	@ (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	4916      	ldr	r1, [pc, #88]	@ (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 800337e:	4313      	orrs	r3, r2
 8003380:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0308 	and.w	r3, r3, #8
 800338a:	2b00      	cmp	r3, #0
 800338c:	d009      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800338e:	4b12      	ldr	r3, [pc, #72]	@ (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	490e      	ldr	r1, [pc, #56]	@ (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033a2:	f000 f821 	bl	80033e8 <HAL_RCC_GetSysClockFreq>
 80033a6:	4602      	mov	r2, r0
 80033a8:	4b0b      	ldr	r3, [pc, #44]	@ (80033d8 <HAL_RCC_ClockConfig+0x1bc>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	091b      	lsrs	r3, r3, #4
 80033ae:	f003 030f 	and.w	r3, r3, #15
 80033b2:	490a      	ldr	r1, [pc, #40]	@ (80033dc <HAL_RCC_ClockConfig+0x1c0>)
 80033b4:	5ccb      	ldrb	r3, [r1, r3]
 80033b6:	fa22 f303 	lsr.w	r3, r2, r3
 80033ba:	4a09      	ldr	r2, [pc, #36]	@ (80033e0 <HAL_RCC_ClockConfig+0x1c4>)
 80033bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033be:	4b09      	ldr	r3, [pc, #36]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c8>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fe fc6c 	bl	8001ca0 <HAL_InitTick>

  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	40023c00 	.word	0x40023c00
 80033d8:	40023800 	.word	0x40023800
 80033dc:	08009d10 	.word	0x08009d10
 80033e0:	20000000 	.word	0x20000000
 80033e4:	20000004 	.word	0x20000004

080033e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033ec:	b094      	sub	sp, #80	@ 0x50
 80033ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033f0:	2300      	movs	r3, #0
 80033f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80033f4:	2300      	movs	r3, #0
 80033f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033f8:	2300      	movs	r3, #0
 80033fa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003400:	4b79      	ldr	r3, [pc, #484]	@ (80035e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f003 030c 	and.w	r3, r3, #12
 8003408:	2b08      	cmp	r3, #8
 800340a:	d00d      	beq.n	8003428 <HAL_RCC_GetSysClockFreq+0x40>
 800340c:	2b08      	cmp	r3, #8
 800340e:	f200 80e1 	bhi.w	80035d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003412:	2b00      	cmp	r3, #0
 8003414:	d002      	beq.n	800341c <HAL_RCC_GetSysClockFreq+0x34>
 8003416:	2b04      	cmp	r3, #4
 8003418:	d003      	beq.n	8003422 <HAL_RCC_GetSysClockFreq+0x3a>
 800341a:	e0db      	b.n	80035d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800341c:	4b73      	ldr	r3, [pc, #460]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x204>)
 800341e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003420:	e0db      	b.n	80035da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003422:	4b73      	ldr	r3, [pc, #460]	@ (80035f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003424:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003426:	e0d8      	b.n	80035da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003428:	4b6f      	ldr	r3, [pc, #444]	@ (80035e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003430:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003432:	4b6d      	ldr	r3, [pc, #436]	@ (80035e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d063      	beq.n	8003506 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800343e:	4b6a      	ldr	r3, [pc, #424]	@ (80035e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	099b      	lsrs	r3, r3, #6
 8003444:	2200      	movs	r2, #0
 8003446:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003448:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800344a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800344c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003450:	633b      	str	r3, [r7, #48]	@ 0x30
 8003452:	2300      	movs	r3, #0
 8003454:	637b      	str	r3, [r7, #52]	@ 0x34
 8003456:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800345a:	4622      	mov	r2, r4
 800345c:	462b      	mov	r3, r5
 800345e:	f04f 0000 	mov.w	r0, #0
 8003462:	f04f 0100 	mov.w	r1, #0
 8003466:	0159      	lsls	r1, r3, #5
 8003468:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800346c:	0150      	lsls	r0, r2, #5
 800346e:	4602      	mov	r2, r0
 8003470:	460b      	mov	r3, r1
 8003472:	4621      	mov	r1, r4
 8003474:	1a51      	subs	r1, r2, r1
 8003476:	6139      	str	r1, [r7, #16]
 8003478:	4629      	mov	r1, r5
 800347a:	eb63 0301 	sbc.w	r3, r3, r1
 800347e:	617b      	str	r3, [r7, #20]
 8003480:	f04f 0200 	mov.w	r2, #0
 8003484:	f04f 0300 	mov.w	r3, #0
 8003488:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800348c:	4659      	mov	r1, fp
 800348e:	018b      	lsls	r3, r1, #6
 8003490:	4651      	mov	r1, sl
 8003492:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003496:	4651      	mov	r1, sl
 8003498:	018a      	lsls	r2, r1, #6
 800349a:	4651      	mov	r1, sl
 800349c:	ebb2 0801 	subs.w	r8, r2, r1
 80034a0:	4659      	mov	r1, fp
 80034a2:	eb63 0901 	sbc.w	r9, r3, r1
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	f04f 0300 	mov.w	r3, #0
 80034ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034ba:	4690      	mov	r8, r2
 80034bc:	4699      	mov	r9, r3
 80034be:	4623      	mov	r3, r4
 80034c0:	eb18 0303 	adds.w	r3, r8, r3
 80034c4:	60bb      	str	r3, [r7, #8]
 80034c6:	462b      	mov	r3, r5
 80034c8:	eb49 0303 	adc.w	r3, r9, r3
 80034cc:	60fb      	str	r3, [r7, #12]
 80034ce:	f04f 0200 	mov.w	r2, #0
 80034d2:	f04f 0300 	mov.w	r3, #0
 80034d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80034da:	4629      	mov	r1, r5
 80034dc:	024b      	lsls	r3, r1, #9
 80034de:	4621      	mov	r1, r4
 80034e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034e4:	4621      	mov	r1, r4
 80034e6:	024a      	lsls	r2, r1, #9
 80034e8:	4610      	mov	r0, r2
 80034ea:	4619      	mov	r1, r3
 80034ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034ee:	2200      	movs	r2, #0
 80034f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80034f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80034f8:	f7fc feda 	bl	80002b0 <__aeabi_uldivmod>
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	4613      	mov	r3, r2
 8003502:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003504:	e058      	b.n	80035b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003506:	4b38      	ldr	r3, [pc, #224]	@ (80035e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	099b      	lsrs	r3, r3, #6
 800350c:	2200      	movs	r2, #0
 800350e:	4618      	mov	r0, r3
 8003510:	4611      	mov	r1, r2
 8003512:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003516:	623b      	str	r3, [r7, #32]
 8003518:	2300      	movs	r3, #0
 800351a:	627b      	str	r3, [r7, #36]	@ 0x24
 800351c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003520:	4642      	mov	r2, r8
 8003522:	464b      	mov	r3, r9
 8003524:	f04f 0000 	mov.w	r0, #0
 8003528:	f04f 0100 	mov.w	r1, #0
 800352c:	0159      	lsls	r1, r3, #5
 800352e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003532:	0150      	lsls	r0, r2, #5
 8003534:	4602      	mov	r2, r0
 8003536:	460b      	mov	r3, r1
 8003538:	4641      	mov	r1, r8
 800353a:	ebb2 0a01 	subs.w	sl, r2, r1
 800353e:	4649      	mov	r1, r9
 8003540:	eb63 0b01 	sbc.w	fp, r3, r1
 8003544:	f04f 0200 	mov.w	r2, #0
 8003548:	f04f 0300 	mov.w	r3, #0
 800354c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003550:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003554:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003558:	ebb2 040a 	subs.w	r4, r2, sl
 800355c:	eb63 050b 	sbc.w	r5, r3, fp
 8003560:	f04f 0200 	mov.w	r2, #0
 8003564:	f04f 0300 	mov.w	r3, #0
 8003568:	00eb      	lsls	r3, r5, #3
 800356a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800356e:	00e2      	lsls	r2, r4, #3
 8003570:	4614      	mov	r4, r2
 8003572:	461d      	mov	r5, r3
 8003574:	4643      	mov	r3, r8
 8003576:	18e3      	adds	r3, r4, r3
 8003578:	603b      	str	r3, [r7, #0]
 800357a:	464b      	mov	r3, r9
 800357c:	eb45 0303 	adc.w	r3, r5, r3
 8003580:	607b      	str	r3, [r7, #4]
 8003582:	f04f 0200 	mov.w	r2, #0
 8003586:	f04f 0300 	mov.w	r3, #0
 800358a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800358e:	4629      	mov	r1, r5
 8003590:	028b      	lsls	r3, r1, #10
 8003592:	4621      	mov	r1, r4
 8003594:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003598:	4621      	mov	r1, r4
 800359a:	028a      	lsls	r2, r1, #10
 800359c:	4610      	mov	r0, r2
 800359e:	4619      	mov	r1, r3
 80035a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035a2:	2200      	movs	r2, #0
 80035a4:	61bb      	str	r3, [r7, #24]
 80035a6:	61fa      	str	r2, [r7, #28]
 80035a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035ac:	f7fc fe80 	bl	80002b0 <__aeabi_uldivmod>
 80035b0:	4602      	mov	r2, r0
 80035b2:	460b      	mov	r3, r1
 80035b4:	4613      	mov	r3, r2
 80035b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035b8:	4b0b      	ldr	r3, [pc, #44]	@ (80035e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	0c1b      	lsrs	r3, r3, #16
 80035be:	f003 0303 	and.w	r3, r3, #3
 80035c2:	3301      	adds	r3, #1
 80035c4:	005b      	lsls	r3, r3, #1
 80035c6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80035c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035d2:	e002      	b.n	80035da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035d4:	4b05      	ldr	r3, [pc, #20]	@ (80035ec <HAL_RCC_GetSysClockFreq+0x204>)
 80035d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3750      	adds	r7, #80	@ 0x50
 80035e0:	46bd      	mov	sp, r7
 80035e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035e6:	bf00      	nop
 80035e8:	40023800 	.word	0x40023800
 80035ec:	00f42400 	.word	0x00f42400
 80035f0:	007a1200 	.word	0x007a1200

080035f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035f8:	4b03      	ldr	r3, [pc, #12]	@ (8003608 <HAL_RCC_GetHCLKFreq+0x14>)
 80035fa:	681b      	ldr	r3, [r3, #0]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	20000000 	.word	0x20000000

0800360c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003610:	f7ff fff0 	bl	80035f4 <HAL_RCC_GetHCLKFreq>
 8003614:	4602      	mov	r2, r0
 8003616:	4b05      	ldr	r3, [pc, #20]	@ (800362c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	0a9b      	lsrs	r3, r3, #10
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	4903      	ldr	r1, [pc, #12]	@ (8003630 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003622:	5ccb      	ldrb	r3, [r1, r3]
 8003624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003628:	4618      	mov	r0, r3
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40023800 	.word	0x40023800
 8003630:	08009d20 	.word	0x08009d20

08003634 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003638:	f7ff ffdc 	bl	80035f4 <HAL_RCC_GetHCLKFreq>
 800363c:	4602      	mov	r2, r0
 800363e:	4b05      	ldr	r3, [pc, #20]	@ (8003654 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	0b5b      	lsrs	r3, r3, #13
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	4903      	ldr	r1, [pc, #12]	@ (8003658 <HAL_RCC_GetPCLK2Freq+0x24>)
 800364a:	5ccb      	ldrb	r3, [r1, r3]
 800364c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003650:	4618      	mov	r0, r3
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40023800 	.word	0x40023800
 8003658:	08009d20 	.word	0x08009d20

0800365c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e041      	b.n	80036f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d106      	bne.n	8003688 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7fd ffcc 	bl	8001620 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2202      	movs	r2, #2
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3304      	adds	r3, #4
 8003698:	4619      	mov	r1, r3
 800369a:	4610      	mov	r0, r2
 800369c:	f000 f8f4 	bl	8003888 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b084      	sub	sp, #16
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
 8003702:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003704:	2300      	movs	r3, #0
 8003706:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800370e:	2b01      	cmp	r3, #1
 8003710:	d101      	bne.n	8003716 <HAL_TIM_ConfigClockSource+0x1c>
 8003712:	2302      	movs	r3, #2
 8003714:	e0b4      	b.n	8003880 <HAL_TIM_ConfigClockSource+0x186>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2202      	movs	r2, #2
 8003722:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003734:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800373c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	68ba      	ldr	r2, [r7, #8]
 8003744:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800374e:	d03e      	beq.n	80037ce <HAL_TIM_ConfigClockSource+0xd4>
 8003750:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003754:	f200 8087 	bhi.w	8003866 <HAL_TIM_ConfigClockSource+0x16c>
 8003758:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800375c:	f000 8086 	beq.w	800386c <HAL_TIM_ConfigClockSource+0x172>
 8003760:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003764:	d87f      	bhi.n	8003866 <HAL_TIM_ConfigClockSource+0x16c>
 8003766:	2b70      	cmp	r3, #112	@ 0x70
 8003768:	d01a      	beq.n	80037a0 <HAL_TIM_ConfigClockSource+0xa6>
 800376a:	2b70      	cmp	r3, #112	@ 0x70
 800376c:	d87b      	bhi.n	8003866 <HAL_TIM_ConfigClockSource+0x16c>
 800376e:	2b60      	cmp	r3, #96	@ 0x60
 8003770:	d050      	beq.n	8003814 <HAL_TIM_ConfigClockSource+0x11a>
 8003772:	2b60      	cmp	r3, #96	@ 0x60
 8003774:	d877      	bhi.n	8003866 <HAL_TIM_ConfigClockSource+0x16c>
 8003776:	2b50      	cmp	r3, #80	@ 0x50
 8003778:	d03c      	beq.n	80037f4 <HAL_TIM_ConfigClockSource+0xfa>
 800377a:	2b50      	cmp	r3, #80	@ 0x50
 800377c:	d873      	bhi.n	8003866 <HAL_TIM_ConfigClockSource+0x16c>
 800377e:	2b40      	cmp	r3, #64	@ 0x40
 8003780:	d058      	beq.n	8003834 <HAL_TIM_ConfigClockSource+0x13a>
 8003782:	2b40      	cmp	r3, #64	@ 0x40
 8003784:	d86f      	bhi.n	8003866 <HAL_TIM_ConfigClockSource+0x16c>
 8003786:	2b30      	cmp	r3, #48	@ 0x30
 8003788:	d064      	beq.n	8003854 <HAL_TIM_ConfigClockSource+0x15a>
 800378a:	2b30      	cmp	r3, #48	@ 0x30
 800378c:	d86b      	bhi.n	8003866 <HAL_TIM_ConfigClockSource+0x16c>
 800378e:	2b20      	cmp	r3, #32
 8003790:	d060      	beq.n	8003854 <HAL_TIM_ConfigClockSource+0x15a>
 8003792:	2b20      	cmp	r3, #32
 8003794:	d867      	bhi.n	8003866 <HAL_TIM_ConfigClockSource+0x16c>
 8003796:	2b00      	cmp	r3, #0
 8003798:	d05c      	beq.n	8003854 <HAL_TIM_ConfigClockSource+0x15a>
 800379a:	2b10      	cmp	r3, #16
 800379c:	d05a      	beq.n	8003854 <HAL_TIM_ConfigClockSource+0x15a>
 800379e:	e062      	b.n	8003866 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037b0:	f000 f990 	bl	8003ad4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80037c2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68ba      	ldr	r2, [r7, #8]
 80037ca:	609a      	str	r2, [r3, #8]
      break;
 80037cc:	e04f      	b.n	800386e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037de:	f000 f979 	bl	8003ad4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037f0:	609a      	str	r2, [r3, #8]
      break;
 80037f2:	e03c      	b.n	800386e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003800:	461a      	mov	r2, r3
 8003802:	f000 f8ed 	bl	80039e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2150      	movs	r1, #80	@ 0x50
 800380c:	4618      	mov	r0, r3
 800380e:	f000 f946 	bl	8003a9e <TIM_ITRx_SetConfig>
      break;
 8003812:	e02c      	b.n	800386e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003820:	461a      	mov	r2, r3
 8003822:	f000 f90c 	bl	8003a3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2160      	movs	r1, #96	@ 0x60
 800382c:	4618      	mov	r0, r3
 800382e:	f000 f936 	bl	8003a9e <TIM_ITRx_SetConfig>
      break;
 8003832:	e01c      	b.n	800386e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003840:	461a      	mov	r2, r3
 8003842:	f000 f8cd 	bl	80039e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2140      	movs	r1, #64	@ 0x40
 800384c:	4618      	mov	r0, r3
 800384e:	f000 f926 	bl	8003a9e <TIM_ITRx_SetConfig>
      break;
 8003852:	e00c      	b.n	800386e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4619      	mov	r1, r3
 800385e:	4610      	mov	r0, r2
 8003860:	f000 f91d 	bl	8003a9e <TIM_ITRx_SetConfig>
      break;
 8003864:	e003      	b.n	800386e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	73fb      	strb	r3, [r7, #15]
      break;
 800386a:	e000      	b.n	800386e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800386c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800387e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003880:	4618      	mov	r0, r3
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a46      	ldr	r2, [pc, #280]	@ (80039b4 <TIM_Base_SetConfig+0x12c>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d013      	beq.n	80038c8 <TIM_Base_SetConfig+0x40>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038a6:	d00f      	beq.n	80038c8 <TIM_Base_SetConfig+0x40>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a43      	ldr	r2, [pc, #268]	@ (80039b8 <TIM_Base_SetConfig+0x130>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d00b      	beq.n	80038c8 <TIM_Base_SetConfig+0x40>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a42      	ldr	r2, [pc, #264]	@ (80039bc <TIM_Base_SetConfig+0x134>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d007      	beq.n	80038c8 <TIM_Base_SetConfig+0x40>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a41      	ldr	r2, [pc, #260]	@ (80039c0 <TIM_Base_SetConfig+0x138>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d003      	beq.n	80038c8 <TIM_Base_SetConfig+0x40>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a40      	ldr	r2, [pc, #256]	@ (80039c4 <TIM_Base_SetConfig+0x13c>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d108      	bne.n	80038da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a35      	ldr	r2, [pc, #212]	@ (80039b4 <TIM_Base_SetConfig+0x12c>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d02b      	beq.n	800393a <TIM_Base_SetConfig+0xb2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038e8:	d027      	beq.n	800393a <TIM_Base_SetConfig+0xb2>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a32      	ldr	r2, [pc, #200]	@ (80039b8 <TIM_Base_SetConfig+0x130>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d023      	beq.n	800393a <TIM_Base_SetConfig+0xb2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a31      	ldr	r2, [pc, #196]	@ (80039bc <TIM_Base_SetConfig+0x134>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d01f      	beq.n	800393a <TIM_Base_SetConfig+0xb2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a30      	ldr	r2, [pc, #192]	@ (80039c0 <TIM_Base_SetConfig+0x138>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d01b      	beq.n	800393a <TIM_Base_SetConfig+0xb2>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a2f      	ldr	r2, [pc, #188]	@ (80039c4 <TIM_Base_SetConfig+0x13c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d017      	beq.n	800393a <TIM_Base_SetConfig+0xb2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a2e      	ldr	r2, [pc, #184]	@ (80039c8 <TIM_Base_SetConfig+0x140>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d013      	beq.n	800393a <TIM_Base_SetConfig+0xb2>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a2d      	ldr	r2, [pc, #180]	@ (80039cc <TIM_Base_SetConfig+0x144>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d00f      	beq.n	800393a <TIM_Base_SetConfig+0xb2>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a2c      	ldr	r2, [pc, #176]	@ (80039d0 <TIM_Base_SetConfig+0x148>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d00b      	beq.n	800393a <TIM_Base_SetConfig+0xb2>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a2b      	ldr	r2, [pc, #172]	@ (80039d4 <TIM_Base_SetConfig+0x14c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d007      	beq.n	800393a <TIM_Base_SetConfig+0xb2>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a2a      	ldr	r2, [pc, #168]	@ (80039d8 <TIM_Base_SetConfig+0x150>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d003      	beq.n	800393a <TIM_Base_SetConfig+0xb2>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a29      	ldr	r2, [pc, #164]	@ (80039dc <TIM_Base_SetConfig+0x154>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d108      	bne.n	800394c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003940:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	4313      	orrs	r3, r2
 800394a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	4313      	orrs	r3, r2
 8003958:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	68fa      	ldr	r2, [r7, #12]
 800395e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a10      	ldr	r2, [pc, #64]	@ (80039b4 <TIM_Base_SetConfig+0x12c>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d003      	beq.n	8003980 <TIM_Base_SetConfig+0xf8>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a12      	ldr	r2, [pc, #72]	@ (80039c4 <TIM_Base_SetConfig+0x13c>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d103      	bne.n	8003988 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	691a      	ldr	r2, [r3, #16]
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b01      	cmp	r3, #1
 8003998:	d105      	bne.n	80039a6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	f023 0201 	bic.w	r2, r3, #1
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	611a      	str	r2, [r3, #16]
  }
}
 80039a6:	bf00      	nop
 80039a8:	3714      	adds	r7, #20
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	40010000 	.word	0x40010000
 80039b8:	40000400 	.word	0x40000400
 80039bc:	40000800 	.word	0x40000800
 80039c0:	40000c00 	.word	0x40000c00
 80039c4:	40010400 	.word	0x40010400
 80039c8:	40014000 	.word	0x40014000
 80039cc:	40014400 	.word	0x40014400
 80039d0:	40014800 	.word	0x40014800
 80039d4:	40001800 	.word	0x40001800
 80039d8:	40001c00 	.word	0x40001c00
 80039dc:	40002000 	.word	0x40002000

080039e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b087      	sub	sp, #28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6a1b      	ldr	r3, [r3, #32]
 80039f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	f023 0201 	bic.w	r2, r3, #1
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	011b      	lsls	r3, r3, #4
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	f023 030a 	bic.w	r3, r3, #10
 8003a1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a1e:	697a      	ldr	r2, [r7, #20]
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	697a      	ldr	r2, [r7, #20]
 8003a30:	621a      	str	r2, [r3, #32]
}
 8003a32:	bf00      	nop
 8003a34:	371c      	adds	r7, #28
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b087      	sub	sp, #28
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	60f8      	str	r0, [r7, #12]
 8003a46:	60b9      	str	r1, [r7, #8]
 8003a48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6a1b      	ldr	r3, [r3, #32]
 8003a54:	f023 0210 	bic.w	r2, r3, #16
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	699b      	ldr	r3, [r3, #24]
 8003a60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003a68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	031b      	lsls	r3, r3, #12
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	4313      	orrs	r3, r2
 8003a72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003a7a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	621a      	str	r2, [r3, #32]
}
 8003a92:	bf00      	nop
 8003a94:	371c      	adds	r7, #28
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b085      	sub	sp, #20
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
 8003aa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ab4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	f043 0307 	orr.w	r3, r3, #7
 8003ac0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	609a      	str	r2, [r3, #8]
}
 8003ac8:	bf00      	nop
 8003aca:	3714      	adds	r7, #20
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	607a      	str	r2, [r7, #4]
 8003ae0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003aee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	021a      	lsls	r2, r3, #8
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	431a      	orrs	r2, r3
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	697a      	ldr	r2, [r7, #20]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	697a      	ldr	r2, [r7, #20]
 8003b06:	609a      	str	r2, [r3, #8]
}
 8003b08:	bf00      	nop
 8003b0a:	371c      	adds	r7, #28
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d101      	bne.n	8003b2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b28:	2302      	movs	r3, #2
 8003b2a:	e05a      	b.n	8003be2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2202      	movs	r2, #2
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a21      	ldr	r2, [pc, #132]	@ (8003bf0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d022      	beq.n	8003bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b78:	d01d      	beq.n	8003bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a1d      	ldr	r2, [pc, #116]	@ (8003bf4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d018      	beq.n	8003bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a1b      	ldr	r2, [pc, #108]	@ (8003bf8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d013      	beq.n	8003bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a1a      	ldr	r2, [pc, #104]	@ (8003bfc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d00e      	beq.n	8003bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a18      	ldr	r2, [pc, #96]	@ (8003c00 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d009      	beq.n	8003bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a17      	ldr	r2, [pc, #92]	@ (8003c04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d004      	beq.n	8003bb6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a15      	ldr	r2, [pc, #84]	@ (8003c08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d10c      	bne.n	8003bd0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	68ba      	ldr	r2, [r7, #8]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68ba      	ldr	r2, [r7, #8]
 8003bce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	40010000 	.word	0x40010000
 8003bf4:	40000400 	.word	0x40000400
 8003bf8:	40000800 	.word	0x40000800
 8003bfc:	40000c00 	.word	0x40000c00
 8003c00:	40010400 	.word	0x40010400
 8003c04:	40014000 	.word	0x40014000
 8003c08:	40001800 	.word	0x40001800

08003c0c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e042      	b.n	8003ca4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d106      	bne.n	8003c38 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7fd fd3c 	bl	80016b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2224      	movs	r2, #36	@ 0x24
 8003c3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68da      	ldr	r2, [r3, #12]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c4e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 fdbd 	bl	80047d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	691a      	ldr	r2, [r3, #16]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c64:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	695a      	ldr	r2, [r3, #20]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c74:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68da      	ldr	r2, [r3, #12]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003c84:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2220      	movs	r2, #32
 8003c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2220      	movs	r2, #32
 8003c98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3708      	adds	r7, #8
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b08a      	sub	sp, #40	@ 0x28
 8003cb0:	af02      	add	r7, sp, #8
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	603b      	str	r3, [r7, #0]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	2b20      	cmp	r3, #32
 8003cca:	d175      	bne.n	8003db8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d002      	beq.n	8003cd8 <HAL_UART_Transmit+0x2c>
 8003cd2:	88fb      	ldrh	r3, [r7, #6]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e06e      	b.n	8003dba <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	2221      	movs	r2, #33	@ 0x21
 8003ce6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cea:	f7fe f81d 	bl	8001d28 <HAL_GetTick>
 8003cee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	88fa      	ldrh	r2, [r7, #6]
 8003cf4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	88fa      	ldrh	r2, [r7, #6]
 8003cfa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d04:	d108      	bne.n	8003d18 <HAL_UART_Transmit+0x6c>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	691b      	ldr	r3, [r3, #16]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d104      	bne.n	8003d18 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	61bb      	str	r3, [r7, #24]
 8003d16:	e003      	b.n	8003d20 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d20:	e02e      	b.n	8003d80 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	2180      	movs	r1, #128	@ 0x80
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f000 fb1f 	bl	8004370 <UART_WaitOnFlagUntilTimeout>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d005      	beq.n	8003d44 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2220      	movs	r2, #32
 8003d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e03a      	b.n	8003dba <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10b      	bne.n	8003d62 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	881b      	ldrh	r3, [r3, #0]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	3302      	adds	r3, #2
 8003d5e:	61bb      	str	r3, [r7, #24]
 8003d60:	e007      	b.n	8003d72 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	781a      	ldrb	r2, [r3, #0]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	3301      	adds	r3, #1
 8003d70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1cb      	bne.n	8003d22 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	2200      	movs	r2, #0
 8003d92:	2140      	movs	r1, #64	@ 0x40
 8003d94:	68f8      	ldr	r0, [r7, #12]
 8003d96:	f000 faeb 	bl	8004370 <UART_WaitOnFlagUntilTimeout>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d005      	beq.n	8003dac <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003da8:	2303      	movs	r3, #3
 8003daa:	e006      	b.n	8003dba <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2220      	movs	r2, #32
 8003db0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003db4:	2300      	movs	r3, #0
 8003db6:	e000      	b.n	8003dba <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003db8:	2302      	movs	r3, #2
  }
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3720      	adds	r7, #32
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}

08003dc2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b084      	sub	sp, #16
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	60f8      	str	r0, [r7, #12]
 8003dca:	60b9      	str	r1, [r7, #8]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b20      	cmp	r3, #32
 8003dda:	d112      	bne.n	8003e02 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d002      	beq.n	8003de8 <HAL_UART_Receive_IT+0x26>
 8003de2:	88fb      	ldrh	r3, [r7, #6]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d101      	bne.n	8003dec <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e00b      	b.n	8003e04 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003df2:	88fb      	ldrh	r3, [r7, #6]
 8003df4:	461a      	mov	r2, r3
 8003df6:	68b9      	ldr	r1, [r7, #8]
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f000 fb12 	bl	8004422 <UART_Start_Receive_IT>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	e000      	b.n	8003e04 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003e02:	2302      	movs	r3, #2
  }
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b0ba      	sub	sp, #232	@ 0xe8
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003e32:	2300      	movs	r3, #0
 8003e34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e42:	f003 030f 	and.w	r3, r3, #15
 8003e46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003e4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d10f      	bne.n	8003e72 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e56:	f003 0320 	and.w	r3, r3, #32
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d009      	beq.n	8003e72 <HAL_UART_IRQHandler+0x66>
 8003e5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e62:	f003 0320 	and.w	r3, r3, #32
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d003      	beq.n	8003e72 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 fbf2 	bl	8004654 <UART_Receive_IT>
      return;
 8003e70:	e25b      	b.n	800432a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003e72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 80de 	beq.w	8004038 <HAL_UART_IRQHandler+0x22c>
 8003e7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d106      	bne.n	8003e96 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e8c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	f000 80d1 	beq.w	8004038 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00b      	beq.n	8003eba <HAL_UART_IRQHandler+0xae>
 8003ea2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ea6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d005      	beq.n	8003eba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb2:	f043 0201 	orr.w	r2, r3, #1
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ebe:	f003 0304 	and.w	r3, r3, #4
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00b      	beq.n	8003ede <HAL_UART_IRQHandler+0xd2>
 8003ec6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d005      	beq.n	8003ede <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ed6:	f043 0202 	orr.w	r2, r3, #2
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00b      	beq.n	8003f02 <HAL_UART_IRQHandler+0xf6>
 8003eea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d005      	beq.n	8003f02 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003efa:	f043 0204 	orr.w	r2, r3, #4
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f06:	f003 0308 	and.w	r3, r3, #8
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d011      	beq.n	8003f32 <HAL_UART_IRQHandler+0x126>
 8003f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f12:	f003 0320 	and.w	r3, r3, #32
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d105      	bne.n	8003f26 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d005      	beq.n	8003f32 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f2a:	f043 0208 	orr.w	r2, r3, #8
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f000 81f2 	beq.w	8004320 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f40:	f003 0320 	and.w	r3, r3, #32
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d008      	beq.n	8003f5a <HAL_UART_IRQHandler+0x14e>
 8003f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f4c:	f003 0320 	and.w	r3, r3, #32
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d002      	beq.n	8003f5a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 fb7d 	bl	8004654 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f64:	2b40      	cmp	r3, #64	@ 0x40
 8003f66:	bf0c      	ite	eq
 8003f68:	2301      	moveq	r3, #1
 8003f6a:	2300      	movne	r3, #0
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f76:	f003 0308 	and.w	r3, r3, #8
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d103      	bne.n	8003f86 <HAL_UART_IRQHandler+0x17a>
 8003f7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d04f      	beq.n	8004026 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 fa85 	bl	8004496 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f96:	2b40      	cmp	r3, #64	@ 0x40
 8003f98:	d141      	bne.n	800401e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	3314      	adds	r3, #20
 8003fa0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fa4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003fa8:	e853 3f00 	ldrex	r3, [r3]
 8003fac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003fb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003fb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	3314      	adds	r3, #20
 8003fc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003fc6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003fca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003fd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003fd6:	e841 2300 	strex	r3, r2, [r1]
 8003fda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003fde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1d9      	bne.n	8003f9a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d013      	beq.n	8004016 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ff2:	4a7e      	ldr	r2, [pc, #504]	@ (80041ec <HAL_UART_IRQHandler+0x3e0>)
 8003ff4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7fe f845 	bl	800208a <HAL_DMA_Abort_IT>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d016      	beq.n	8004034 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800400a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004010:	4610      	mov	r0, r2
 8004012:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004014:	e00e      	b.n	8004034 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f994 	bl	8004344 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800401c:	e00a      	b.n	8004034 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 f990 	bl	8004344 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004024:	e006      	b.n	8004034 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f98c 	bl	8004344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2200      	movs	r2, #0
 8004030:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004032:	e175      	b.n	8004320 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004034:	bf00      	nop
    return;
 8004036:	e173      	b.n	8004320 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800403c:	2b01      	cmp	r3, #1
 800403e:	f040 814f 	bne.w	80042e0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004046:	f003 0310 	and.w	r3, r3, #16
 800404a:	2b00      	cmp	r3, #0
 800404c:	f000 8148 	beq.w	80042e0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004054:	f003 0310 	and.w	r3, r3, #16
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 8141 	beq.w	80042e0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800405e:	2300      	movs	r3, #0
 8004060:	60bb      	str	r3, [r7, #8]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	60bb      	str	r3, [r7, #8]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	60bb      	str	r3, [r7, #8]
 8004072:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800407e:	2b40      	cmp	r3, #64	@ 0x40
 8004080:	f040 80b6 	bne.w	80041f0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004090:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004094:	2b00      	cmp	r3, #0
 8004096:	f000 8145 	beq.w	8004324 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800409e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80040a2:	429a      	cmp	r2, r3
 80040a4:	f080 813e 	bcs.w	8004324 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80040ae:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040ba:	f000 8088 	beq.w	80041ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	330c      	adds	r3, #12
 80040c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80040cc:	e853 3f00 	ldrex	r3, [r3]
 80040d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80040d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80040d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	330c      	adds	r3, #12
 80040e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80040ea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80040ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80040f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80040fa:	e841 2300 	strex	r3, r2, [r1]
 80040fe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004102:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1d9      	bne.n	80040be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	3314      	adds	r3, #20
 8004110:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004112:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004114:	e853 3f00 	ldrex	r3, [r3]
 8004118:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800411a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800411c:	f023 0301 	bic.w	r3, r3, #1
 8004120:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	3314      	adds	r3, #20
 800412a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800412e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004132:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004134:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004136:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800413a:	e841 2300 	strex	r3, r2, [r1]
 800413e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004140:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1e1      	bne.n	800410a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	3314      	adds	r3, #20
 800414c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004150:	e853 3f00 	ldrex	r3, [r3]
 8004154:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004156:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004158:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800415c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	3314      	adds	r3, #20
 8004166:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800416a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800416c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800416e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004170:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004172:	e841 2300 	strex	r3, r2, [r1]
 8004176:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004178:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1e3      	bne.n	8004146 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2220      	movs	r2, #32
 8004182:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	330c      	adds	r3, #12
 8004192:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004194:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004196:	e853 3f00 	ldrex	r3, [r3]
 800419a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800419c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800419e:	f023 0310 	bic.w	r3, r3, #16
 80041a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	330c      	adds	r3, #12
 80041ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80041b0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80041b2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80041b6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80041b8:	e841 2300 	strex	r3, r2, [r1]
 80041bc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80041be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1e3      	bne.n	800418c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7fd feee 	bl	8001faa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2202      	movs	r2, #2
 80041d2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041dc:	b29b      	uxth	r3, r3
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	4619      	mov	r1, r3
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 f8b7 	bl	8004358 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80041ea:	e09b      	b.n	8004324 <HAL_UART_IRQHandler+0x518>
 80041ec:	0800455d 	.word	0x0800455d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004204:	b29b      	uxth	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	f000 808e 	beq.w	8004328 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800420c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 8089 	beq.w	8004328 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	330c      	adds	r3, #12
 800421c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004220:	e853 3f00 	ldrex	r3, [r3]
 8004224:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004226:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004228:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800422c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	330c      	adds	r3, #12
 8004236:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800423a:	647a      	str	r2, [r7, #68]	@ 0x44
 800423c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004240:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004242:	e841 2300 	strex	r3, r2, [r1]
 8004246:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004248:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1e3      	bne.n	8004216 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3314      	adds	r3, #20
 8004254:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004258:	e853 3f00 	ldrex	r3, [r3]
 800425c:	623b      	str	r3, [r7, #32]
   return(result);
 800425e:	6a3b      	ldr	r3, [r7, #32]
 8004260:	f023 0301 	bic.w	r3, r3, #1
 8004264:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	3314      	adds	r3, #20
 800426e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004272:	633a      	str	r2, [r7, #48]	@ 0x30
 8004274:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004276:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004278:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800427a:	e841 2300 	strex	r3, r2, [r1]
 800427e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1e3      	bne.n	800424e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2220      	movs	r2, #32
 800428a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2200      	movs	r2, #0
 8004292:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	330c      	adds	r3, #12
 800429a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	e853 3f00 	ldrex	r3, [r3]
 80042a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f023 0310 	bic.w	r3, r3, #16
 80042aa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	330c      	adds	r3, #12
 80042b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80042b8:	61fa      	str	r2, [r7, #28]
 80042ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042bc:	69b9      	ldr	r1, [r7, #24]
 80042be:	69fa      	ldr	r2, [r7, #28]
 80042c0:	e841 2300 	strex	r3, r2, [r1]
 80042c4:	617b      	str	r3, [r7, #20]
   return(result);
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1e3      	bne.n	8004294 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2202      	movs	r2, #2
 80042d0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80042d6:	4619      	mov	r1, r3
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	f000 f83d 	bl	8004358 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042de:	e023      	b.n	8004328 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80042e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d009      	beq.n	8004300 <HAL_UART_IRQHandler+0x4f4>
 80042ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d003      	beq.n	8004300 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 f943 	bl	8004584 <UART_Transmit_IT>
    return;
 80042fe:	e014      	b.n	800432a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00e      	beq.n	800432a <HAL_UART_IRQHandler+0x51e>
 800430c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004310:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004314:	2b00      	cmp	r3, #0
 8004316:	d008      	beq.n	800432a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f000 f983 	bl	8004624 <UART_EndTransmit_IT>
    return;
 800431e:	e004      	b.n	800432a <HAL_UART_IRQHandler+0x51e>
    return;
 8004320:	bf00      	nop
 8004322:	e002      	b.n	800432a <HAL_UART_IRQHandler+0x51e>
      return;
 8004324:	bf00      	nop
 8004326:	e000      	b.n	800432a <HAL_UART_IRQHandler+0x51e>
      return;
 8004328:	bf00      	nop
  }
}
 800432a:	37e8      	adds	r7, #232	@ 0xe8
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800434c:	bf00      	nop
 800434e:	370c      	adds	r7, #12
 8004350:	46bd      	mov	sp, r7
 8004352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004356:	4770      	bx	lr

08004358 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	460b      	mov	r3, r1
 8004362:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	603b      	str	r3, [r7, #0]
 800437c:	4613      	mov	r3, r2
 800437e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004380:	e03b      	b.n	80043fa <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004382:	6a3b      	ldr	r3, [r7, #32]
 8004384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004388:	d037      	beq.n	80043fa <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800438a:	f7fd fccd 	bl	8001d28 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	6a3a      	ldr	r2, [r7, #32]
 8004396:	429a      	cmp	r2, r3
 8004398:	d302      	bcc.n	80043a0 <UART_WaitOnFlagUntilTimeout+0x30>
 800439a:	6a3b      	ldr	r3, [r7, #32]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	e03a      	b.n	800441a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	f003 0304 	and.w	r3, r3, #4
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d023      	beq.n	80043fa <UART_WaitOnFlagUntilTimeout+0x8a>
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	2b80      	cmp	r3, #128	@ 0x80
 80043b6:	d020      	beq.n	80043fa <UART_WaitOnFlagUntilTimeout+0x8a>
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	2b40      	cmp	r3, #64	@ 0x40
 80043bc:	d01d      	beq.n	80043fa <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0308 	and.w	r3, r3, #8
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d116      	bne.n	80043fa <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80043cc:	2300      	movs	r3, #0
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	617b      	str	r3, [r7, #20]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	617b      	str	r3, [r7, #20]
 80043e0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f000 f857 	bl	8004496 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2208      	movs	r2, #8
 80043ec:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	e00f      	b.n	800441a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	4013      	ands	r3, r2
 8004404:	68ba      	ldr	r2, [r7, #8]
 8004406:	429a      	cmp	r2, r3
 8004408:	bf0c      	ite	eq
 800440a:	2301      	moveq	r3, #1
 800440c:	2300      	movne	r3, #0
 800440e:	b2db      	uxtb	r3, r3
 8004410:	461a      	mov	r2, r3
 8004412:	79fb      	ldrb	r3, [r7, #7]
 8004414:	429a      	cmp	r2, r3
 8004416:	d0b4      	beq.n	8004382 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3718      	adds	r7, #24
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004422:	b480      	push	{r7}
 8004424:	b085      	sub	sp, #20
 8004426:	af00      	add	r7, sp, #0
 8004428:	60f8      	str	r0, [r7, #12]
 800442a:	60b9      	str	r1, [r7, #8]
 800442c:	4613      	mov	r3, r2
 800442e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	88fa      	ldrh	r2, [r7, #6]
 800443a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	88fa      	ldrh	r2, [r7, #6]
 8004440:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2222      	movs	r2, #34	@ 0x22
 800444c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d007      	beq.n	8004468 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68da      	ldr	r2, [r3, #12]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004466:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	695a      	ldr	r2, [r3, #20]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f042 0201 	orr.w	r2, r2, #1
 8004476:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68da      	ldr	r2, [r3, #12]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f042 0220 	orr.w	r2, r2, #32
 8004486:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004496:	b480      	push	{r7}
 8004498:	b095      	sub	sp, #84	@ 0x54
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	330c      	adds	r3, #12
 80044a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044a8:	e853 3f00 	ldrex	r3, [r3]
 80044ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80044ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	330c      	adds	r3, #12
 80044bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80044be:	643a      	str	r2, [r7, #64]	@ 0x40
 80044c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80044c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044c6:	e841 2300 	strex	r3, r2, [r1]
 80044ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1e5      	bne.n	800449e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	3314      	adds	r3, #20
 80044d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044da:	6a3b      	ldr	r3, [r7, #32]
 80044dc:	e853 3f00 	ldrex	r3, [r3]
 80044e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80044e2:	69fb      	ldr	r3, [r7, #28]
 80044e4:	f023 0301 	bic.w	r3, r3, #1
 80044e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	3314      	adds	r3, #20
 80044f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80044f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80044fa:	e841 2300 	strex	r3, r2, [r1]
 80044fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1e5      	bne.n	80044d2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450a:	2b01      	cmp	r3, #1
 800450c:	d119      	bne.n	8004542 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	330c      	adds	r3, #12
 8004514:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	e853 3f00 	ldrex	r3, [r3]
 800451c:	60bb      	str	r3, [r7, #8]
   return(result);
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	f023 0310 	bic.w	r3, r3, #16
 8004524:	647b      	str	r3, [r7, #68]	@ 0x44
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	330c      	adds	r3, #12
 800452c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800452e:	61ba      	str	r2, [r7, #24]
 8004530:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004532:	6979      	ldr	r1, [r7, #20]
 8004534:	69ba      	ldr	r2, [r7, #24]
 8004536:	e841 2300 	strex	r3, r2, [r1]
 800453a:	613b      	str	r3, [r7, #16]
   return(result);
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1e5      	bne.n	800450e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2220      	movs	r2, #32
 8004546:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004550:	bf00      	nop
 8004552:	3754      	adds	r7, #84	@ 0x54
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004568:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f7ff fee4 	bl	8004344 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800457c:	bf00      	nop
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004584:	b480      	push	{r7}
 8004586:	b085      	sub	sp, #20
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004592:	b2db      	uxtb	r3, r3
 8004594:	2b21      	cmp	r3, #33	@ 0x21
 8004596:	d13e      	bne.n	8004616 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045a0:	d114      	bne.n	80045cc <UART_Transmit_IT+0x48>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d110      	bne.n	80045cc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	881b      	ldrh	r3, [r3, #0]
 80045b4:	461a      	mov	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045be:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	1c9a      	adds	r2, r3, #2
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	621a      	str	r2, [r3, #32]
 80045ca:	e008      	b.n	80045de <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	1c59      	adds	r1, r3, #1
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	6211      	str	r1, [r2, #32]
 80045d6:	781a      	ldrb	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	3b01      	subs	r3, #1
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	4619      	mov	r1, r3
 80045ec:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10f      	bne.n	8004612 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68da      	ldr	r2, [r3, #12]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004600:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68da      	ldr	r2, [r3, #12]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004610:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004612:	2300      	movs	r3, #0
 8004614:	e000      	b.n	8004618 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004616:	2302      	movs	r3, #2
  }
}
 8004618:	4618      	mov	r0, r3
 800461a:	3714      	adds	r7, #20
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68da      	ldr	r2, [r3, #12]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800463a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2220      	movs	r2, #32
 8004640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f7ff fe73 	bl	8004330 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800464a:	2300      	movs	r3, #0
}
 800464c:	4618      	mov	r0, r3
 800464e:	3708      	adds	r7, #8
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b08c      	sub	sp, #48	@ 0x30
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b22      	cmp	r3, #34	@ 0x22
 8004666:	f040 80ae 	bne.w	80047c6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004672:	d117      	bne.n	80046a4 <UART_Receive_IT+0x50>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d113      	bne.n	80046a4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800467c:	2300      	movs	r3, #0
 800467e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004684:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	b29b      	uxth	r3, r3
 800468e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004692:	b29a      	uxth	r2, r3
 8004694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004696:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800469c:	1c9a      	adds	r2, r3, #2
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80046a2:	e026      	b.n	80046f2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80046aa:	2300      	movs	r3, #0
 80046ac:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046b6:	d007      	beq.n	80046c8 <UART_Receive_IT+0x74>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d10a      	bne.n	80046d6 <UART_Receive_IT+0x82>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d106      	bne.n	80046d6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	b2da      	uxtb	r2, r3
 80046d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046d2:	701a      	strb	r2, [r3, #0]
 80046d4:	e008      	b.n	80046e8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046e2:	b2da      	uxtb	r2, r3
 80046e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046e6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	3b01      	subs	r3, #1
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	4619      	mov	r1, r3
 8004700:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004702:	2b00      	cmp	r3, #0
 8004704:	d15d      	bne.n	80047c2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68da      	ldr	r2, [r3, #12]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f022 0220 	bic.w	r2, r2, #32
 8004714:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68da      	ldr	r2, [r3, #12]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004724:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	695a      	ldr	r2, [r3, #20]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f022 0201 	bic.w	r2, r2, #1
 8004734:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2220      	movs	r2, #32
 800473a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004748:	2b01      	cmp	r3, #1
 800474a:	d135      	bne.n	80047b8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2200      	movs	r2, #0
 8004750:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	330c      	adds	r3, #12
 8004758:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	e853 3f00 	ldrex	r3, [r3]
 8004760:	613b      	str	r3, [r7, #16]
   return(result);
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	f023 0310 	bic.w	r3, r3, #16
 8004768:	627b      	str	r3, [r7, #36]	@ 0x24
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	330c      	adds	r3, #12
 8004770:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004772:	623a      	str	r2, [r7, #32]
 8004774:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004776:	69f9      	ldr	r1, [r7, #28]
 8004778:	6a3a      	ldr	r2, [r7, #32]
 800477a:	e841 2300 	strex	r3, r2, [r1]
 800477e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1e5      	bne.n	8004752 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0310 	and.w	r3, r3, #16
 8004790:	2b10      	cmp	r3, #16
 8004792:	d10a      	bne.n	80047aa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004794:	2300      	movs	r3, #0
 8004796:	60fb      	str	r3, [r7, #12]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	60fb      	str	r3, [r7, #12]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	60fb      	str	r3, [r7, #12]
 80047a8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80047ae:	4619      	mov	r1, r3
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f7ff fdd1 	bl	8004358 <HAL_UARTEx_RxEventCallback>
 80047b6:	e002      	b.n	80047be <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f7fd f9af 	bl	8001b1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80047be:	2300      	movs	r3, #0
 80047c0:	e002      	b.n	80047c8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80047c2:	2300      	movs	r3, #0
 80047c4:	e000      	b.n	80047c8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80047c6:	2302      	movs	r3, #2
  }
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3730      	adds	r7, #48	@ 0x30
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047d4:	b0c0      	sub	sp, #256	@ 0x100
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80047e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ec:	68d9      	ldr	r1, [r3, #12]
 80047ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	ea40 0301 	orr.w	r3, r0, r1
 80047f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80047fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004804:	691b      	ldr	r3, [r3, #16]
 8004806:	431a      	orrs	r2, r3
 8004808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	431a      	orrs	r2, r3
 8004810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004814:	69db      	ldr	r3, [r3, #28]
 8004816:	4313      	orrs	r3, r2
 8004818:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800481c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004828:	f021 010c 	bic.w	r1, r1, #12
 800482c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004836:	430b      	orrs	r3, r1
 8004838:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800483a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800484a:	6999      	ldr	r1, [r3, #24]
 800484c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	ea40 0301 	orr.w	r3, r0, r1
 8004856:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	4b8f      	ldr	r3, [pc, #572]	@ (8004a9c <UART_SetConfig+0x2cc>)
 8004860:	429a      	cmp	r2, r3
 8004862:	d005      	beq.n	8004870 <UART_SetConfig+0xa0>
 8004864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	4b8d      	ldr	r3, [pc, #564]	@ (8004aa0 <UART_SetConfig+0x2d0>)
 800486c:	429a      	cmp	r2, r3
 800486e:	d104      	bne.n	800487a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004870:	f7fe fee0 	bl	8003634 <HAL_RCC_GetPCLK2Freq>
 8004874:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004878:	e003      	b.n	8004882 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800487a:	f7fe fec7 	bl	800360c <HAL_RCC_GetPCLK1Freq>
 800487e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004886:	69db      	ldr	r3, [r3, #28]
 8004888:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800488c:	f040 810c 	bne.w	8004aa8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004890:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004894:	2200      	movs	r2, #0
 8004896:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800489a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800489e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80048a2:	4622      	mov	r2, r4
 80048a4:	462b      	mov	r3, r5
 80048a6:	1891      	adds	r1, r2, r2
 80048a8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80048aa:	415b      	adcs	r3, r3
 80048ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80048b2:	4621      	mov	r1, r4
 80048b4:	eb12 0801 	adds.w	r8, r2, r1
 80048b8:	4629      	mov	r1, r5
 80048ba:	eb43 0901 	adc.w	r9, r3, r1
 80048be:	f04f 0200 	mov.w	r2, #0
 80048c2:	f04f 0300 	mov.w	r3, #0
 80048c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048d2:	4690      	mov	r8, r2
 80048d4:	4699      	mov	r9, r3
 80048d6:	4623      	mov	r3, r4
 80048d8:	eb18 0303 	adds.w	r3, r8, r3
 80048dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80048e0:	462b      	mov	r3, r5
 80048e2:	eb49 0303 	adc.w	r3, r9, r3
 80048e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80048ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80048f6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80048fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80048fe:	460b      	mov	r3, r1
 8004900:	18db      	adds	r3, r3, r3
 8004902:	653b      	str	r3, [r7, #80]	@ 0x50
 8004904:	4613      	mov	r3, r2
 8004906:	eb42 0303 	adc.w	r3, r2, r3
 800490a:	657b      	str	r3, [r7, #84]	@ 0x54
 800490c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004910:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004914:	f7fb fccc 	bl	80002b0 <__aeabi_uldivmod>
 8004918:	4602      	mov	r2, r0
 800491a:	460b      	mov	r3, r1
 800491c:	4b61      	ldr	r3, [pc, #388]	@ (8004aa4 <UART_SetConfig+0x2d4>)
 800491e:	fba3 2302 	umull	r2, r3, r3, r2
 8004922:	095b      	lsrs	r3, r3, #5
 8004924:	011c      	lsls	r4, r3, #4
 8004926:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800492a:	2200      	movs	r2, #0
 800492c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004930:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004934:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004938:	4642      	mov	r2, r8
 800493a:	464b      	mov	r3, r9
 800493c:	1891      	adds	r1, r2, r2
 800493e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004940:	415b      	adcs	r3, r3
 8004942:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004944:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004948:	4641      	mov	r1, r8
 800494a:	eb12 0a01 	adds.w	sl, r2, r1
 800494e:	4649      	mov	r1, r9
 8004950:	eb43 0b01 	adc.w	fp, r3, r1
 8004954:	f04f 0200 	mov.w	r2, #0
 8004958:	f04f 0300 	mov.w	r3, #0
 800495c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004960:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004964:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004968:	4692      	mov	sl, r2
 800496a:	469b      	mov	fp, r3
 800496c:	4643      	mov	r3, r8
 800496e:	eb1a 0303 	adds.w	r3, sl, r3
 8004972:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004976:	464b      	mov	r3, r9
 8004978:	eb4b 0303 	adc.w	r3, fp, r3
 800497c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800498c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004990:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004994:	460b      	mov	r3, r1
 8004996:	18db      	adds	r3, r3, r3
 8004998:	643b      	str	r3, [r7, #64]	@ 0x40
 800499a:	4613      	mov	r3, r2
 800499c:	eb42 0303 	adc.w	r3, r2, r3
 80049a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80049a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80049a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80049aa:	f7fb fc81 	bl	80002b0 <__aeabi_uldivmod>
 80049ae:	4602      	mov	r2, r0
 80049b0:	460b      	mov	r3, r1
 80049b2:	4611      	mov	r1, r2
 80049b4:	4b3b      	ldr	r3, [pc, #236]	@ (8004aa4 <UART_SetConfig+0x2d4>)
 80049b6:	fba3 2301 	umull	r2, r3, r3, r1
 80049ba:	095b      	lsrs	r3, r3, #5
 80049bc:	2264      	movs	r2, #100	@ 0x64
 80049be:	fb02 f303 	mul.w	r3, r2, r3
 80049c2:	1acb      	subs	r3, r1, r3
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80049ca:	4b36      	ldr	r3, [pc, #216]	@ (8004aa4 <UART_SetConfig+0x2d4>)
 80049cc:	fba3 2302 	umull	r2, r3, r3, r2
 80049d0:	095b      	lsrs	r3, r3, #5
 80049d2:	005b      	lsls	r3, r3, #1
 80049d4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80049d8:	441c      	add	r4, r3
 80049da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049de:	2200      	movs	r2, #0
 80049e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80049e4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80049e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80049ec:	4642      	mov	r2, r8
 80049ee:	464b      	mov	r3, r9
 80049f0:	1891      	adds	r1, r2, r2
 80049f2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80049f4:	415b      	adcs	r3, r3
 80049f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80049fc:	4641      	mov	r1, r8
 80049fe:	1851      	adds	r1, r2, r1
 8004a00:	6339      	str	r1, [r7, #48]	@ 0x30
 8004a02:	4649      	mov	r1, r9
 8004a04:	414b      	adcs	r3, r1
 8004a06:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a08:	f04f 0200 	mov.w	r2, #0
 8004a0c:	f04f 0300 	mov.w	r3, #0
 8004a10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004a14:	4659      	mov	r1, fp
 8004a16:	00cb      	lsls	r3, r1, #3
 8004a18:	4651      	mov	r1, sl
 8004a1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a1e:	4651      	mov	r1, sl
 8004a20:	00ca      	lsls	r2, r1, #3
 8004a22:	4610      	mov	r0, r2
 8004a24:	4619      	mov	r1, r3
 8004a26:	4603      	mov	r3, r0
 8004a28:	4642      	mov	r2, r8
 8004a2a:	189b      	adds	r3, r3, r2
 8004a2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a30:	464b      	mov	r3, r9
 8004a32:	460a      	mov	r2, r1
 8004a34:	eb42 0303 	adc.w	r3, r2, r3
 8004a38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a48:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004a4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004a50:	460b      	mov	r3, r1
 8004a52:	18db      	adds	r3, r3, r3
 8004a54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a56:	4613      	mov	r3, r2
 8004a58:	eb42 0303 	adc.w	r3, r2, r3
 8004a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004a66:	f7fb fc23 	bl	80002b0 <__aeabi_uldivmod>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	4b0d      	ldr	r3, [pc, #52]	@ (8004aa4 <UART_SetConfig+0x2d4>)
 8004a70:	fba3 1302 	umull	r1, r3, r3, r2
 8004a74:	095b      	lsrs	r3, r3, #5
 8004a76:	2164      	movs	r1, #100	@ 0x64
 8004a78:	fb01 f303 	mul.w	r3, r1, r3
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	00db      	lsls	r3, r3, #3
 8004a80:	3332      	adds	r3, #50	@ 0x32
 8004a82:	4a08      	ldr	r2, [pc, #32]	@ (8004aa4 <UART_SetConfig+0x2d4>)
 8004a84:	fba2 2303 	umull	r2, r3, r2, r3
 8004a88:	095b      	lsrs	r3, r3, #5
 8004a8a:	f003 0207 	and.w	r2, r3, #7
 8004a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4422      	add	r2, r4
 8004a96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004a98:	e106      	b.n	8004ca8 <UART_SetConfig+0x4d8>
 8004a9a:	bf00      	nop
 8004a9c:	40011000 	.word	0x40011000
 8004aa0:	40011400 	.word	0x40011400
 8004aa4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004aa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004aac:	2200      	movs	r2, #0
 8004aae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004ab2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004ab6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004aba:	4642      	mov	r2, r8
 8004abc:	464b      	mov	r3, r9
 8004abe:	1891      	adds	r1, r2, r2
 8004ac0:	6239      	str	r1, [r7, #32]
 8004ac2:	415b      	adcs	r3, r3
 8004ac4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ac6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004aca:	4641      	mov	r1, r8
 8004acc:	1854      	adds	r4, r2, r1
 8004ace:	4649      	mov	r1, r9
 8004ad0:	eb43 0501 	adc.w	r5, r3, r1
 8004ad4:	f04f 0200 	mov.w	r2, #0
 8004ad8:	f04f 0300 	mov.w	r3, #0
 8004adc:	00eb      	lsls	r3, r5, #3
 8004ade:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ae2:	00e2      	lsls	r2, r4, #3
 8004ae4:	4614      	mov	r4, r2
 8004ae6:	461d      	mov	r5, r3
 8004ae8:	4643      	mov	r3, r8
 8004aea:	18e3      	adds	r3, r4, r3
 8004aec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004af0:	464b      	mov	r3, r9
 8004af2:	eb45 0303 	adc.w	r3, r5, r3
 8004af6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004b06:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004b0a:	f04f 0200 	mov.w	r2, #0
 8004b0e:	f04f 0300 	mov.w	r3, #0
 8004b12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004b16:	4629      	mov	r1, r5
 8004b18:	008b      	lsls	r3, r1, #2
 8004b1a:	4621      	mov	r1, r4
 8004b1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b20:	4621      	mov	r1, r4
 8004b22:	008a      	lsls	r2, r1, #2
 8004b24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004b28:	f7fb fbc2 	bl	80002b0 <__aeabi_uldivmod>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	460b      	mov	r3, r1
 8004b30:	4b60      	ldr	r3, [pc, #384]	@ (8004cb4 <UART_SetConfig+0x4e4>)
 8004b32:	fba3 2302 	umull	r2, r3, r3, r2
 8004b36:	095b      	lsrs	r3, r3, #5
 8004b38:	011c      	lsls	r4, r3, #4
 8004b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b44:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004b48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004b4c:	4642      	mov	r2, r8
 8004b4e:	464b      	mov	r3, r9
 8004b50:	1891      	adds	r1, r2, r2
 8004b52:	61b9      	str	r1, [r7, #24]
 8004b54:	415b      	adcs	r3, r3
 8004b56:	61fb      	str	r3, [r7, #28]
 8004b58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b5c:	4641      	mov	r1, r8
 8004b5e:	1851      	adds	r1, r2, r1
 8004b60:	6139      	str	r1, [r7, #16]
 8004b62:	4649      	mov	r1, r9
 8004b64:	414b      	adcs	r3, r1
 8004b66:	617b      	str	r3, [r7, #20]
 8004b68:	f04f 0200 	mov.w	r2, #0
 8004b6c:	f04f 0300 	mov.w	r3, #0
 8004b70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b74:	4659      	mov	r1, fp
 8004b76:	00cb      	lsls	r3, r1, #3
 8004b78:	4651      	mov	r1, sl
 8004b7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b7e:	4651      	mov	r1, sl
 8004b80:	00ca      	lsls	r2, r1, #3
 8004b82:	4610      	mov	r0, r2
 8004b84:	4619      	mov	r1, r3
 8004b86:	4603      	mov	r3, r0
 8004b88:	4642      	mov	r2, r8
 8004b8a:	189b      	adds	r3, r3, r2
 8004b8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b90:	464b      	mov	r3, r9
 8004b92:	460a      	mov	r2, r1
 8004b94:	eb42 0303 	adc.w	r3, r2, r3
 8004b98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ba6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004ba8:	f04f 0200 	mov.w	r2, #0
 8004bac:	f04f 0300 	mov.w	r3, #0
 8004bb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004bb4:	4649      	mov	r1, r9
 8004bb6:	008b      	lsls	r3, r1, #2
 8004bb8:	4641      	mov	r1, r8
 8004bba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bbe:	4641      	mov	r1, r8
 8004bc0:	008a      	lsls	r2, r1, #2
 8004bc2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004bc6:	f7fb fb73 	bl	80002b0 <__aeabi_uldivmod>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	460b      	mov	r3, r1
 8004bce:	4611      	mov	r1, r2
 8004bd0:	4b38      	ldr	r3, [pc, #224]	@ (8004cb4 <UART_SetConfig+0x4e4>)
 8004bd2:	fba3 2301 	umull	r2, r3, r3, r1
 8004bd6:	095b      	lsrs	r3, r3, #5
 8004bd8:	2264      	movs	r2, #100	@ 0x64
 8004bda:	fb02 f303 	mul.w	r3, r2, r3
 8004bde:	1acb      	subs	r3, r1, r3
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	3332      	adds	r3, #50	@ 0x32
 8004be4:	4a33      	ldr	r2, [pc, #204]	@ (8004cb4 <UART_SetConfig+0x4e4>)
 8004be6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bf0:	441c      	add	r4, r3
 8004bf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	673b      	str	r3, [r7, #112]	@ 0x70
 8004bfa:	677a      	str	r2, [r7, #116]	@ 0x74
 8004bfc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004c00:	4642      	mov	r2, r8
 8004c02:	464b      	mov	r3, r9
 8004c04:	1891      	adds	r1, r2, r2
 8004c06:	60b9      	str	r1, [r7, #8]
 8004c08:	415b      	adcs	r3, r3
 8004c0a:	60fb      	str	r3, [r7, #12]
 8004c0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c10:	4641      	mov	r1, r8
 8004c12:	1851      	adds	r1, r2, r1
 8004c14:	6039      	str	r1, [r7, #0]
 8004c16:	4649      	mov	r1, r9
 8004c18:	414b      	adcs	r3, r1
 8004c1a:	607b      	str	r3, [r7, #4]
 8004c1c:	f04f 0200 	mov.w	r2, #0
 8004c20:	f04f 0300 	mov.w	r3, #0
 8004c24:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c28:	4659      	mov	r1, fp
 8004c2a:	00cb      	lsls	r3, r1, #3
 8004c2c:	4651      	mov	r1, sl
 8004c2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c32:	4651      	mov	r1, sl
 8004c34:	00ca      	lsls	r2, r1, #3
 8004c36:	4610      	mov	r0, r2
 8004c38:	4619      	mov	r1, r3
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	4642      	mov	r2, r8
 8004c3e:	189b      	adds	r3, r3, r2
 8004c40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c42:	464b      	mov	r3, r9
 8004c44:	460a      	mov	r2, r1
 8004c46:	eb42 0303 	adc.w	r3, r2, r3
 8004c4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c56:	667a      	str	r2, [r7, #100]	@ 0x64
 8004c58:	f04f 0200 	mov.w	r2, #0
 8004c5c:	f04f 0300 	mov.w	r3, #0
 8004c60:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004c64:	4649      	mov	r1, r9
 8004c66:	008b      	lsls	r3, r1, #2
 8004c68:	4641      	mov	r1, r8
 8004c6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c6e:	4641      	mov	r1, r8
 8004c70:	008a      	lsls	r2, r1, #2
 8004c72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004c76:	f7fb fb1b 	bl	80002b0 <__aeabi_uldivmod>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8004cb4 <UART_SetConfig+0x4e4>)
 8004c80:	fba3 1302 	umull	r1, r3, r3, r2
 8004c84:	095b      	lsrs	r3, r3, #5
 8004c86:	2164      	movs	r1, #100	@ 0x64
 8004c88:	fb01 f303 	mul.w	r3, r1, r3
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	011b      	lsls	r3, r3, #4
 8004c90:	3332      	adds	r3, #50	@ 0x32
 8004c92:	4a08      	ldr	r2, [pc, #32]	@ (8004cb4 <UART_SetConfig+0x4e4>)
 8004c94:	fba2 2303 	umull	r2, r3, r2, r3
 8004c98:	095b      	lsrs	r3, r3, #5
 8004c9a:	f003 020f 	and.w	r2, r3, #15
 8004c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4422      	add	r2, r4
 8004ca6:	609a      	str	r2, [r3, #8]
}
 8004ca8:	bf00      	nop
 8004caa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cb4:	51eb851f 	.word	0x51eb851f

08004cb8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004cb8:	b084      	sub	sp, #16
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b084      	sub	sp, #16
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
 8004cc2:	f107 001c 	add.w	r0, r7, #28
 8004cc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004cca:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d123      	bne.n	8004d1a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cd6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004ce6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	68db      	ldr	r3, [r3, #12]
 8004cf2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004cfa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d105      	bne.n	8004d0e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 faa0 	bl	8005254 <USB_CoreReset>
 8004d14:	4603      	mov	r3, r0
 8004d16:	73fb      	strb	r3, [r7, #15]
 8004d18:	e01b      	b.n	8004d52 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 fa94 	bl	8005254 <USB_CoreReset>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004d30:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d106      	bne.n	8004d46 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d3c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	639a      	str	r2, [r3, #56]	@ 0x38
 8004d44:	e005      	b.n	8004d52 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d4a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004d52:	7fbb      	ldrb	r3, [r7, #30]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d10b      	bne.n	8004d70 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	f043 0206 	orr.w	r2, r3, #6
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f043 0220 	orr.w	r2, r3, #32
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d7c:	b004      	add	sp, #16
 8004d7e:	4770      	bx	lr

08004d80 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	f023 0201 	bic.w	r2, r3, #1
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	370c      	adds	r7, #12
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr

08004da2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b084      	sub	sp, #16
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
 8004daa:	460b      	mov	r3, r1
 8004dac:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004dae:	2300      	movs	r3, #0
 8004db0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004dbe:	78fb      	ldrb	r3, [r7, #3]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d115      	bne.n	8004df0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004dd0:	200a      	movs	r0, #10
 8004dd2:	f7fc ffb5 	bl	8001d40 <HAL_Delay>
      ms += 10U;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	330a      	adds	r3, #10
 8004dda:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 fa2b 	bl	8005238 <USB_GetMode>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d01e      	beq.n	8004e26 <USB_SetCurrentMode+0x84>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2bc7      	cmp	r3, #199	@ 0xc7
 8004dec:	d9f0      	bls.n	8004dd0 <USB_SetCurrentMode+0x2e>
 8004dee:	e01a      	b.n	8004e26 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004df0:	78fb      	ldrb	r3, [r7, #3]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d115      	bne.n	8004e22 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004e02:	200a      	movs	r0, #10
 8004e04:	f7fc ff9c 	bl	8001d40 <HAL_Delay>
      ms += 10U;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	330a      	adds	r3, #10
 8004e0c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f000 fa12 	bl	8005238 <USB_GetMode>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d005      	beq.n	8004e26 <USB_SetCurrentMode+0x84>
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2bc7      	cmp	r3, #199	@ 0xc7
 8004e1e:	d9f0      	bls.n	8004e02 <USB_SetCurrentMode+0x60>
 8004e20:	e001      	b.n	8004e26 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e005      	b.n	8004e32 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2bc8      	cmp	r3, #200	@ 0xc8
 8004e2a:	d101      	bne.n	8004e30 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e000      	b.n	8004e32 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3710      	adds	r7, #16
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
	...

08004e3c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e3c:	b084      	sub	sp, #16
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b086      	sub	sp, #24
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
 8004e46:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004e4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004e56:	2300      	movs	r3, #0
 8004e58:	613b      	str	r3, [r7, #16]
 8004e5a:	e009      	b.n	8004e70 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	3340      	adds	r3, #64	@ 0x40
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	4413      	add	r3, r2
 8004e66:	2200      	movs	r2, #0
 8004e68:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	613b      	str	r3, [r7, #16]
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	2b0e      	cmp	r3, #14
 8004e74:	d9f2      	bls.n	8004e5c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004e76:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d11c      	bne.n	8004eb8 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e8c:	f043 0302 	orr.w	r3, r3, #2
 8004e90:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e96:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ea2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eae:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	639a      	str	r2, [r3, #56]	@ 0x38
 8004eb6:	e00b      	b.n	8004ed0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ebc:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ec8:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	2300      	movs	r3, #0
 8004eda:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004edc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d10d      	bne.n	8004f00 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004ee4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d104      	bne.n	8004ef6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004eec:	2100      	movs	r1, #0
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 f968 	bl	80051c4 <USB_SetDevSpeed>
 8004ef4:	e008      	b.n	8004f08 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004ef6:	2101      	movs	r1, #1
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 f963 	bl	80051c4 <USB_SetDevSpeed>
 8004efe:	e003      	b.n	8004f08 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004f00:	2103      	movs	r1, #3
 8004f02:	6878      	ldr	r0, [r7, #4]
 8004f04:	f000 f95e 	bl	80051c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004f08:	2110      	movs	r1, #16
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f8fa 	bl	8005104 <USB_FlushTxFifo>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d001      	beq.n	8004f1a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f924 	bl	8005168 <USB_FlushRxFifo>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f30:	461a      	mov	r2, r3
 8004f32:	2300      	movs	r3, #0
 8004f34:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	2300      	movs	r3, #0
 8004f40:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f48:	461a      	mov	r2, r3
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f4e:	2300      	movs	r3, #0
 8004f50:	613b      	str	r3, [r7, #16]
 8004f52:	e043      	b.n	8004fdc <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	015a      	lsls	r2, r3, #5
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f6a:	d118      	bne.n	8004f9e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10a      	bne.n	8004f88 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	015a      	lsls	r2, r3, #5
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	4413      	add	r3, r2
 8004f7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f7e:	461a      	mov	r2, r3
 8004f80:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004f84:	6013      	str	r3, [r2, #0]
 8004f86:	e013      	b.n	8004fb0 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	015a      	lsls	r2, r3, #5
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	4413      	add	r3, r2
 8004f90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f94:	461a      	mov	r2, r3
 8004f96:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004f9a:	6013      	str	r3, [r2, #0]
 8004f9c:	e008      	b.n	8004fb0 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004faa:	461a      	mov	r2, r3
 8004fac:	2300      	movs	r3, #0
 8004fae:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	015a      	lsls	r2, r3, #5
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004fc2:	693b      	ldr	r3, [r7, #16]
 8004fc4:	015a      	lsls	r2, r3, #5
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	4413      	add	r3, r2
 8004fca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fce:	461a      	mov	r2, r3
 8004fd0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004fd4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	613b      	str	r3, [r7, #16]
 8004fdc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d3b5      	bcc.n	8004f54 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fe8:	2300      	movs	r3, #0
 8004fea:	613b      	str	r3, [r7, #16]
 8004fec:	e043      	b.n	8005076 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	015a      	lsls	r2, r3, #5
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005000:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005004:	d118      	bne.n	8005038 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10a      	bne.n	8005022 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	015a      	lsls	r2, r3, #5
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	4413      	add	r3, r2
 8005014:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005018:	461a      	mov	r2, r3
 800501a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800501e:	6013      	str	r3, [r2, #0]
 8005020:	e013      	b.n	800504a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	015a      	lsls	r2, r3, #5
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	4413      	add	r3, r2
 800502a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800502e:	461a      	mov	r2, r3
 8005030:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005034:	6013      	str	r3, [r2, #0]
 8005036:	e008      	b.n	800504a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	015a      	lsls	r2, r3, #5
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	4413      	add	r3, r2
 8005040:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005044:	461a      	mov	r2, r3
 8005046:	2300      	movs	r3, #0
 8005048:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	015a      	lsls	r2, r3, #5
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	4413      	add	r3, r2
 8005052:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005056:	461a      	mov	r2, r3
 8005058:	2300      	movs	r3, #0
 800505a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	015a      	lsls	r2, r3, #5
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	4413      	add	r3, r2
 8005064:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005068:	461a      	mov	r2, r3
 800506a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800506e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	3301      	adds	r3, #1
 8005074:	613b      	str	r3, [r7, #16]
 8005076:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800507a:	461a      	mov	r2, r3
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	4293      	cmp	r3, r2
 8005080:	d3b5      	bcc.n	8004fee <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005090:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005094:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80050a2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80050a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d105      	bne.n	80050b8 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	f043 0210 	orr.w	r2, r3, #16
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	699a      	ldr	r2, [r3, #24]
 80050bc:	4b10      	ldr	r3, [pc, #64]	@ (8005100 <USB_DevInit+0x2c4>)
 80050be:	4313      	orrs	r3, r2
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80050c4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d005      	beq.n	80050d8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	699b      	ldr	r3, [r3, #24]
 80050d0:	f043 0208 	orr.w	r2, r3, #8
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80050d8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d107      	bne.n	80050f0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	699b      	ldr	r3, [r3, #24]
 80050e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80050e8:	f043 0304 	orr.w	r3, r3, #4
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80050f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3718      	adds	r7, #24
 80050f6:	46bd      	mov	sp, r7
 80050f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050fc:	b004      	add	sp, #16
 80050fe:	4770      	bx	lr
 8005100:	803c3800 	.word	0x803c3800

08005104 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800510e:	2300      	movs	r3, #0
 8005110:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	3301      	adds	r3, #1
 8005116:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800511e:	d901      	bls.n	8005124 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e01b      	b.n	800515c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	2b00      	cmp	r3, #0
 800512a:	daf2      	bge.n	8005112 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800512c:	2300      	movs	r3, #0
 800512e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	019b      	lsls	r3, r3, #6
 8005134:	f043 0220 	orr.w	r2, r3, #32
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	3301      	adds	r3, #1
 8005140:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005148:	d901      	bls.n	800514e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e006      	b.n	800515c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	691b      	ldr	r3, [r3, #16]
 8005152:	f003 0320 	and.w	r3, r3, #32
 8005156:	2b20      	cmp	r3, #32
 8005158:	d0f0      	beq.n	800513c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3714      	adds	r7, #20
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005170:	2300      	movs	r3, #0
 8005172:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	3301      	adds	r3, #1
 8005178:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005180:	d901      	bls.n	8005186 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e018      	b.n	80051b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	2b00      	cmp	r3, #0
 800518c:	daf2      	bge.n	8005174 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800518e:	2300      	movs	r3, #0
 8005190:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2210      	movs	r2, #16
 8005196:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	3301      	adds	r3, #1
 800519c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80051a4:	d901      	bls.n	80051aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e006      	b.n	80051b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	f003 0310 	and.w	r3, r3, #16
 80051b2:	2b10      	cmp	r3, #16
 80051b4:	d0f0      	beq.n	8005198 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3714      	adds	r7, #20
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	460b      	mov	r3, r1
 80051ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	78fb      	ldrb	r3, [r7, #3]
 80051de:	68f9      	ldr	r1, [r7, #12]
 80051e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80051e4:	4313      	orrs	r3, r2
 80051e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr

080051f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b085      	sub	sp, #20
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005210:	f023 0303 	bic.w	r3, r3, #3
 8005214:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005224:	f043 0302 	orr.w	r3, r3, #2
 8005228:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	4618      	mov	r0, r3
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	f003 0301 	and.w	r3, r3, #1
}
 8005248:	4618      	mov	r0, r3
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800525c:	2300      	movs	r3, #0
 800525e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	3301      	adds	r3, #1
 8005264:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800526c:	d901      	bls.n	8005272 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e01b      	b.n	80052aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	691b      	ldr	r3, [r3, #16]
 8005276:	2b00      	cmp	r3, #0
 8005278:	daf2      	bge.n	8005260 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800527a:	2300      	movs	r3, #0
 800527c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	f043 0201 	orr.w	r2, r3, #1
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	3301      	adds	r3, #1
 800528e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005296:	d901      	bls.n	800529c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005298:	2303      	movs	r3, #3
 800529a:	e006      	b.n	80052aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	f003 0301 	and.w	r3, r3, #1
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d0f0      	beq.n	800528a <USB_CoreReset+0x36>

  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
	...

080052b8 <__NVIC_SetPriority>:
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	4603      	mov	r3, r0
 80052c0:	6039      	str	r1, [r7, #0]
 80052c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	db0a      	blt.n	80052e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	b2da      	uxtb	r2, r3
 80052d0:	490c      	ldr	r1, [pc, #48]	@ (8005304 <__NVIC_SetPriority+0x4c>)
 80052d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052d6:	0112      	lsls	r2, r2, #4
 80052d8:	b2d2      	uxtb	r2, r2
 80052da:	440b      	add	r3, r1
 80052dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80052e0:	e00a      	b.n	80052f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	b2da      	uxtb	r2, r3
 80052e6:	4908      	ldr	r1, [pc, #32]	@ (8005308 <__NVIC_SetPriority+0x50>)
 80052e8:	79fb      	ldrb	r3, [r7, #7]
 80052ea:	f003 030f 	and.w	r3, r3, #15
 80052ee:	3b04      	subs	r3, #4
 80052f0:	0112      	lsls	r2, r2, #4
 80052f2:	b2d2      	uxtb	r2, r2
 80052f4:	440b      	add	r3, r1
 80052f6:	761a      	strb	r2, [r3, #24]
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr
 8005304:	e000e100 	.word	0xe000e100
 8005308:	e000ed00 	.word	0xe000ed00

0800530c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800530c:	b580      	push	{r7, lr}
 800530e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005310:	2100      	movs	r1, #0
 8005312:	f06f 0004 	mvn.w	r0, #4
 8005316:	f7ff ffcf 	bl	80052b8 <__NVIC_SetPriority>
#endif
}
 800531a:	bf00      	nop
 800531c:	bd80      	pop	{r7, pc}
	...

08005320 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005326:	f3ef 8305 	mrs	r3, IPSR
 800532a:	603b      	str	r3, [r7, #0]
  return(result);
 800532c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800532e:	2b00      	cmp	r3, #0
 8005330:	d003      	beq.n	800533a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005332:	f06f 0305 	mvn.w	r3, #5
 8005336:	607b      	str	r3, [r7, #4]
 8005338:	e00c      	b.n	8005354 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800533a:	4b0a      	ldr	r3, [pc, #40]	@ (8005364 <osKernelInitialize+0x44>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d105      	bne.n	800534e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005342:	4b08      	ldr	r3, [pc, #32]	@ (8005364 <osKernelInitialize+0x44>)
 8005344:	2201      	movs	r2, #1
 8005346:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005348:	2300      	movs	r3, #0
 800534a:	607b      	str	r3, [r7, #4]
 800534c:	e002      	b.n	8005354 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800534e:	f04f 33ff 	mov.w	r3, #4294967295
 8005352:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005354:	687b      	ldr	r3, [r7, #4]
}
 8005356:	4618      	mov	r0, r3
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	20000b18 	.word	0x20000b18

08005368 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800536e:	f3ef 8305 	mrs	r3, IPSR
 8005372:	603b      	str	r3, [r7, #0]
  return(result);
 8005374:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005376:	2b00      	cmp	r3, #0
 8005378:	d003      	beq.n	8005382 <osKernelStart+0x1a>
    stat = osErrorISR;
 800537a:	f06f 0305 	mvn.w	r3, #5
 800537e:	607b      	str	r3, [r7, #4]
 8005380:	e010      	b.n	80053a4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005382:	4b0b      	ldr	r3, [pc, #44]	@ (80053b0 <osKernelStart+0x48>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2b01      	cmp	r3, #1
 8005388:	d109      	bne.n	800539e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800538a:	f7ff ffbf 	bl	800530c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800538e:	4b08      	ldr	r3, [pc, #32]	@ (80053b0 <osKernelStart+0x48>)
 8005390:	2202      	movs	r2, #2
 8005392:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005394:	f001 fb1e 	bl	80069d4 <vTaskStartScheduler>
      stat = osOK;
 8005398:	2300      	movs	r3, #0
 800539a:	607b      	str	r3, [r7, #4]
 800539c:	e002      	b.n	80053a4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800539e:	f04f 33ff 	mov.w	r3, #4294967295
 80053a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80053a4:	687b      	ldr	r3, [r7, #4]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3708      	adds	r7, #8
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	20000b18 	.word	0x20000b18

080053b4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b08e      	sub	sp, #56	@ 0x38
 80053b8:	af04      	add	r7, sp, #16
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80053c0:	2300      	movs	r3, #0
 80053c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053c4:	f3ef 8305 	mrs	r3, IPSR
 80053c8:	617b      	str	r3, [r7, #20]
  return(result);
 80053ca:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d17e      	bne.n	80054ce <osThreadNew+0x11a>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d07b      	beq.n	80054ce <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80053d6:	2380      	movs	r3, #128	@ 0x80
 80053d8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80053da:	2318      	movs	r3, #24
 80053dc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80053de:	2300      	movs	r3, #0
 80053e0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80053e2:	f04f 33ff 	mov.w	r3, #4294967295
 80053e6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d045      	beq.n	800547a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d002      	beq.n	80053fc <osThreadNew+0x48>
        name = attr->name;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d002      	beq.n	800540a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d008      	beq.n	8005422 <osThreadNew+0x6e>
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	2b38      	cmp	r3, #56	@ 0x38
 8005414:	d805      	bhi.n	8005422 <osThreadNew+0x6e>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	2b00      	cmp	r3, #0
 8005420:	d001      	beq.n	8005426 <osThreadNew+0x72>
        return (NULL);
 8005422:	2300      	movs	r3, #0
 8005424:	e054      	b.n	80054d0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	089b      	lsrs	r3, r3, #2
 8005434:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00e      	beq.n	800545c <osThreadNew+0xa8>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	2ba7      	cmp	r3, #167	@ 0xa7
 8005444:	d90a      	bls.n	800545c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800544a:	2b00      	cmp	r3, #0
 800544c:	d006      	beq.n	800545c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d002      	beq.n	800545c <osThreadNew+0xa8>
        mem = 1;
 8005456:	2301      	movs	r3, #1
 8005458:	61bb      	str	r3, [r7, #24]
 800545a:	e010      	b.n	800547e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d10c      	bne.n	800547e <osThreadNew+0xca>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d108      	bne.n	800547e <osThreadNew+0xca>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d104      	bne.n	800547e <osThreadNew+0xca>
          mem = 0;
 8005474:	2300      	movs	r3, #0
 8005476:	61bb      	str	r3, [r7, #24]
 8005478:	e001      	b.n	800547e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800547a:	2300      	movs	r3, #0
 800547c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	2b01      	cmp	r3, #1
 8005482:	d110      	bne.n	80054a6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800548c:	9202      	str	r2, [sp, #8]
 800548e:	9301      	str	r3, [sp, #4]
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	9300      	str	r3, [sp, #0]
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	6a3a      	ldr	r2, [r7, #32]
 8005498:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f001 f8dc 	bl	8006658 <xTaskCreateStatic>
 80054a0:	4603      	mov	r3, r0
 80054a2:	613b      	str	r3, [r7, #16]
 80054a4:	e013      	b.n	80054ce <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d110      	bne.n	80054ce <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80054ac:	6a3b      	ldr	r3, [r7, #32]
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	f107 0310 	add.w	r3, r7, #16
 80054b4:	9301      	str	r3, [sp, #4]
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f001 f92a 	bl	8006718 <xTaskCreate>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d001      	beq.n	80054ce <osThreadNew+0x11a>
            hTask = NULL;
 80054ca:	2300      	movs	r3, #0
 80054cc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80054ce:	693b      	ldr	r3, [r7, #16]
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3728      	adds	r7, #40	@ 0x28
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80054d8:	b580      	push	{r7, lr}
 80054da:	b086      	sub	sp, #24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80054e0:	2300      	movs	r3, #0
 80054e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80054e4:	f3ef 8305 	mrs	r3, IPSR
 80054e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80054ea:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d12d      	bne.n	800554c <osEventFlagsNew+0x74>
    mem = -1;
 80054f0:	f04f 33ff 	mov.w	r3, #4294967295
 80054f4:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d015      	beq.n	8005528 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d006      	beq.n	8005512 <osEventFlagsNew+0x3a>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	2b1f      	cmp	r3, #31
 800550a:	d902      	bls.n	8005512 <osEventFlagsNew+0x3a>
        mem = 1;
 800550c:	2301      	movs	r3, #1
 800550e:	613b      	str	r3, [r7, #16]
 8005510:	e00c      	b.n	800552c <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d108      	bne.n	800552c <osEventFlagsNew+0x54>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d104      	bne.n	800552c <osEventFlagsNew+0x54>
          mem = 0;
 8005522:	2300      	movs	r3, #0
 8005524:	613b      	str	r3, [r7, #16]
 8005526:	e001      	b.n	800552c <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8005528:	2300      	movs	r3, #0
 800552a:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d106      	bne.n	8005540 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	4618      	mov	r0, r3
 8005538:	f000 f8ea 	bl	8005710 <xEventGroupCreateStatic>
 800553c:	6178      	str	r0, [r7, #20]
 800553e:	e005      	b.n	800554c <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d102      	bne.n	800554c <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8005546:	f000 f91c 	bl	8005782 <xEventGroupCreate>
 800554a:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800554c:	697b      	ldr	r3, [r7, #20]
}
 800554e:	4618      	mov	r0, r3
 8005550:	3718      	adds	r7, #24
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
	...

08005558 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8005558:	b580      	push	{r7, lr}
 800555a:	b086      	sub	sp, #24
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d003      	beq.n	8005574 <osEventFlagsSet+0x1c>
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005572:	d303      	bcc.n	800557c <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 8005574:	f06f 0303 	mvn.w	r3, #3
 8005578:	617b      	str	r3, [r7, #20]
 800557a:	e028      	b.n	80055ce <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800557c:	f3ef 8305 	mrs	r3, IPSR
 8005580:	60fb      	str	r3, [r7, #12]
  return(result);
 8005582:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005584:	2b00      	cmp	r3, #0
 8005586:	d01d      	beq.n	80055c4 <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8005588:	2300      	movs	r3, #0
 800558a:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800558c:	f107 0308 	add.w	r3, r7, #8
 8005590:	461a      	mov	r2, r3
 8005592:	6839      	ldr	r1, [r7, #0]
 8005594:	6938      	ldr	r0, [r7, #16]
 8005596:	f000 fa9d 	bl	8005ad4 <xEventGroupSetBitsFromISR>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d103      	bne.n	80055a8 <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 80055a0:	f06f 0302 	mvn.w	r3, #2
 80055a4:	617b      	str	r3, [r7, #20]
 80055a6:	e012      	b.n	80055ce <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00d      	beq.n	80055ce <osEventFlagsSet+0x76>
 80055b2:	4b09      	ldr	r3, [pc, #36]	@ (80055d8 <osEventFlagsSet+0x80>)
 80055b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055b8:	601a      	str	r2, [r3, #0]
 80055ba:	f3bf 8f4f 	dsb	sy
 80055be:	f3bf 8f6f 	isb	sy
 80055c2:	e004      	b.n	80055ce <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80055c4:	6839      	ldr	r1, [r7, #0]
 80055c6:	6938      	ldr	r0, [r7, #16]
 80055c8:	f000 f9c8 	bl	800595c <xEventGroupSetBits>
 80055cc:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80055ce:	697b      	ldr	r3, [r7, #20]
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3718      	adds	r7, #24
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	e000ed04 	.word	0xe000ed04

080055dc <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80055dc:	b580      	push	{r7, lr}
 80055de:	b08c      	sub	sp, #48	@ 0x30
 80055e0:	af02      	add	r7, sp, #8
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
 80055e8:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d003      	beq.n	80055fc <osEventFlagsWait+0x20>
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80055fa:	d303      	bcc.n	8005604 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 80055fc:	f06f 0303 	mvn.w	r3, #3
 8005600:	61fb      	str	r3, [r7, #28]
 8005602:	e04b      	b.n	800569c <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005604:	f3ef 8305 	mrs	r3, IPSR
 8005608:	617b      	str	r3, [r7, #20]
  return(result);
 800560a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800560c:	2b00      	cmp	r3, #0
 800560e:	d003      	beq.n	8005618 <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 8005610:	f06f 0305 	mvn.w	r3, #5
 8005614:	61fb      	str	r3, [r7, #28]
 8005616:	e041      	b.n	800569c <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f003 0301 	and.w	r3, r3, #1
 800561e:	2b00      	cmp	r3, #0
 8005620:	d002      	beq.n	8005628 <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 8005622:	2301      	movs	r3, #1
 8005624:	627b      	str	r3, [r7, #36]	@ 0x24
 8005626:	e001      	b.n	800562c <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 8005628:	2300      	movs	r3, #0
 800562a:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f003 0302 	and.w	r3, r3, #2
 8005632:	2b00      	cmp	r3, #0
 8005634:	d002      	beq.n	800563c <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 8005636:	2300      	movs	r3, #0
 8005638:	623b      	str	r3, [r7, #32]
 800563a:	e001      	b.n	8005640 <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 800563c:	2301      	movs	r3, #1
 800563e:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005646:	6a3a      	ldr	r2, [r7, #32]
 8005648:	68b9      	ldr	r1, [r7, #8]
 800564a:	69b8      	ldr	r0, [r7, #24]
 800564c:	f000 f8b4 	bl	80057b8 <xEventGroupWaitBits>
 8005650:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	2b00      	cmp	r3, #0
 800565a:	d010      	beq.n	800567e <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 800565c:	68ba      	ldr	r2, [r7, #8]
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	4013      	ands	r3, r2
 8005662:	68ba      	ldr	r2, [r7, #8]
 8005664:	429a      	cmp	r2, r3
 8005666:	d019      	beq.n	800569c <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 800566e:	f06f 0301 	mvn.w	r3, #1
 8005672:	61fb      	str	r3, [r7, #28]
 8005674:	e012      	b.n	800569c <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8005676:	f06f 0302 	mvn.w	r3, #2
 800567a:	61fb      	str	r3, [r7, #28]
 800567c:	e00e      	b.n	800569c <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	4013      	ands	r3, r2
 8005684:	2b00      	cmp	r3, #0
 8005686:	d109      	bne.n	800569c <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d003      	beq.n	8005696 <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 800568e:	f06f 0301 	mvn.w	r3, #1
 8005692:	61fb      	str	r3, [r7, #28]
 8005694:	e002      	b.n	800569c <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8005696:	f06f 0302 	mvn.w	r3, #2
 800569a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800569c:	69fb      	ldr	r3, [r7, #28]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3728      	adds	r7, #40	@ 0x28
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
	...

080056a8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	4a07      	ldr	r2, [pc, #28]	@ (80056d4 <vApplicationGetIdleTaskMemory+0x2c>)
 80056b8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	4a06      	ldr	r2, [pc, #24]	@ (80056d8 <vApplicationGetIdleTaskMemory+0x30>)
 80056be:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2280      	movs	r2, #128	@ 0x80
 80056c4:	601a      	str	r2, [r3, #0]
}
 80056c6:	bf00      	nop
 80056c8:	3714      	adds	r7, #20
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	20000b1c 	.word	0x20000b1c
 80056d8:	20000bc4 	.word	0x20000bc4

080056dc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80056dc:	b480      	push	{r7}
 80056de:	b085      	sub	sp, #20
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	4a07      	ldr	r2, [pc, #28]	@ (8005708 <vApplicationGetTimerTaskMemory+0x2c>)
 80056ec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	4a06      	ldr	r2, [pc, #24]	@ (800570c <vApplicationGetTimerTaskMemory+0x30>)
 80056f2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80056fa:	601a      	str	r2, [r3, #0]
}
 80056fc:	bf00      	nop
 80056fe:	3714      	adds	r7, #20
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr
 8005708:	20000dc4 	.word	0x20000dc4
 800570c:	20000e6c 	.word	0x20000e6c

08005710 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d10b      	bne.n	8005736 <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800571e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005722:	f383 8811 	msr	BASEPRI, r3
 8005726:	f3bf 8f6f 	isb	sy
 800572a:	f3bf 8f4f 	dsb	sy
 800572e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005730:	bf00      	nop
 8005732:	bf00      	nop
 8005734:	e7fd      	b.n	8005732 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8005736:	2320      	movs	r3, #32
 8005738:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	2b20      	cmp	r3, #32
 800573e:	d00b      	beq.n	8005758 <xEventGroupCreateStatic+0x48>
	__asm volatile
 8005740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005744:	f383 8811 	msr	BASEPRI, r3
 8005748:	f3bf 8f6f 	isb	sy
 800574c:	f3bf 8f4f 	dsb	sy
 8005750:	60fb      	str	r3, [r7, #12]
}
 8005752:	bf00      	nop
 8005754:	bf00      	nop
 8005756:	e7fd      	b.n	8005754 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00a      	beq.n	8005778 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	2200      	movs	r2, #0
 8005766:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	3304      	adds	r3, #4
 800576c:	4618      	mov	r0, r3
 800576e:	f000 f9c5 	bl	8005afc <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	2201      	movs	r2, #1
 8005776:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8005778:	697b      	ldr	r3, [r7, #20]
	}
 800577a:	4618      	mov	r0, r3
 800577c:	3718      	adds	r7, #24
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8005782:	b580      	push	{r7, lr}
 8005784:	b082      	sub	sp, #8
 8005786:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8005788:	2020      	movs	r0, #32
 800578a:	f002 fcef 	bl	800816c <pvPortMalloc>
 800578e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00a      	beq.n	80057ac <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	3304      	adds	r3, #4
 80057a0:	4618      	mov	r0, r3
 80057a2:	f000 f9ab 	bl	8005afc <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2200      	movs	r2, #0
 80057aa:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80057ac:	687b      	ldr	r3, [r7, #4]
	}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3708      	adds	r7, #8
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
	...

080057b8 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b090      	sub	sp, #64	@ 0x40
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
 80057c4:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80057ca:	2300      	movs	r3, #0
 80057cc:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80057ce:	2300      	movs	r3, #0
 80057d0:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d10b      	bne.n	80057f0 <xEventGroupWaitBits+0x38>
	__asm volatile
 80057d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057dc:	f383 8811 	msr	BASEPRI, r3
 80057e0:	f3bf 8f6f 	isb	sy
 80057e4:	f3bf 8f4f 	dsb	sy
 80057e8:	623b      	str	r3, [r7, #32]
}
 80057ea:	bf00      	nop
 80057ec:	bf00      	nop
 80057ee:	e7fd      	b.n	80057ec <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80057f6:	d30b      	bcc.n	8005810 <xEventGroupWaitBits+0x58>
	__asm volatile
 80057f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057fc:	f383 8811 	msr	BASEPRI, r3
 8005800:	f3bf 8f6f 	isb	sy
 8005804:	f3bf 8f4f 	dsb	sy
 8005808:	61fb      	str	r3, [r7, #28]
}
 800580a:	bf00      	nop
 800580c:	bf00      	nop
 800580e:	e7fd      	b.n	800580c <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d10b      	bne.n	800582e <xEventGroupWaitBits+0x76>
	__asm volatile
 8005816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800581a:	f383 8811 	msr	BASEPRI, r3
 800581e:	f3bf 8f6f 	isb	sy
 8005822:	f3bf 8f4f 	dsb	sy
 8005826:	61bb      	str	r3, [r7, #24]
}
 8005828:	bf00      	nop
 800582a:	bf00      	nop
 800582c:	e7fd      	b.n	800582a <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800582e:	f001 fdd7 	bl	80073e0 <xTaskGetSchedulerState>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d102      	bne.n	800583e <xEventGroupWaitBits+0x86>
 8005838:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800583a:	2b00      	cmp	r3, #0
 800583c:	d101      	bne.n	8005842 <xEventGroupWaitBits+0x8a>
 800583e:	2301      	movs	r3, #1
 8005840:	e000      	b.n	8005844 <xEventGroupWaitBits+0x8c>
 8005842:	2300      	movs	r3, #0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d10b      	bne.n	8005860 <xEventGroupWaitBits+0xa8>
	__asm volatile
 8005848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800584c:	f383 8811 	msr	BASEPRI, r3
 8005850:	f3bf 8f6f 	isb	sy
 8005854:	f3bf 8f4f 	dsb	sy
 8005858:	617b      	str	r3, [r7, #20]
}
 800585a:	bf00      	nop
 800585c:	bf00      	nop
 800585e:	e7fd      	b.n	800585c <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 8005860:	f001 f928 	bl	8006ab4 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8005864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800586a:	683a      	ldr	r2, [r7, #0]
 800586c:	68b9      	ldr	r1, [r7, #8]
 800586e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005870:	f000 f90d 	bl	8005a8e <prvTestWaitCondition>
 8005874:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 8005876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00e      	beq.n	800589a <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800587c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800587e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8005880:	2300      	movs	r3, #0
 8005882:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d028      	beq.n	80058dc <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800588a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	43db      	mvns	r3, r3
 8005892:	401a      	ands	r2, r3
 8005894:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005896:	601a      	str	r2, [r3, #0]
 8005898:	e020      	b.n	80058dc <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800589a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800589c:	2b00      	cmp	r3, #0
 800589e:	d104      	bne.n	80058aa <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80058a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 80058a4:	2301      	movs	r3, #1
 80058a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80058a8:	e018      	b.n	80058dc <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d003      	beq.n	80058b8 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80058b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058b6:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d003      	beq.n	80058c6 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80058be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058c0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80058c4:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80058c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058c8:	1d18      	adds	r0, r3, #4
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ce:	4313      	orrs	r3, r2
 80058d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058d2:	4619      	mov	r1, r3
 80058d4:	f001 faf0 	bl	8006eb8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80058d8:	2300      	movs	r3, #0
 80058da:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80058dc:	f001 f8f8 	bl	8006ad0 <xTaskResumeAll>
 80058e0:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80058e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d031      	beq.n	800594c <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 80058e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d107      	bne.n	80058fe <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 80058ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005958 <xEventGroupWaitBits+0x1a0>)
 80058f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058f4:	601a      	str	r2, [r3, #0]
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80058fe:	f001 fdfd 	bl	80074fc <uxTaskResetEventItemValue>
 8005902:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8005904:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d11a      	bne.n	8005944 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800590e:	f002 fb0b 	bl	8007f28 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8005912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8005918:	683a      	ldr	r2, [r7, #0]
 800591a:	68b9      	ldr	r1, [r7, #8]
 800591c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800591e:	f000 f8b6 	bl	8005a8e <prvTestWaitCondition>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d009      	beq.n	800593c <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d006      	beq.n	800593c <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800592e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	43db      	mvns	r3, r3
 8005936:	401a      	ands	r2, r3
 8005938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800593a:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800593c:	2301      	movs	r3, #1
 800593e:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8005940:	f002 fb24 	bl	8007f8c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005944:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005946:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800594a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800594c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800594e:	4618      	mov	r0, r3
 8005950:	3740      	adds	r7, #64	@ 0x40
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	e000ed04 	.word	0xe000ed04

0800595c <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b08e      	sub	sp, #56	@ 0x38
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8005966:	2300      	movs	r3, #0
 8005968:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800596e:	2300      	movs	r3, #0
 8005970:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d10b      	bne.n	8005990 <xEventGroupSetBits+0x34>
	__asm volatile
 8005978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800597c:	f383 8811 	msr	BASEPRI, r3
 8005980:	f3bf 8f6f 	isb	sy
 8005984:	f3bf 8f4f 	dsb	sy
 8005988:	613b      	str	r3, [r7, #16]
}
 800598a:	bf00      	nop
 800598c:	bf00      	nop
 800598e:	e7fd      	b.n	800598c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005996:	d30b      	bcc.n	80059b0 <xEventGroupSetBits+0x54>
	__asm volatile
 8005998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800599c:	f383 8811 	msr	BASEPRI, r3
 80059a0:	f3bf 8f6f 	isb	sy
 80059a4:	f3bf 8f4f 	dsb	sy
 80059a8:	60fb      	str	r3, [r7, #12]
}
 80059aa:	bf00      	nop
 80059ac:	bf00      	nop
 80059ae:	e7fd      	b.n	80059ac <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80059b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059b2:	3304      	adds	r3, #4
 80059b4:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80059b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b8:	3308      	adds	r3, #8
 80059ba:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80059bc:	f001 f87a 	bl	8006ab4 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80059c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80059c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	431a      	orrs	r2, r3
 80059ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059d0:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80059d2:	e03c      	b.n	8005a4e <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 80059d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80059da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80059e0:	2300      	movs	r3, #0
 80059e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80059ea:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80059ec:	69bb      	ldr	r3, [r7, #24]
 80059ee:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80059f2:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d108      	bne.n	8005a10 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80059fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	4013      	ands	r3, r2
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00b      	beq.n	8005a22 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a0e:	e008      	b.n	8005a22 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8005a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	4013      	ands	r3, r2
 8005a18:	69ba      	ldr	r2, [r7, #24]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d101      	bne.n	8005a22 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8005a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d010      	beq.n	8005a4a <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d003      	beq.n	8005a3a <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8005a32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005a42:	4619      	mov	r1, r3
 8005a44:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005a46:	f001 fb05 	bl	8007054 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8005a4e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005a50:	6a3b      	ldr	r3, [r7, #32]
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d1be      	bne.n	80059d4 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a5c:	43db      	mvns	r3, r3
 8005a5e:	401a      	ands	r2, r3
 8005a60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a62:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8005a64:	f001 f834 	bl	8006ad0 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8005a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a6a:	681b      	ldr	r3, [r3, #0]
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3738      	adds	r7, #56	@ 0x38
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8005a7e:	6839      	ldr	r1, [r7, #0]
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f7ff ff6b 	bl	800595c <xEventGroupSetBits>
}
 8005a86:	bf00      	nop
 8005a88:	3708      	adds	r7, #8
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}

08005a8e <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8005a8e:	b480      	push	{r7}
 8005a90:	b087      	sub	sp, #28
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	60f8      	str	r0, [r7, #12]
 8005a96:	60b9      	str	r1, [r7, #8]
 8005a98:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d107      	bne.n	8005ab4 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00a      	beq.n	8005ac4 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	617b      	str	r3, [r7, #20]
 8005ab2:	e007      	b.n	8005ac4 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	4013      	ands	r3, r2
 8005aba:	68ba      	ldr	r2, [r7, #8]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d101      	bne.n	8005ac4 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005ac0:	2301      	movs	r3, #1
 8005ac2:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8005ac4:	697b      	ldr	r3, [r7, #20]
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	371c      	adds	r7, #28
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
	...

08005ad4 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b086      	sub	sp, #24
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	68f9      	ldr	r1, [r7, #12]
 8005ae6:	4804      	ldr	r0, [pc, #16]	@ (8005af8 <xEventGroupSetBitsFromISR+0x24>)
 8005ae8:	f002 f8ce 	bl	8007c88 <xTimerPendFunctionCallFromISR>
 8005aec:	6178      	str	r0, [r7, #20]

		return xReturn;
 8005aee:	697b      	ldr	r3, [r7, #20]
	}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3718      	adds	r7, #24
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	08005a75 	.word	0x08005a75

08005afc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f103 0208 	add.w	r2, r3, #8
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f04f 32ff 	mov.w	r2, #4294967295
 8005b14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f103 0208 	add.w	r2, r3, #8
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f103 0208 	add.w	r2, r3, #8
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005b30:	bf00      	nop
 8005b32:	370c      	adds	r7, #12
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005b4a:	bf00      	nop
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr

08005b56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b56:	b480      	push	{r7}
 8005b58:	b085      	sub	sp, #20
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
 8005b5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	689a      	ldr	r2, [r3, #8]
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	683a      	ldr	r2, [r7, #0]
 8005b7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	683a      	ldr	r2, [r7, #0]
 8005b80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	1c5a      	adds	r2, r3, #1
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	601a      	str	r2, [r3, #0]
}
 8005b92:	bf00      	nop
 8005b94:	3714      	adds	r7, #20
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr

08005b9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005b9e:	b480      	push	{r7}
 8005ba0:	b085      	sub	sp, #20
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
 8005ba6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb4:	d103      	bne.n	8005bbe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	691b      	ldr	r3, [r3, #16]
 8005bba:	60fb      	str	r3, [r7, #12]
 8005bbc:	e00c      	b.n	8005bd8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	3308      	adds	r3, #8
 8005bc2:	60fb      	str	r3, [r7, #12]
 8005bc4:	e002      	b.n	8005bcc <vListInsert+0x2e>
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	60fb      	str	r3, [r7, #12]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d2f6      	bcs.n	8005bc6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	683a      	ldr	r2, [r7, #0]
 8005be6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	683a      	ldr	r2, [r7, #0]
 8005bf2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	1c5a      	adds	r2, r3, #1
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	601a      	str	r2, [r3, #0]
}
 8005c04:	bf00      	nop
 8005c06:	3714      	adds	r7, #20
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	6892      	ldr	r2, [r2, #8]
 8005c26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	6852      	ldr	r2, [r2, #4]
 8005c30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d103      	bne.n	8005c44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	689a      	ldr	r2, [r3, #8]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	1e5a      	subs	r2, r3, #1
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3714      	adds	r7, #20
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d10b      	bne.n	8005c90 <xQueueGenericReset+0x2c>
	__asm volatile
 8005c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c7c:	f383 8811 	msr	BASEPRI, r3
 8005c80:	f3bf 8f6f 	isb	sy
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	60bb      	str	r3, [r7, #8]
}
 8005c8a:	bf00      	nop
 8005c8c:	bf00      	nop
 8005c8e:	e7fd      	b.n	8005c8c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005c90:	f002 f94a 	bl	8007f28 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c9c:	68f9      	ldr	r1, [r7, #12]
 8005c9e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005ca0:	fb01 f303 	mul.w	r3, r1, r3
 8005ca4:	441a      	add	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	68f9      	ldr	r1, [r7, #12]
 8005cc4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005cc6:	fb01 f303 	mul.w	r3, r1, r3
 8005cca:	441a      	add	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	22ff      	movs	r2, #255	@ 0xff
 8005cd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	22ff      	movs	r2, #255	@ 0xff
 8005cdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d114      	bne.n	8005d10 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d01a      	beq.n	8005d24 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	3310      	adds	r3, #16
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f001 f94a 	bl	8006f8c <xTaskRemoveFromEventList>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d012      	beq.n	8005d24 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8005d34 <xQueueGenericReset+0xd0>)
 8005d00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d04:	601a      	str	r2, [r3, #0]
 8005d06:	f3bf 8f4f 	dsb	sy
 8005d0a:	f3bf 8f6f 	isb	sy
 8005d0e:	e009      	b.n	8005d24 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	3310      	adds	r3, #16
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7ff fef1 	bl	8005afc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	3324      	adds	r3, #36	@ 0x24
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7ff feec 	bl	8005afc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005d24:	f002 f932 	bl	8007f8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005d28:	2301      	movs	r3, #1
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	e000ed04 	.word	0xe000ed04

08005d38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b08e      	sub	sp, #56	@ 0x38
 8005d3c:	af02      	add	r7, sp, #8
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]
 8005d44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d10b      	bne.n	8005d64 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d50:	f383 8811 	msr	BASEPRI, r3
 8005d54:	f3bf 8f6f 	isb	sy
 8005d58:	f3bf 8f4f 	dsb	sy
 8005d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005d5e:	bf00      	nop
 8005d60:	bf00      	nop
 8005d62:	e7fd      	b.n	8005d60 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d10b      	bne.n	8005d82 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d6e:	f383 8811 	msr	BASEPRI, r3
 8005d72:	f3bf 8f6f 	isb	sy
 8005d76:	f3bf 8f4f 	dsb	sy
 8005d7a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005d7c:	bf00      	nop
 8005d7e:	bf00      	nop
 8005d80:	e7fd      	b.n	8005d7e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d002      	beq.n	8005d8e <xQueueGenericCreateStatic+0x56>
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d001      	beq.n	8005d92 <xQueueGenericCreateStatic+0x5a>
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e000      	b.n	8005d94 <xQueueGenericCreateStatic+0x5c>
 8005d92:	2300      	movs	r3, #0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d10b      	bne.n	8005db0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005d98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d9c:	f383 8811 	msr	BASEPRI, r3
 8005da0:	f3bf 8f6f 	isb	sy
 8005da4:	f3bf 8f4f 	dsb	sy
 8005da8:	623b      	str	r3, [r7, #32]
}
 8005daa:	bf00      	nop
 8005dac:	bf00      	nop
 8005dae:	e7fd      	b.n	8005dac <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d102      	bne.n	8005dbc <xQueueGenericCreateStatic+0x84>
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d101      	bne.n	8005dc0 <xQueueGenericCreateStatic+0x88>
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e000      	b.n	8005dc2 <xQueueGenericCreateStatic+0x8a>
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d10b      	bne.n	8005dde <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dca:	f383 8811 	msr	BASEPRI, r3
 8005dce:	f3bf 8f6f 	isb	sy
 8005dd2:	f3bf 8f4f 	dsb	sy
 8005dd6:	61fb      	str	r3, [r7, #28]
}
 8005dd8:	bf00      	nop
 8005dda:	bf00      	nop
 8005ddc:	e7fd      	b.n	8005dda <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005dde:	2350      	movs	r3, #80	@ 0x50
 8005de0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	2b50      	cmp	r3, #80	@ 0x50
 8005de6:	d00b      	beq.n	8005e00 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005de8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dec:	f383 8811 	msr	BASEPRI, r3
 8005df0:	f3bf 8f6f 	isb	sy
 8005df4:	f3bf 8f4f 	dsb	sy
 8005df8:	61bb      	str	r3, [r7, #24]
}
 8005dfa:	bf00      	nop
 8005dfc:	bf00      	nop
 8005dfe:	e7fd      	b.n	8005dfc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005e00:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00d      	beq.n	8005e28 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005e14:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e1a:	9300      	str	r3, [sp, #0]
 8005e1c:	4613      	mov	r3, r2
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	68b9      	ldr	r1, [r7, #8]
 8005e22:	68f8      	ldr	r0, [r7, #12]
 8005e24:	f000 f805 	bl	8005e32 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3730      	adds	r7, #48	@ 0x30
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}

08005e32 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005e32:	b580      	push	{r7, lr}
 8005e34:	b084      	sub	sp, #16
 8005e36:	af00      	add	r7, sp, #0
 8005e38:	60f8      	str	r0, [r7, #12]
 8005e3a:	60b9      	str	r1, [r7, #8]
 8005e3c:	607a      	str	r2, [r7, #4]
 8005e3e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d103      	bne.n	8005e4e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	69ba      	ldr	r2, [r7, #24]
 8005e4a:	601a      	str	r2, [r3, #0]
 8005e4c:	e002      	b.n	8005e54 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005e4e:	69bb      	ldr	r3, [r7, #24]
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005e54:	69bb      	ldr	r3, [r7, #24]
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005e5a:	69bb      	ldr	r3, [r7, #24]
 8005e5c:	68ba      	ldr	r2, [r7, #8]
 8005e5e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e60:	2101      	movs	r1, #1
 8005e62:	69b8      	ldr	r0, [r7, #24]
 8005e64:	f7ff fefe 	bl	8005c64 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	78fa      	ldrb	r2, [r7, #3]
 8005e6c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005e70:	bf00      	nop
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b08e      	sub	sp, #56	@ 0x38
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
 8005e84:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005e86:	2300      	movs	r3, #0
 8005e88:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d10b      	bne.n	8005eac <xQueueGenericSend+0x34>
	__asm volatile
 8005e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e98:	f383 8811 	msr	BASEPRI, r3
 8005e9c:	f3bf 8f6f 	isb	sy
 8005ea0:	f3bf 8f4f 	dsb	sy
 8005ea4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005ea6:	bf00      	nop
 8005ea8:	bf00      	nop
 8005eaa:	e7fd      	b.n	8005ea8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d103      	bne.n	8005eba <xQueueGenericSend+0x42>
 8005eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d101      	bne.n	8005ebe <xQueueGenericSend+0x46>
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e000      	b.n	8005ec0 <xQueueGenericSend+0x48>
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d10b      	bne.n	8005edc <xQueueGenericSend+0x64>
	__asm volatile
 8005ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec8:	f383 8811 	msr	BASEPRI, r3
 8005ecc:	f3bf 8f6f 	isb	sy
 8005ed0:	f3bf 8f4f 	dsb	sy
 8005ed4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005ed6:	bf00      	nop
 8005ed8:	bf00      	nop
 8005eda:	e7fd      	b.n	8005ed8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d103      	bne.n	8005eea <xQueueGenericSend+0x72>
 8005ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d101      	bne.n	8005eee <xQueueGenericSend+0x76>
 8005eea:	2301      	movs	r3, #1
 8005eec:	e000      	b.n	8005ef0 <xQueueGenericSend+0x78>
 8005eee:	2300      	movs	r3, #0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10b      	bne.n	8005f0c <xQueueGenericSend+0x94>
	__asm volatile
 8005ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef8:	f383 8811 	msr	BASEPRI, r3
 8005efc:	f3bf 8f6f 	isb	sy
 8005f00:	f3bf 8f4f 	dsb	sy
 8005f04:	623b      	str	r3, [r7, #32]
}
 8005f06:	bf00      	nop
 8005f08:	bf00      	nop
 8005f0a:	e7fd      	b.n	8005f08 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f0c:	f001 fa68 	bl	80073e0 <xTaskGetSchedulerState>
 8005f10:	4603      	mov	r3, r0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d102      	bne.n	8005f1c <xQueueGenericSend+0xa4>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d101      	bne.n	8005f20 <xQueueGenericSend+0xa8>
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e000      	b.n	8005f22 <xQueueGenericSend+0xaa>
 8005f20:	2300      	movs	r3, #0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d10b      	bne.n	8005f3e <xQueueGenericSend+0xc6>
	__asm volatile
 8005f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f2a:	f383 8811 	msr	BASEPRI, r3
 8005f2e:	f3bf 8f6f 	isb	sy
 8005f32:	f3bf 8f4f 	dsb	sy
 8005f36:	61fb      	str	r3, [r7, #28]
}
 8005f38:	bf00      	nop
 8005f3a:	bf00      	nop
 8005f3c:	e7fd      	b.n	8005f3a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f3e:	f001 fff3 	bl	8007f28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d302      	bcc.n	8005f54 <xQueueGenericSend+0xdc>
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d129      	bne.n	8005fa8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f54:	683a      	ldr	r2, [r7, #0]
 8005f56:	68b9      	ldr	r1, [r7, #8]
 8005f58:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005f5a:	f000 fa0f 	bl	800637c <prvCopyDataToQueue>
 8005f5e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d010      	beq.n	8005f8a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f6a:	3324      	adds	r3, #36	@ 0x24
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f001 f80d 	bl	8006f8c <xTaskRemoveFromEventList>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d013      	beq.n	8005fa0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005f78:	4b3f      	ldr	r3, [pc, #252]	@ (8006078 <xQueueGenericSend+0x200>)
 8005f7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f7e:	601a      	str	r2, [r3, #0]
 8005f80:	f3bf 8f4f 	dsb	sy
 8005f84:	f3bf 8f6f 	isb	sy
 8005f88:	e00a      	b.n	8005fa0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d007      	beq.n	8005fa0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005f90:	4b39      	ldr	r3, [pc, #228]	@ (8006078 <xQueueGenericSend+0x200>)
 8005f92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f96:	601a      	str	r2, [r3, #0]
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005fa0:	f001 fff4 	bl	8007f8c <vPortExitCritical>
				return pdPASS;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e063      	b.n	8006070 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d103      	bne.n	8005fb6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005fae:	f001 ffed 	bl	8007f8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	e05c      	b.n	8006070 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005fb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d106      	bne.n	8005fca <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005fbc:	f107 0314 	add.w	r3, r7, #20
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f001 f8ab 	bl	800711c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005fca:	f001 ffdf 	bl	8007f8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005fce:	f000 fd71 	bl	8006ab4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005fd2:	f001 ffa9 	bl	8007f28 <vPortEnterCritical>
 8005fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005fdc:	b25b      	sxtb	r3, r3
 8005fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe2:	d103      	bne.n	8005fec <xQueueGenericSend+0x174>
 8005fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ff2:	b25b      	sxtb	r3, r3
 8005ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff8:	d103      	bne.n	8006002 <xQueueGenericSend+0x18a>
 8005ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006002:	f001 ffc3 	bl	8007f8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006006:	1d3a      	adds	r2, r7, #4
 8006008:	f107 0314 	add.w	r3, r7, #20
 800600c:	4611      	mov	r1, r2
 800600e:	4618      	mov	r0, r3
 8006010:	f001 f89a 	bl	8007148 <xTaskCheckForTimeOut>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d124      	bne.n	8006064 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800601a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800601c:	f000 faa6 	bl	800656c <prvIsQueueFull>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d018      	beq.n	8006058 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006026:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006028:	3310      	adds	r3, #16
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	4611      	mov	r1, r2
 800602e:	4618      	mov	r0, r3
 8006030:	f000 ff1c 	bl	8006e6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006034:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006036:	f000 fa31 	bl	800649c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800603a:	f000 fd49 	bl	8006ad0 <xTaskResumeAll>
 800603e:	4603      	mov	r3, r0
 8006040:	2b00      	cmp	r3, #0
 8006042:	f47f af7c 	bne.w	8005f3e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006046:	4b0c      	ldr	r3, [pc, #48]	@ (8006078 <xQueueGenericSend+0x200>)
 8006048:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800604c:	601a      	str	r2, [r3, #0]
 800604e:	f3bf 8f4f 	dsb	sy
 8006052:	f3bf 8f6f 	isb	sy
 8006056:	e772      	b.n	8005f3e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006058:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800605a:	f000 fa1f 	bl	800649c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800605e:	f000 fd37 	bl	8006ad0 <xTaskResumeAll>
 8006062:	e76c      	b.n	8005f3e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006064:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006066:	f000 fa19 	bl	800649c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800606a:	f000 fd31 	bl	8006ad0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800606e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006070:	4618      	mov	r0, r3
 8006072:	3738      	adds	r7, #56	@ 0x38
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	e000ed04 	.word	0xe000ed04

0800607c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b090      	sub	sp, #64	@ 0x40
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]
 8006088:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800608e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006090:	2b00      	cmp	r3, #0
 8006092:	d10b      	bne.n	80060ac <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006098:	f383 8811 	msr	BASEPRI, r3
 800609c:	f3bf 8f6f 	isb	sy
 80060a0:	f3bf 8f4f 	dsb	sy
 80060a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80060a6:	bf00      	nop
 80060a8:	bf00      	nop
 80060aa:	e7fd      	b.n	80060a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d103      	bne.n	80060ba <xQueueGenericSendFromISR+0x3e>
 80060b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <xQueueGenericSendFromISR+0x42>
 80060ba:	2301      	movs	r3, #1
 80060bc:	e000      	b.n	80060c0 <xQueueGenericSendFromISR+0x44>
 80060be:	2300      	movs	r3, #0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d10b      	bne.n	80060dc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80060c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c8:	f383 8811 	msr	BASEPRI, r3
 80060cc:	f3bf 8f6f 	isb	sy
 80060d0:	f3bf 8f4f 	dsb	sy
 80060d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80060d6:	bf00      	nop
 80060d8:	bf00      	nop
 80060da:	e7fd      	b.n	80060d8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d103      	bne.n	80060ea <xQueueGenericSendFromISR+0x6e>
 80060e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d101      	bne.n	80060ee <xQueueGenericSendFromISR+0x72>
 80060ea:	2301      	movs	r3, #1
 80060ec:	e000      	b.n	80060f0 <xQueueGenericSendFromISR+0x74>
 80060ee:	2300      	movs	r3, #0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d10b      	bne.n	800610c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80060f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f8:	f383 8811 	msr	BASEPRI, r3
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f3bf 8f4f 	dsb	sy
 8006104:	623b      	str	r3, [r7, #32]
}
 8006106:	bf00      	nop
 8006108:	bf00      	nop
 800610a:	e7fd      	b.n	8006108 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800610c:	f001 ffec 	bl	80080e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006110:	f3ef 8211 	mrs	r2, BASEPRI
 8006114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006118:	f383 8811 	msr	BASEPRI, r3
 800611c:	f3bf 8f6f 	isb	sy
 8006120:	f3bf 8f4f 	dsb	sy
 8006124:	61fa      	str	r2, [r7, #28]
 8006126:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006128:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800612a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800612c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800612e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006134:	429a      	cmp	r2, r3
 8006136:	d302      	bcc.n	800613e <xQueueGenericSendFromISR+0xc2>
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	2b02      	cmp	r3, #2
 800613c:	d12f      	bne.n	800619e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800613e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006140:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006144:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800614a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800614c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800614e:	683a      	ldr	r2, [r7, #0]
 8006150:	68b9      	ldr	r1, [r7, #8]
 8006152:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006154:	f000 f912 	bl	800637c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006158:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800615c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006160:	d112      	bne.n	8006188 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006166:	2b00      	cmp	r3, #0
 8006168:	d016      	beq.n	8006198 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800616a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800616c:	3324      	adds	r3, #36	@ 0x24
 800616e:	4618      	mov	r0, r3
 8006170:	f000 ff0c 	bl	8006f8c <xTaskRemoveFromEventList>
 8006174:	4603      	mov	r3, r0
 8006176:	2b00      	cmp	r3, #0
 8006178:	d00e      	beq.n	8006198 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00b      	beq.n	8006198 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	601a      	str	r2, [r3, #0]
 8006186:	e007      	b.n	8006198 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006188:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800618c:	3301      	adds	r3, #1
 800618e:	b2db      	uxtb	r3, r3
 8006190:	b25a      	sxtb	r2, r3
 8006192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006194:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006198:	2301      	movs	r3, #1
 800619a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800619c:	e001      	b.n	80061a2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800619e:	2300      	movs	r3, #0
 80061a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061a4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80061ac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80061ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3740      	adds	r7, #64	@ 0x40
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b08c      	sub	sp, #48	@ 0x30
 80061bc:	af00      	add	r7, sp, #0
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80061c4:	2300      	movs	r3, #0
 80061c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80061cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10b      	bne.n	80061ea <xQueueReceive+0x32>
	__asm volatile
 80061d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061d6:	f383 8811 	msr	BASEPRI, r3
 80061da:	f3bf 8f6f 	isb	sy
 80061de:	f3bf 8f4f 	dsb	sy
 80061e2:	623b      	str	r3, [r7, #32]
}
 80061e4:	bf00      	nop
 80061e6:	bf00      	nop
 80061e8:	e7fd      	b.n	80061e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d103      	bne.n	80061f8 <xQueueReceive+0x40>
 80061f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d101      	bne.n	80061fc <xQueueReceive+0x44>
 80061f8:	2301      	movs	r3, #1
 80061fa:	e000      	b.n	80061fe <xQueueReceive+0x46>
 80061fc:	2300      	movs	r3, #0
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d10b      	bne.n	800621a <xQueueReceive+0x62>
	__asm volatile
 8006202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006206:	f383 8811 	msr	BASEPRI, r3
 800620a:	f3bf 8f6f 	isb	sy
 800620e:	f3bf 8f4f 	dsb	sy
 8006212:	61fb      	str	r3, [r7, #28]
}
 8006214:	bf00      	nop
 8006216:	bf00      	nop
 8006218:	e7fd      	b.n	8006216 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800621a:	f001 f8e1 	bl	80073e0 <xTaskGetSchedulerState>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d102      	bne.n	800622a <xQueueReceive+0x72>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d101      	bne.n	800622e <xQueueReceive+0x76>
 800622a:	2301      	movs	r3, #1
 800622c:	e000      	b.n	8006230 <xQueueReceive+0x78>
 800622e:	2300      	movs	r3, #0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d10b      	bne.n	800624c <xQueueReceive+0x94>
	__asm volatile
 8006234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006238:	f383 8811 	msr	BASEPRI, r3
 800623c:	f3bf 8f6f 	isb	sy
 8006240:	f3bf 8f4f 	dsb	sy
 8006244:	61bb      	str	r3, [r7, #24]
}
 8006246:	bf00      	nop
 8006248:	bf00      	nop
 800624a:	e7fd      	b.n	8006248 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800624c:	f001 fe6c 	bl	8007f28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006254:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006258:	2b00      	cmp	r3, #0
 800625a:	d01f      	beq.n	800629c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800625c:	68b9      	ldr	r1, [r7, #8]
 800625e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006260:	f000 f8f6 	bl	8006450 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006266:	1e5a      	subs	r2, r3, #1
 8006268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800626a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800626c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d00f      	beq.n	8006294 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006276:	3310      	adds	r3, #16
 8006278:	4618      	mov	r0, r3
 800627a:	f000 fe87 	bl	8006f8c <xTaskRemoveFromEventList>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d007      	beq.n	8006294 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006284:	4b3c      	ldr	r3, [pc, #240]	@ (8006378 <xQueueReceive+0x1c0>)
 8006286:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800628a:	601a      	str	r2, [r3, #0]
 800628c:	f3bf 8f4f 	dsb	sy
 8006290:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006294:	f001 fe7a 	bl	8007f8c <vPortExitCritical>
				return pdPASS;
 8006298:	2301      	movs	r3, #1
 800629a:	e069      	b.n	8006370 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d103      	bne.n	80062aa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80062a2:	f001 fe73 	bl	8007f8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80062a6:	2300      	movs	r3, #0
 80062a8:	e062      	b.n	8006370 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d106      	bne.n	80062be <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062b0:	f107 0310 	add.w	r3, r7, #16
 80062b4:	4618      	mov	r0, r3
 80062b6:	f000 ff31 	bl	800711c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062ba:	2301      	movs	r3, #1
 80062bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062be:	f001 fe65 	bl	8007f8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062c2:	f000 fbf7 	bl	8006ab4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062c6:	f001 fe2f 	bl	8007f28 <vPortEnterCritical>
 80062ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80062d0:	b25b      	sxtb	r3, r3
 80062d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d6:	d103      	bne.n	80062e0 <xQueueReceive+0x128>
 80062d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062e6:	b25b      	sxtb	r3, r3
 80062e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ec:	d103      	bne.n	80062f6 <xQueueReceive+0x13e>
 80062ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f0:	2200      	movs	r2, #0
 80062f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062f6:	f001 fe49 	bl	8007f8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062fa:	1d3a      	adds	r2, r7, #4
 80062fc:	f107 0310 	add.w	r3, r7, #16
 8006300:	4611      	mov	r1, r2
 8006302:	4618      	mov	r0, r3
 8006304:	f000 ff20 	bl	8007148 <xTaskCheckForTimeOut>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d123      	bne.n	8006356 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800630e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006310:	f000 f916 	bl	8006540 <prvIsQueueEmpty>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d017      	beq.n	800634a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800631a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800631c:	3324      	adds	r3, #36	@ 0x24
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	4611      	mov	r1, r2
 8006322:	4618      	mov	r0, r3
 8006324:	f000 fda2 	bl	8006e6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006328:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800632a:	f000 f8b7 	bl	800649c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800632e:	f000 fbcf 	bl	8006ad0 <xTaskResumeAll>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d189      	bne.n	800624c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006338:	4b0f      	ldr	r3, [pc, #60]	@ (8006378 <xQueueReceive+0x1c0>)
 800633a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800633e:	601a      	str	r2, [r3, #0]
 8006340:	f3bf 8f4f 	dsb	sy
 8006344:	f3bf 8f6f 	isb	sy
 8006348:	e780      	b.n	800624c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800634a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800634c:	f000 f8a6 	bl	800649c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006350:	f000 fbbe 	bl	8006ad0 <xTaskResumeAll>
 8006354:	e77a      	b.n	800624c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006356:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006358:	f000 f8a0 	bl	800649c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800635c:	f000 fbb8 	bl	8006ad0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006360:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006362:	f000 f8ed 	bl	8006540 <prvIsQueueEmpty>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	f43f af6f 	beq.w	800624c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800636e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006370:	4618      	mov	r0, r3
 8006372:	3730      	adds	r7, #48	@ 0x30
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	e000ed04 	.word	0xe000ed04

0800637c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b086      	sub	sp, #24
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006388:	2300      	movs	r3, #0
 800638a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006390:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006396:	2b00      	cmp	r3, #0
 8006398:	d10d      	bne.n	80063b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d14d      	bne.n	800643e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	4618      	mov	r0, r3
 80063a8:	f001 f838 	bl	800741c <xTaskPriorityDisinherit>
 80063ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2200      	movs	r2, #0
 80063b2:	609a      	str	r2, [r3, #8]
 80063b4:	e043      	b.n	800643e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d119      	bne.n	80063f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6858      	ldr	r0, [r3, #4]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063c4:	461a      	mov	r2, r3
 80063c6:	68b9      	ldr	r1, [r7, #8]
 80063c8:	f002 fc93 	bl	8008cf2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	685a      	ldr	r2, [r3, #4]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063d4:	441a      	add	r2, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	685a      	ldr	r2, [r3, #4]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	689b      	ldr	r3, [r3, #8]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d32b      	bcc.n	800643e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681a      	ldr	r2, [r3, #0]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	605a      	str	r2, [r3, #4]
 80063ee:	e026      	b.n	800643e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	68d8      	ldr	r0, [r3, #12]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063f8:	461a      	mov	r2, r3
 80063fa:	68b9      	ldr	r1, [r7, #8]
 80063fc:	f002 fc79 	bl	8008cf2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	68da      	ldr	r2, [r3, #12]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006408:	425b      	negs	r3, r3
 800640a:	441a      	add	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	68da      	ldr	r2, [r3, #12]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	429a      	cmp	r2, r3
 800641a:	d207      	bcs.n	800642c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	689a      	ldr	r2, [r3, #8]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006424:	425b      	negs	r3, r3
 8006426:	441a      	add	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2b02      	cmp	r3, #2
 8006430:	d105      	bne.n	800643e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d002      	beq.n	800643e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	3b01      	subs	r3, #1
 800643c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	1c5a      	adds	r2, r3, #1
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006446:	697b      	ldr	r3, [r7, #20]
}
 8006448:	4618      	mov	r0, r3
 800644a:	3718      	adds	r7, #24
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800645e:	2b00      	cmp	r3, #0
 8006460:	d018      	beq.n	8006494 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	68da      	ldr	r2, [r3, #12]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800646a:	441a      	add	r2, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	68da      	ldr	r2, [r3, #12]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	429a      	cmp	r2, r3
 800647a:	d303      	bcc.n	8006484 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	68d9      	ldr	r1, [r3, #12]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800648c:	461a      	mov	r2, r3
 800648e:	6838      	ldr	r0, [r7, #0]
 8006490:	f002 fc2f 	bl	8008cf2 <memcpy>
	}
}
 8006494:	bf00      	nop
 8006496:	3708      	adds	r7, #8
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80064a4:	f001 fd40 	bl	8007f28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80064ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80064b0:	e011      	b.n	80064d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d012      	beq.n	80064e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	3324      	adds	r3, #36	@ 0x24
 80064be:	4618      	mov	r0, r3
 80064c0:	f000 fd64 	bl	8006f8c <xTaskRemoveFromEventList>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d001      	beq.n	80064ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80064ca:	f000 fea1 	bl	8007210 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80064ce:	7bfb      	ldrb	r3, [r7, #15]
 80064d0:	3b01      	subs	r3, #1
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80064d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	dce9      	bgt.n	80064b2 <prvUnlockQueue+0x16>
 80064de:	e000      	b.n	80064e2 <prvUnlockQueue+0x46>
					break;
 80064e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	22ff      	movs	r2, #255	@ 0xff
 80064e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80064ea:	f001 fd4f 	bl	8007f8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80064ee:	f001 fd1b 	bl	8007f28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80064f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80064fa:	e011      	b.n	8006520 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d012      	beq.n	800652a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	3310      	adds	r3, #16
 8006508:	4618      	mov	r0, r3
 800650a:	f000 fd3f 	bl	8006f8c <xTaskRemoveFromEventList>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d001      	beq.n	8006518 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006514:	f000 fe7c 	bl	8007210 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006518:	7bbb      	ldrb	r3, [r7, #14]
 800651a:	3b01      	subs	r3, #1
 800651c:	b2db      	uxtb	r3, r3
 800651e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006520:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006524:	2b00      	cmp	r3, #0
 8006526:	dce9      	bgt.n	80064fc <prvUnlockQueue+0x60>
 8006528:	e000      	b.n	800652c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800652a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	22ff      	movs	r2, #255	@ 0xff
 8006530:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006534:	f001 fd2a 	bl	8007f8c <vPortExitCritical>
}
 8006538:	bf00      	nop
 800653a:	3710      	adds	r7, #16
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006548:	f001 fcee 	bl	8007f28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006550:	2b00      	cmp	r3, #0
 8006552:	d102      	bne.n	800655a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006554:	2301      	movs	r3, #1
 8006556:	60fb      	str	r3, [r7, #12]
 8006558:	e001      	b.n	800655e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800655a:	2300      	movs	r3, #0
 800655c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800655e:	f001 fd15 	bl	8007f8c <vPortExitCritical>

	return xReturn;
 8006562:	68fb      	ldr	r3, [r7, #12]
}
 8006564:	4618      	mov	r0, r3
 8006566:	3710      	adds	r7, #16
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006574:	f001 fcd8 	bl	8007f28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006580:	429a      	cmp	r2, r3
 8006582:	d102      	bne.n	800658a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006584:	2301      	movs	r3, #1
 8006586:	60fb      	str	r3, [r7, #12]
 8006588:	e001      	b.n	800658e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800658a:	2300      	movs	r3, #0
 800658c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800658e:	f001 fcfd 	bl	8007f8c <vPortExitCritical>

	return xReturn;
 8006592:	68fb      	ldr	r3, [r7, #12]
}
 8006594:	4618      	mov	r0, r3
 8006596:	3710      	adds	r7, #16
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065a6:	2300      	movs	r3, #0
 80065a8:	60fb      	str	r3, [r7, #12]
 80065aa:	e014      	b.n	80065d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80065ac:	4a0f      	ldr	r2, [pc, #60]	@ (80065ec <vQueueAddToRegistry+0x50>)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10b      	bne.n	80065d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80065b8:	490c      	ldr	r1, [pc, #48]	@ (80065ec <vQueueAddToRegistry+0x50>)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	683a      	ldr	r2, [r7, #0]
 80065be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80065c2:	4a0a      	ldr	r2, [pc, #40]	@ (80065ec <vQueueAddToRegistry+0x50>)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	00db      	lsls	r3, r3, #3
 80065c8:	4413      	add	r3, r2
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80065ce:	e006      	b.n	80065de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	3301      	adds	r3, #1
 80065d4:	60fb      	str	r3, [r7, #12]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2b07      	cmp	r3, #7
 80065da:	d9e7      	bls.n	80065ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80065dc:	bf00      	nop
 80065de:	bf00      	nop
 80065e0:	3714      	adds	r7, #20
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr
 80065ea:	bf00      	nop
 80065ec:	2000126c 	.word	0x2000126c

080065f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b086      	sub	sp, #24
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006600:	f001 fc92 	bl	8007f28 <vPortEnterCritical>
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800660a:	b25b      	sxtb	r3, r3
 800660c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006610:	d103      	bne.n	800661a <vQueueWaitForMessageRestricted+0x2a>
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	2200      	movs	r2, #0
 8006616:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006620:	b25b      	sxtb	r3, r3
 8006622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006626:	d103      	bne.n	8006630 <vQueueWaitForMessageRestricted+0x40>
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006630:	f001 fcac 	bl	8007f8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006638:	2b00      	cmp	r3, #0
 800663a:	d106      	bne.n	800664a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	3324      	adds	r3, #36	@ 0x24
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	68b9      	ldr	r1, [r7, #8]
 8006644:	4618      	mov	r0, r3
 8006646:	f000 fc75 	bl	8006f34 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800664a:	6978      	ldr	r0, [r7, #20]
 800664c:	f7ff ff26 	bl	800649c <prvUnlockQueue>
	}
 8006650:	bf00      	nop
 8006652:	3718      	adds	r7, #24
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006658:	b580      	push	{r7, lr}
 800665a:	b08e      	sub	sp, #56	@ 0x38
 800665c:	af04      	add	r7, sp, #16
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	607a      	str	r2, [r7, #4]
 8006664:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006668:	2b00      	cmp	r3, #0
 800666a:	d10b      	bne.n	8006684 <xTaskCreateStatic+0x2c>
	__asm volatile
 800666c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006670:	f383 8811 	msr	BASEPRI, r3
 8006674:	f3bf 8f6f 	isb	sy
 8006678:	f3bf 8f4f 	dsb	sy
 800667c:	623b      	str	r3, [r7, #32]
}
 800667e:	bf00      	nop
 8006680:	bf00      	nop
 8006682:	e7fd      	b.n	8006680 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10b      	bne.n	80066a2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800668a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800668e:	f383 8811 	msr	BASEPRI, r3
 8006692:	f3bf 8f6f 	isb	sy
 8006696:	f3bf 8f4f 	dsb	sy
 800669a:	61fb      	str	r3, [r7, #28]
}
 800669c:	bf00      	nop
 800669e:	bf00      	nop
 80066a0:	e7fd      	b.n	800669e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80066a2:	23a8      	movs	r3, #168	@ 0xa8
 80066a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	2ba8      	cmp	r3, #168	@ 0xa8
 80066aa:	d00b      	beq.n	80066c4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80066ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b0:	f383 8811 	msr	BASEPRI, r3
 80066b4:	f3bf 8f6f 	isb	sy
 80066b8:	f3bf 8f4f 	dsb	sy
 80066bc:	61bb      	str	r3, [r7, #24]
}
 80066be:	bf00      	nop
 80066c0:	bf00      	nop
 80066c2:	e7fd      	b.n	80066c0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80066c4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80066c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d01e      	beq.n	800670a <xTaskCreateStatic+0xb2>
 80066cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d01b      	beq.n	800670a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80066d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80066d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80066da:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80066dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066de:	2202      	movs	r2, #2
 80066e0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80066e4:	2300      	movs	r3, #0
 80066e6:	9303      	str	r3, [sp, #12]
 80066e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ea:	9302      	str	r3, [sp, #8]
 80066ec:	f107 0314 	add.w	r3, r7, #20
 80066f0:	9301      	str	r3, [sp, #4]
 80066f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	687a      	ldr	r2, [r7, #4]
 80066fa:	68b9      	ldr	r1, [r7, #8]
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f000 f851 	bl	80067a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006702:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006704:	f000 f8f6 	bl	80068f4 <prvAddNewTaskToReadyList>
 8006708:	e001      	b.n	800670e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800670a:	2300      	movs	r3, #0
 800670c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800670e:	697b      	ldr	r3, [r7, #20]
	}
 8006710:	4618      	mov	r0, r3
 8006712:	3728      	adds	r7, #40	@ 0x28
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006718:	b580      	push	{r7, lr}
 800671a:	b08c      	sub	sp, #48	@ 0x30
 800671c:	af04      	add	r7, sp, #16
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	603b      	str	r3, [r7, #0]
 8006724:	4613      	mov	r3, r2
 8006726:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006728:	88fb      	ldrh	r3, [r7, #6]
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4618      	mov	r0, r3
 800672e:	f001 fd1d 	bl	800816c <pvPortMalloc>
 8006732:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00e      	beq.n	8006758 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800673a:	20a8      	movs	r0, #168	@ 0xa8
 800673c:	f001 fd16 	bl	800816c <pvPortMalloc>
 8006740:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006742:	69fb      	ldr	r3, [r7, #28]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d003      	beq.n	8006750 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	697a      	ldr	r2, [r7, #20]
 800674c:	631a      	str	r2, [r3, #48]	@ 0x30
 800674e:	e005      	b.n	800675c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006750:	6978      	ldr	r0, [r7, #20]
 8006752:	f001 fdd9 	bl	8008308 <vPortFree>
 8006756:	e001      	b.n	800675c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006758:	2300      	movs	r3, #0
 800675a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d017      	beq.n	8006792 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800676a:	88fa      	ldrh	r2, [r7, #6]
 800676c:	2300      	movs	r3, #0
 800676e:	9303      	str	r3, [sp, #12]
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	9302      	str	r3, [sp, #8]
 8006774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006776:	9301      	str	r3, [sp, #4]
 8006778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800677a:	9300      	str	r3, [sp, #0]
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	68b9      	ldr	r1, [r7, #8]
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f000 f80f 	bl	80067a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006786:	69f8      	ldr	r0, [r7, #28]
 8006788:	f000 f8b4 	bl	80068f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800678c:	2301      	movs	r3, #1
 800678e:	61bb      	str	r3, [r7, #24]
 8006790:	e002      	b.n	8006798 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006792:	f04f 33ff 	mov.w	r3, #4294967295
 8006796:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006798:	69bb      	ldr	r3, [r7, #24]
	}
 800679a:	4618      	mov	r0, r3
 800679c:	3720      	adds	r7, #32
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
	...

080067a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b088      	sub	sp, #32
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]
 80067b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80067b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067b4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	461a      	mov	r2, r3
 80067bc:	21a5      	movs	r1, #165	@ 0xa5
 80067be:	f002 f959 	bl	8008a74 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80067c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80067cc:	3b01      	subs	r3, #1
 80067ce:	009b      	lsls	r3, r3, #2
 80067d0:	4413      	add	r3, r2
 80067d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80067d4:	69bb      	ldr	r3, [r7, #24]
 80067d6:	f023 0307 	bic.w	r3, r3, #7
 80067da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	f003 0307 	and.w	r3, r3, #7
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00b      	beq.n	80067fe <prvInitialiseNewTask+0x5a>
	__asm volatile
 80067e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ea:	f383 8811 	msr	BASEPRI, r3
 80067ee:	f3bf 8f6f 	isb	sy
 80067f2:	f3bf 8f4f 	dsb	sy
 80067f6:	617b      	str	r3, [r7, #20]
}
 80067f8:	bf00      	nop
 80067fa:	bf00      	nop
 80067fc:	e7fd      	b.n	80067fa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d01f      	beq.n	8006844 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006804:	2300      	movs	r3, #0
 8006806:	61fb      	str	r3, [r7, #28]
 8006808:	e012      	b.n	8006830 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800680a:	68ba      	ldr	r2, [r7, #8]
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	4413      	add	r3, r2
 8006810:	7819      	ldrb	r1, [r3, #0]
 8006812:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	4413      	add	r3, r2
 8006818:	3334      	adds	r3, #52	@ 0x34
 800681a:	460a      	mov	r2, r1
 800681c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800681e:	68ba      	ldr	r2, [r7, #8]
 8006820:	69fb      	ldr	r3, [r7, #28]
 8006822:	4413      	add	r3, r2
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d006      	beq.n	8006838 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800682a:	69fb      	ldr	r3, [r7, #28]
 800682c:	3301      	adds	r3, #1
 800682e:	61fb      	str	r3, [r7, #28]
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	2b0f      	cmp	r3, #15
 8006834:	d9e9      	bls.n	800680a <prvInitialiseNewTask+0x66>
 8006836:	e000      	b.n	800683a <prvInitialiseNewTask+0x96>
			{
				break;
 8006838:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800683a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800683c:	2200      	movs	r2, #0
 800683e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006842:	e003      	b.n	800684c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006846:	2200      	movs	r2, #0
 8006848:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800684c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800684e:	2b37      	cmp	r3, #55	@ 0x37
 8006850:	d901      	bls.n	8006856 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006852:	2337      	movs	r3, #55	@ 0x37
 8006854:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006858:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800685a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800685c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800685e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006860:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006864:	2200      	movs	r2, #0
 8006866:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686a:	3304      	adds	r3, #4
 800686c:	4618      	mov	r0, r3
 800686e:	f7ff f965 	bl	8005b3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006874:	3318      	adds	r3, #24
 8006876:	4618      	mov	r0, r3
 8006878:	f7ff f960 	bl	8005b3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800687c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800687e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006880:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006884:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800688c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006890:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006894:	2200      	movs	r2, #0
 8006896:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800689a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800689c:	2200      	movs	r2, #0
 800689e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80068a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a4:	3354      	adds	r3, #84	@ 0x54
 80068a6:	224c      	movs	r2, #76	@ 0x4c
 80068a8:	2100      	movs	r1, #0
 80068aa:	4618      	mov	r0, r3
 80068ac:	f002 f8e2 	bl	8008a74 <memset>
 80068b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b2:	4a0d      	ldr	r2, [pc, #52]	@ (80068e8 <prvInitialiseNewTask+0x144>)
 80068b4:	659a      	str	r2, [r3, #88]	@ 0x58
 80068b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b8:	4a0c      	ldr	r2, [pc, #48]	@ (80068ec <prvInitialiseNewTask+0x148>)
 80068ba:	65da      	str	r2, [r3, #92]	@ 0x5c
 80068bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068be:	4a0c      	ldr	r2, [pc, #48]	@ (80068f0 <prvInitialiseNewTask+0x14c>)
 80068c0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80068c2:	683a      	ldr	r2, [r7, #0]
 80068c4:	68f9      	ldr	r1, [r7, #12]
 80068c6:	69b8      	ldr	r0, [r7, #24]
 80068c8:	f001 f9fe 	bl	8007cc8 <pxPortInitialiseStack>
 80068cc:	4602      	mov	r2, r0
 80068ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80068d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d002      	beq.n	80068de <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80068d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068de:	bf00      	nop
 80068e0:	3720      	adds	r7, #32
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	20005500 	.word	0x20005500
 80068ec:	20005568 	.word	0x20005568
 80068f0:	200055d0 	.word	0x200055d0

080068f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80068fc:	f001 fb14 	bl	8007f28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006900:	4b2d      	ldr	r3, [pc, #180]	@ (80069b8 <prvAddNewTaskToReadyList+0xc4>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	3301      	adds	r3, #1
 8006906:	4a2c      	ldr	r2, [pc, #176]	@ (80069b8 <prvAddNewTaskToReadyList+0xc4>)
 8006908:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800690a:	4b2c      	ldr	r3, [pc, #176]	@ (80069bc <prvAddNewTaskToReadyList+0xc8>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d109      	bne.n	8006926 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006912:	4a2a      	ldr	r2, [pc, #168]	@ (80069bc <prvAddNewTaskToReadyList+0xc8>)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006918:	4b27      	ldr	r3, [pc, #156]	@ (80069b8 <prvAddNewTaskToReadyList+0xc4>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2b01      	cmp	r3, #1
 800691e:	d110      	bne.n	8006942 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006920:	f000 fc9a 	bl	8007258 <prvInitialiseTaskLists>
 8006924:	e00d      	b.n	8006942 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006926:	4b26      	ldr	r3, [pc, #152]	@ (80069c0 <prvAddNewTaskToReadyList+0xcc>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d109      	bne.n	8006942 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800692e:	4b23      	ldr	r3, [pc, #140]	@ (80069bc <prvAddNewTaskToReadyList+0xc8>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006938:	429a      	cmp	r2, r3
 800693a:	d802      	bhi.n	8006942 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800693c:	4a1f      	ldr	r2, [pc, #124]	@ (80069bc <prvAddNewTaskToReadyList+0xc8>)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006942:	4b20      	ldr	r3, [pc, #128]	@ (80069c4 <prvAddNewTaskToReadyList+0xd0>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	3301      	adds	r3, #1
 8006948:	4a1e      	ldr	r2, [pc, #120]	@ (80069c4 <prvAddNewTaskToReadyList+0xd0>)
 800694a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800694c:	4b1d      	ldr	r3, [pc, #116]	@ (80069c4 <prvAddNewTaskToReadyList+0xd0>)
 800694e:	681a      	ldr	r2, [r3, #0]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006958:	4b1b      	ldr	r3, [pc, #108]	@ (80069c8 <prvAddNewTaskToReadyList+0xd4>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	429a      	cmp	r2, r3
 800695e:	d903      	bls.n	8006968 <prvAddNewTaskToReadyList+0x74>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006964:	4a18      	ldr	r2, [pc, #96]	@ (80069c8 <prvAddNewTaskToReadyList+0xd4>)
 8006966:	6013      	str	r3, [r2, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800696c:	4613      	mov	r3, r2
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	4413      	add	r3, r2
 8006972:	009b      	lsls	r3, r3, #2
 8006974:	4a15      	ldr	r2, [pc, #84]	@ (80069cc <prvAddNewTaskToReadyList+0xd8>)
 8006976:	441a      	add	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	3304      	adds	r3, #4
 800697c:	4619      	mov	r1, r3
 800697e:	4610      	mov	r0, r2
 8006980:	f7ff f8e9 	bl	8005b56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006984:	f001 fb02 	bl	8007f8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006988:	4b0d      	ldr	r3, [pc, #52]	@ (80069c0 <prvAddNewTaskToReadyList+0xcc>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00e      	beq.n	80069ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006990:	4b0a      	ldr	r3, [pc, #40]	@ (80069bc <prvAddNewTaskToReadyList+0xc8>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800699a:	429a      	cmp	r2, r3
 800699c:	d207      	bcs.n	80069ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800699e:	4b0c      	ldr	r3, [pc, #48]	@ (80069d0 <prvAddNewTaskToReadyList+0xdc>)
 80069a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069a4:	601a      	str	r2, [r3, #0]
 80069a6:	f3bf 8f4f 	dsb	sy
 80069aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80069ae:	bf00      	nop
 80069b0:	3708      	adds	r7, #8
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	20001780 	.word	0x20001780
 80069bc:	200012ac 	.word	0x200012ac
 80069c0:	2000178c 	.word	0x2000178c
 80069c4:	2000179c 	.word	0x2000179c
 80069c8:	20001788 	.word	0x20001788
 80069cc:	200012b0 	.word	0x200012b0
 80069d0:	e000ed04 	.word	0xe000ed04

080069d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b08a      	sub	sp, #40	@ 0x28
 80069d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80069da:	2300      	movs	r3, #0
 80069dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80069de:	2300      	movs	r3, #0
 80069e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80069e2:	463a      	mov	r2, r7
 80069e4:	1d39      	adds	r1, r7, #4
 80069e6:	f107 0308 	add.w	r3, r7, #8
 80069ea:	4618      	mov	r0, r3
 80069ec:	f7fe fe5c 	bl	80056a8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80069f0:	6839      	ldr	r1, [r7, #0]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	68ba      	ldr	r2, [r7, #8]
 80069f6:	9202      	str	r2, [sp, #8]
 80069f8:	9301      	str	r3, [sp, #4]
 80069fa:	2300      	movs	r3, #0
 80069fc:	9300      	str	r3, [sp, #0]
 80069fe:	2300      	movs	r3, #0
 8006a00:	460a      	mov	r2, r1
 8006a02:	4924      	ldr	r1, [pc, #144]	@ (8006a94 <vTaskStartScheduler+0xc0>)
 8006a04:	4824      	ldr	r0, [pc, #144]	@ (8006a98 <vTaskStartScheduler+0xc4>)
 8006a06:	f7ff fe27 	bl	8006658 <xTaskCreateStatic>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	4a23      	ldr	r2, [pc, #140]	@ (8006a9c <vTaskStartScheduler+0xc8>)
 8006a0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006a10:	4b22      	ldr	r3, [pc, #136]	@ (8006a9c <vTaskStartScheduler+0xc8>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d002      	beq.n	8006a1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	617b      	str	r3, [r7, #20]
 8006a1c:	e001      	b.n	8006a22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d102      	bne.n	8006a2e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006a28:	f000 fdd4 	bl	80075d4 <xTimerCreateTimerTask>
 8006a2c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d11b      	bne.n	8006a6c <vTaskStartScheduler+0x98>
	__asm volatile
 8006a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a38:	f383 8811 	msr	BASEPRI, r3
 8006a3c:	f3bf 8f6f 	isb	sy
 8006a40:	f3bf 8f4f 	dsb	sy
 8006a44:	613b      	str	r3, [r7, #16]
}
 8006a46:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006a48:	4b15      	ldr	r3, [pc, #84]	@ (8006aa0 <vTaskStartScheduler+0xcc>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	3354      	adds	r3, #84	@ 0x54
 8006a4e:	4a15      	ldr	r2, [pc, #84]	@ (8006aa4 <vTaskStartScheduler+0xd0>)
 8006a50:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006a52:	4b15      	ldr	r3, [pc, #84]	@ (8006aa8 <vTaskStartScheduler+0xd4>)
 8006a54:	f04f 32ff 	mov.w	r2, #4294967295
 8006a58:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006a5a:	4b14      	ldr	r3, [pc, #80]	@ (8006aac <vTaskStartScheduler+0xd8>)
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006a60:	4b13      	ldr	r3, [pc, #76]	@ (8006ab0 <vTaskStartScheduler+0xdc>)
 8006a62:	2200      	movs	r2, #0
 8006a64:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006a66:	f001 f9bb 	bl	8007de0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006a6a:	e00f      	b.n	8006a8c <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a72:	d10b      	bne.n	8006a8c <vTaskStartScheduler+0xb8>
	__asm volatile
 8006a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a78:	f383 8811 	msr	BASEPRI, r3
 8006a7c:	f3bf 8f6f 	isb	sy
 8006a80:	f3bf 8f4f 	dsb	sy
 8006a84:	60fb      	str	r3, [r7, #12]
}
 8006a86:	bf00      	nop
 8006a88:	bf00      	nop
 8006a8a:	e7fd      	b.n	8006a88 <vTaskStartScheduler+0xb4>
}
 8006a8c:	bf00      	nop
 8006a8e:	3718      	adds	r7, #24
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	08009bfc 	.word	0x08009bfc
 8006a98:	08007229 	.word	0x08007229
 8006a9c:	200017a4 	.word	0x200017a4
 8006aa0:	200012ac 	.word	0x200012ac
 8006aa4:	2000001c 	.word	0x2000001c
 8006aa8:	200017a0 	.word	0x200017a0
 8006aac:	2000178c 	.word	0x2000178c
 8006ab0:	20001784 	.word	0x20001784

08006ab4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006ab8:	4b04      	ldr	r3, [pc, #16]	@ (8006acc <vTaskSuspendAll+0x18>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	3301      	adds	r3, #1
 8006abe:	4a03      	ldr	r2, [pc, #12]	@ (8006acc <vTaskSuspendAll+0x18>)
 8006ac0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006ac2:	bf00      	nop
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr
 8006acc:	200017a8 	.word	0x200017a8

08006ad0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b084      	sub	sp, #16
 8006ad4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006ada:	2300      	movs	r3, #0
 8006adc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006ade:	4b42      	ldr	r3, [pc, #264]	@ (8006be8 <xTaskResumeAll+0x118>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d10b      	bne.n	8006afe <xTaskResumeAll+0x2e>
	__asm volatile
 8006ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aea:	f383 8811 	msr	BASEPRI, r3
 8006aee:	f3bf 8f6f 	isb	sy
 8006af2:	f3bf 8f4f 	dsb	sy
 8006af6:	603b      	str	r3, [r7, #0]
}
 8006af8:	bf00      	nop
 8006afa:	bf00      	nop
 8006afc:	e7fd      	b.n	8006afa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006afe:	f001 fa13 	bl	8007f28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006b02:	4b39      	ldr	r3, [pc, #228]	@ (8006be8 <xTaskResumeAll+0x118>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	3b01      	subs	r3, #1
 8006b08:	4a37      	ldr	r2, [pc, #220]	@ (8006be8 <xTaskResumeAll+0x118>)
 8006b0a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b0c:	4b36      	ldr	r3, [pc, #216]	@ (8006be8 <xTaskResumeAll+0x118>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d162      	bne.n	8006bda <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b14:	4b35      	ldr	r3, [pc, #212]	@ (8006bec <xTaskResumeAll+0x11c>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d05e      	beq.n	8006bda <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b1c:	e02f      	b.n	8006b7e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b1e:	4b34      	ldr	r3, [pc, #208]	@ (8006bf0 <xTaskResumeAll+0x120>)
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	3318      	adds	r3, #24
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7ff f870 	bl	8005c10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	3304      	adds	r3, #4
 8006b34:	4618      	mov	r0, r3
 8006b36:	f7ff f86b 	bl	8005c10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b3e:	4b2d      	ldr	r3, [pc, #180]	@ (8006bf4 <xTaskResumeAll+0x124>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d903      	bls.n	8006b4e <xTaskResumeAll+0x7e>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b4a:	4a2a      	ldr	r2, [pc, #168]	@ (8006bf4 <xTaskResumeAll+0x124>)
 8006b4c:	6013      	str	r3, [r2, #0]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b52:	4613      	mov	r3, r2
 8006b54:	009b      	lsls	r3, r3, #2
 8006b56:	4413      	add	r3, r2
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	4a27      	ldr	r2, [pc, #156]	@ (8006bf8 <xTaskResumeAll+0x128>)
 8006b5c:	441a      	add	r2, r3
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	3304      	adds	r3, #4
 8006b62:	4619      	mov	r1, r3
 8006b64:	4610      	mov	r0, r2
 8006b66:	f7fe fff6 	bl	8005b56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b6e:	4b23      	ldr	r3, [pc, #140]	@ (8006bfc <xTaskResumeAll+0x12c>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d302      	bcc.n	8006b7e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006b78:	4b21      	ldr	r3, [pc, #132]	@ (8006c00 <xTaskResumeAll+0x130>)
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b7e:	4b1c      	ldr	r3, [pc, #112]	@ (8006bf0 <xTaskResumeAll+0x120>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1cb      	bne.n	8006b1e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d001      	beq.n	8006b90 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006b8c:	f000 fc08 	bl	80073a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006b90:	4b1c      	ldr	r3, [pc, #112]	@ (8006c04 <xTaskResumeAll+0x134>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d010      	beq.n	8006bbe <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006b9c:	f000 f846 	bl	8006c2c <xTaskIncrementTick>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d002      	beq.n	8006bac <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006ba6:	4b16      	ldr	r3, [pc, #88]	@ (8006c00 <xTaskResumeAll+0x130>)
 8006ba8:	2201      	movs	r2, #1
 8006baa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1f1      	bne.n	8006b9c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006bb8:	4b12      	ldr	r3, [pc, #72]	@ (8006c04 <xTaskResumeAll+0x134>)
 8006bba:	2200      	movs	r2, #0
 8006bbc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006bbe:	4b10      	ldr	r3, [pc, #64]	@ (8006c00 <xTaskResumeAll+0x130>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d009      	beq.n	8006bda <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006bca:	4b0f      	ldr	r3, [pc, #60]	@ (8006c08 <xTaskResumeAll+0x138>)
 8006bcc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bd0:	601a      	str	r2, [r3, #0]
 8006bd2:	f3bf 8f4f 	dsb	sy
 8006bd6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006bda:	f001 f9d7 	bl	8007f8c <vPortExitCritical>

	return xAlreadyYielded;
 8006bde:	68bb      	ldr	r3, [r7, #8]
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3710      	adds	r7, #16
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	200017a8 	.word	0x200017a8
 8006bec:	20001780 	.word	0x20001780
 8006bf0:	20001740 	.word	0x20001740
 8006bf4:	20001788 	.word	0x20001788
 8006bf8:	200012b0 	.word	0x200012b0
 8006bfc:	200012ac 	.word	0x200012ac
 8006c00:	20001794 	.word	0x20001794
 8006c04:	20001790 	.word	0x20001790
 8006c08:	e000ed04 	.word	0xe000ed04

08006c0c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006c12:	4b05      	ldr	r3, [pc, #20]	@ (8006c28 <xTaskGetTickCount+0x1c>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006c18:	687b      	ldr	r3, [r7, #4]
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	370c      	adds	r7, #12
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr
 8006c26:	bf00      	nop
 8006c28:	20001784 	.word	0x20001784

08006c2c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b086      	sub	sp, #24
 8006c30:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006c32:	2300      	movs	r3, #0
 8006c34:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c36:	4b4f      	ldr	r3, [pc, #316]	@ (8006d74 <xTaskIncrementTick+0x148>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	f040 8090 	bne.w	8006d60 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006c40:	4b4d      	ldr	r3, [pc, #308]	@ (8006d78 <xTaskIncrementTick+0x14c>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	3301      	adds	r3, #1
 8006c46:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006c48:	4a4b      	ldr	r2, [pc, #300]	@ (8006d78 <xTaskIncrementTick+0x14c>)
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d121      	bne.n	8006c98 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006c54:	4b49      	ldr	r3, [pc, #292]	@ (8006d7c <xTaskIncrementTick+0x150>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00b      	beq.n	8006c76 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c62:	f383 8811 	msr	BASEPRI, r3
 8006c66:	f3bf 8f6f 	isb	sy
 8006c6a:	f3bf 8f4f 	dsb	sy
 8006c6e:	603b      	str	r3, [r7, #0]
}
 8006c70:	bf00      	nop
 8006c72:	bf00      	nop
 8006c74:	e7fd      	b.n	8006c72 <xTaskIncrementTick+0x46>
 8006c76:	4b41      	ldr	r3, [pc, #260]	@ (8006d7c <xTaskIncrementTick+0x150>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	60fb      	str	r3, [r7, #12]
 8006c7c:	4b40      	ldr	r3, [pc, #256]	@ (8006d80 <xTaskIncrementTick+0x154>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a3e      	ldr	r2, [pc, #248]	@ (8006d7c <xTaskIncrementTick+0x150>)
 8006c82:	6013      	str	r3, [r2, #0]
 8006c84:	4a3e      	ldr	r2, [pc, #248]	@ (8006d80 <xTaskIncrementTick+0x154>)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6013      	str	r3, [r2, #0]
 8006c8a:	4b3e      	ldr	r3, [pc, #248]	@ (8006d84 <xTaskIncrementTick+0x158>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	3301      	adds	r3, #1
 8006c90:	4a3c      	ldr	r2, [pc, #240]	@ (8006d84 <xTaskIncrementTick+0x158>)
 8006c92:	6013      	str	r3, [r2, #0]
 8006c94:	f000 fb84 	bl	80073a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006c98:	4b3b      	ldr	r3, [pc, #236]	@ (8006d88 <xTaskIncrementTick+0x15c>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	693a      	ldr	r2, [r7, #16]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d349      	bcc.n	8006d36 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ca2:	4b36      	ldr	r3, [pc, #216]	@ (8006d7c <xTaskIncrementTick+0x150>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d104      	bne.n	8006cb6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cac:	4b36      	ldr	r3, [pc, #216]	@ (8006d88 <xTaskIncrementTick+0x15c>)
 8006cae:	f04f 32ff 	mov.w	r2, #4294967295
 8006cb2:	601a      	str	r2, [r3, #0]
					break;
 8006cb4:	e03f      	b.n	8006d36 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cb6:	4b31      	ldr	r3, [pc, #196]	@ (8006d7c <xTaskIncrementTick+0x150>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006cc6:	693a      	ldr	r2, [r7, #16]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d203      	bcs.n	8006cd6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006cce:	4a2e      	ldr	r2, [pc, #184]	@ (8006d88 <xTaskIncrementTick+0x15c>)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006cd4:	e02f      	b.n	8006d36 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	3304      	adds	r3, #4
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7fe ff98 	bl	8005c10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d004      	beq.n	8006cf2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	3318      	adds	r3, #24
 8006cec:	4618      	mov	r0, r3
 8006cee:	f7fe ff8f 	bl	8005c10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cf6:	4b25      	ldr	r3, [pc, #148]	@ (8006d8c <xTaskIncrementTick+0x160>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d903      	bls.n	8006d06 <xTaskIncrementTick+0xda>
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d02:	4a22      	ldr	r2, [pc, #136]	@ (8006d8c <xTaskIncrementTick+0x160>)
 8006d04:	6013      	str	r3, [r2, #0]
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	009b      	lsls	r3, r3, #2
 8006d0e:	4413      	add	r3, r2
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	4a1f      	ldr	r2, [pc, #124]	@ (8006d90 <xTaskIncrementTick+0x164>)
 8006d14:	441a      	add	r2, r3
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	3304      	adds	r3, #4
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	4610      	mov	r0, r2
 8006d1e:	f7fe ff1a 	bl	8005b56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d26:	4b1b      	ldr	r3, [pc, #108]	@ (8006d94 <xTaskIncrementTick+0x168>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d2c:	429a      	cmp	r2, r3
 8006d2e:	d3b8      	bcc.n	8006ca2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006d30:	2301      	movs	r3, #1
 8006d32:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d34:	e7b5      	b.n	8006ca2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006d36:	4b17      	ldr	r3, [pc, #92]	@ (8006d94 <xTaskIncrementTick+0x168>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d3c:	4914      	ldr	r1, [pc, #80]	@ (8006d90 <xTaskIncrementTick+0x164>)
 8006d3e:	4613      	mov	r3, r2
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	4413      	add	r3, r2
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	440b      	add	r3, r1
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d901      	bls.n	8006d52 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006d52:	4b11      	ldr	r3, [pc, #68]	@ (8006d98 <xTaskIncrementTick+0x16c>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d007      	beq.n	8006d6a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	617b      	str	r3, [r7, #20]
 8006d5e:	e004      	b.n	8006d6a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006d60:	4b0e      	ldr	r3, [pc, #56]	@ (8006d9c <xTaskIncrementTick+0x170>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	3301      	adds	r3, #1
 8006d66:	4a0d      	ldr	r2, [pc, #52]	@ (8006d9c <xTaskIncrementTick+0x170>)
 8006d68:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006d6a:	697b      	ldr	r3, [r7, #20]
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3718      	adds	r7, #24
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	200017a8 	.word	0x200017a8
 8006d78:	20001784 	.word	0x20001784
 8006d7c:	20001738 	.word	0x20001738
 8006d80:	2000173c 	.word	0x2000173c
 8006d84:	20001798 	.word	0x20001798
 8006d88:	200017a0 	.word	0x200017a0
 8006d8c:	20001788 	.word	0x20001788
 8006d90:	200012b0 	.word	0x200012b0
 8006d94:	200012ac 	.word	0x200012ac
 8006d98:	20001794 	.word	0x20001794
 8006d9c:	20001790 	.word	0x20001790

08006da0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006da6:	4b2b      	ldr	r3, [pc, #172]	@ (8006e54 <vTaskSwitchContext+0xb4>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d003      	beq.n	8006db6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006dae:	4b2a      	ldr	r3, [pc, #168]	@ (8006e58 <vTaskSwitchContext+0xb8>)
 8006db0:	2201      	movs	r2, #1
 8006db2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006db4:	e047      	b.n	8006e46 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006db6:	4b28      	ldr	r3, [pc, #160]	@ (8006e58 <vTaskSwitchContext+0xb8>)
 8006db8:	2200      	movs	r2, #0
 8006dba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dbc:	4b27      	ldr	r3, [pc, #156]	@ (8006e5c <vTaskSwitchContext+0xbc>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	60fb      	str	r3, [r7, #12]
 8006dc2:	e011      	b.n	8006de8 <vTaskSwitchContext+0x48>
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d10b      	bne.n	8006de2 <vTaskSwitchContext+0x42>
	__asm volatile
 8006dca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dce:	f383 8811 	msr	BASEPRI, r3
 8006dd2:	f3bf 8f6f 	isb	sy
 8006dd6:	f3bf 8f4f 	dsb	sy
 8006dda:	607b      	str	r3, [r7, #4]
}
 8006ddc:	bf00      	nop
 8006dde:	bf00      	nop
 8006de0:	e7fd      	b.n	8006dde <vTaskSwitchContext+0x3e>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	3b01      	subs	r3, #1
 8006de6:	60fb      	str	r3, [r7, #12]
 8006de8:	491d      	ldr	r1, [pc, #116]	@ (8006e60 <vTaskSwitchContext+0xc0>)
 8006dea:	68fa      	ldr	r2, [r7, #12]
 8006dec:	4613      	mov	r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4413      	add	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	440b      	add	r3, r1
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d0e3      	beq.n	8006dc4 <vTaskSwitchContext+0x24>
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	4613      	mov	r3, r2
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	4413      	add	r3, r2
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	4a16      	ldr	r2, [pc, #88]	@ (8006e60 <vTaskSwitchContext+0xc0>)
 8006e08:	4413      	add	r3, r2
 8006e0a:	60bb      	str	r3, [r7, #8]
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	685a      	ldr	r2, [r3, #4]
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	605a      	str	r2, [r3, #4]
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	685a      	ldr	r2, [r3, #4]
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	3308      	adds	r3, #8
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d104      	bne.n	8006e2c <vTaskSwitchContext+0x8c>
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	685a      	ldr	r2, [r3, #4]
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	605a      	str	r2, [r3, #4]
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	4a0c      	ldr	r2, [pc, #48]	@ (8006e64 <vTaskSwitchContext+0xc4>)
 8006e34:	6013      	str	r3, [r2, #0]
 8006e36:	4a09      	ldr	r2, [pc, #36]	@ (8006e5c <vTaskSwitchContext+0xbc>)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006e3c:	4b09      	ldr	r3, [pc, #36]	@ (8006e64 <vTaskSwitchContext+0xc4>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	3354      	adds	r3, #84	@ 0x54
 8006e42:	4a09      	ldr	r2, [pc, #36]	@ (8006e68 <vTaskSwitchContext+0xc8>)
 8006e44:	6013      	str	r3, [r2, #0]
}
 8006e46:	bf00      	nop
 8006e48:	3714      	adds	r7, #20
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e50:	4770      	bx	lr
 8006e52:	bf00      	nop
 8006e54:	200017a8 	.word	0x200017a8
 8006e58:	20001794 	.word	0x20001794
 8006e5c:	20001788 	.word	0x20001788
 8006e60:	200012b0 	.word	0x200012b0
 8006e64:	200012ac 	.word	0x200012ac
 8006e68:	2000001c 	.word	0x2000001c

08006e6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b084      	sub	sp, #16
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10b      	bne.n	8006e94 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e80:	f383 8811 	msr	BASEPRI, r3
 8006e84:	f3bf 8f6f 	isb	sy
 8006e88:	f3bf 8f4f 	dsb	sy
 8006e8c:	60fb      	str	r3, [r7, #12]
}
 8006e8e:	bf00      	nop
 8006e90:	bf00      	nop
 8006e92:	e7fd      	b.n	8006e90 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e94:	4b07      	ldr	r3, [pc, #28]	@ (8006eb4 <vTaskPlaceOnEventList+0x48>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	3318      	adds	r3, #24
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f7fe fe7e 	bl	8005b9e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ea2:	2101      	movs	r1, #1
 8006ea4:	6838      	ldr	r0, [r7, #0]
 8006ea6:	f000 fb41 	bl	800752c <prvAddCurrentTaskToDelayedList>
}
 8006eaa:	bf00      	nop
 8006eac:	3710      	adds	r7, #16
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	200012ac 	.word	0x200012ac

08006eb8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b086      	sub	sp, #24
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	60f8      	str	r0, [r7, #12]
 8006ec0:	60b9      	str	r1, [r7, #8]
 8006ec2:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d10b      	bne.n	8006ee2 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 8006eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ece:	f383 8811 	msr	BASEPRI, r3
 8006ed2:	f3bf 8f6f 	isb	sy
 8006ed6:	f3bf 8f4f 	dsb	sy
 8006eda:	617b      	str	r3, [r7, #20]
}
 8006edc:	bf00      	nop
 8006ede:	bf00      	nop
 8006ee0:	e7fd      	b.n	8006ede <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8006ee2:	4b12      	ldr	r3, [pc, #72]	@ (8006f2c <vTaskPlaceOnUnorderedEventList+0x74>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10b      	bne.n	8006f02 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 8006eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eee:	f383 8811 	msr	BASEPRI, r3
 8006ef2:	f3bf 8f6f 	isb	sy
 8006ef6:	f3bf 8f4f 	dsb	sy
 8006efa:	613b      	str	r3, [r7, #16]
}
 8006efc:	bf00      	nop
 8006efe:	bf00      	nop
 8006f00:	e7fd      	b.n	8006efe <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006f02:	4b0b      	ldr	r3, [pc, #44]	@ (8006f30 <vTaskPlaceOnUnorderedEventList+0x78>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68ba      	ldr	r2, [r7, #8]
 8006f08:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006f0c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f0e:	4b08      	ldr	r3, [pc, #32]	@ (8006f30 <vTaskPlaceOnUnorderedEventList+0x78>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	3318      	adds	r3, #24
 8006f14:	4619      	mov	r1, r3
 8006f16:	68f8      	ldr	r0, [r7, #12]
 8006f18:	f7fe fe1d 	bl	8005b56 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f1c:	2101      	movs	r1, #1
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 fb04 	bl	800752c <prvAddCurrentTaskToDelayedList>
}
 8006f24:	bf00      	nop
 8006f26:	3718      	adds	r7, #24
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	200017a8 	.word	0x200017a8
 8006f30:	200012ac 	.word	0x200012ac

08006f34 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b086      	sub	sp, #24
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d10b      	bne.n	8006f5e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f4a:	f383 8811 	msr	BASEPRI, r3
 8006f4e:	f3bf 8f6f 	isb	sy
 8006f52:	f3bf 8f4f 	dsb	sy
 8006f56:	617b      	str	r3, [r7, #20]
}
 8006f58:	bf00      	nop
 8006f5a:	bf00      	nop
 8006f5c:	e7fd      	b.n	8006f5a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8006f88 <vTaskPlaceOnEventListRestricted+0x54>)
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	3318      	adds	r3, #24
 8006f64:	4619      	mov	r1, r3
 8006f66:	68f8      	ldr	r0, [r7, #12]
 8006f68:	f7fe fdf5 	bl	8005b56 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d002      	beq.n	8006f78 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006f72:	f04f 33ff 	mov.w	r3, #4294967295
 8006f76:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006f78:	6879      	ldr	r1, [r7, #4]
 8006f7a:	68b8      	ldr	r0, [r7, #8]
 8006f7c:	f000 fad6 	bl	800752c <prvAddCurrentTaskToDelayedList>
	}
 8006f80:	bf00      	nop
 8006f82:	3718      	adds	r7, #24
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	200012ac 	.word	0x200012ac

08006f8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b086      	sub	sp, #24
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	68db      	ldr	r3, [r3, #12]
 8006f9a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d10b      	bne.n	8006fba <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006fa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa6:	f383 8811 	msr	BASEPRI, r3
 8006faa:	f3bf 8f6f 	isb	sy
 8006fae:	f3bf 8f4f 	dsb	sy
 8006fb2:	60fb      	str	r3, [r7, #12]
}
 8006fb4:	bf00      	nop
 8006fb6:	bf00      	nop
 8006fb8:	e7fd      	b.n	8006fb6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	3318      	adds	r3, #24
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f7fe fe26 	bl	8005c10 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fc4:	4b1d      	ldr	r3, [pc, #116]	@ (800703c <xTaskRemoveFromEventList+0xb0>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d11d      	bne.n	8007008 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006fcc:	693b      	ldr	r3, [r7, #16]
 8006fce:	3304      	adds	r3, #4
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f7fe fe1d 	bl	8005c10 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fda:	4b19      	ldr	r3, [pc, #100]	@ (8007040 <xTaskRemoveFromEventList+0xb4>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d903      	bls.n	8006fea <xTaskRemoveFromEventList+0x5e>
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fe6:	4a16      	ldr	r2, [pc, #88]	@ (8007040 <xTaskRemoveFromEventList+0xb4>)
 8006fe8:	6013      	str	r3, [r2, #0]
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fee:	4613      	mov	r3, r2
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	4413      	add	r3, r2
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	4a13      	ldr	r2, [pc, #76]	@ (8007044 <xTaskRemoveFromEventList+0xb8>)
 8006ff8:	441a      	add	r2, r3
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	3304      	adds	r3, #4
 8006ffe:	4619      	mov	r1, r3
 8007000:	4610      	mov	r0, r2
 8007002:	f7fe fda8 	bl	8005b56 <vListInsertEnd>
 8007006:	e005      	b.n	8007014 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007008:	693b      	ldr	r3, [r7, #16]
 800700a:	3318      	adds	r3, #24
 800700c:	4619      	mov	r1, r3
 800700e:	480e      	ldr	r0, [pc, #56]	@ (8007048 <xTaskRemoveFromEventList+0xbc>)
 8007010:	f7fe fda1 	bl	8005b56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007018:	4b0c      	ldr	r3, [pc, #48]	@ (800704c <xTaskRemoveFromEventList+0xc0>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800701e:	429a      	cmp	r2, r3
 8007020:	d905      	bls.n	800702e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007022:	2301      	movs	r3, #1
 8007024:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007026:	4b0a      	ldr	r3, [pc, #40]	@ (8007050 <xTaskRemoveFromEventList+0xc4>)
 8007028:	2201      	movs	r2, #1
 800702a:	601a      	str	r2, [r3, #0]
 800702c:	e001      	b.n	8007032 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800702e:	2300      	movs	r3, #0
 8007030:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007032:	697b      	ldr	r3, [r7, #20]
}
 8007034:	4618      	mov	r0, r3
 8007036:	3718      	adds	r7, #24
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}
 800703c:	200017a8 	.word	0x200017a8
 8007040:	20001788 	.word	0x20001788
 8007044:	200012b0 	.word	0x200012b0
 8007048:	20001740 	.word	0x20001740
 800704c:	200012ac 	.word	0x200012ac
 8007050:	20001794 	.word	0x20001794

08007054 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b086      	sub	sp, #24
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800705e:	4b2a      	ldr	r3, [pc, #168]	@ (8007108 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d10b      	bne.n	800707e <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 8007066:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800706a:	f383 8811 	msr	BASEPRI, r3
 800706e:	f3bf 8f6f 	isb	sy
 8007072:	f3bf 8f4f 	dsb	sy
 8007076:	613b      	str	r3, [r7, #16]
}
 8007078:	bf00      	nop
 800707a:	bf00      	nop
 800707c:	e7fd      	b.n	800707a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d10b      	bne.n	80070ac <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 8007094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007098:	f383 8811 	msr	BASEPRI, r3
 800709c:	f3bf 8f6f 	isb	sy
 80070a0:	f3bf 8f4f 	dsb	sy
 80070a4:	60fb      	str	r3, [r7, #12]
}
 80070a6:	bf00      	nop
 80070a8:	bf00      	nop
 80070aa:	e7fd      	b.n	80070a8 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f7fe fdaf 	bl	8005c10 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	3304      	adds	r3, #4
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7fe fdaa 	bl	8005c10 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070c0:	4b12      	ldr	r3, [pc, #72]	@ (800710c <vTaskRemoveFromUnorderedEventList+0xb8>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d903      	bls.n	80070d0 <vTaskRemoveFromUnorderedEventList+0x7c>
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070cc:	4a0f      	ldr	r2, [pc, #60]	@ (800710c <vTaskRemoveFromUnorderedEventList+0xb8>)
 80070ce:	6013      	str	r3, [r2, #0]
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070d4:	4613      	mov	r3, r2
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	4413      	add	r3, r2
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	4a0c      	ldr	r2, [pc, #48]	@ (8007110 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80070de:	441a      	add	r2, r3
 80070e0:	697b      	ldr	r3, [r7, #20]
 80070e2:	3304      	adds	r3, #4
 80070e4:	4619      	mov	r1, r3
 80070e6:	4610      	mov	r0, r2
 80070e8:	f7fe fd35 	bl	8005b56 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070f0:	4b08      	ldr	r3, [pc, #32]	@ (8007114 <vTaskRemoveFromUnorderedEventList+0xc0>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070f6:	429a      	cmp	r2, r3
 80070f8:	d902      	bls.n	8007100 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 80070fa:	4b07      	ldr	r3, [pc, #28]	@ (8007118 <vTaskRemoveFromUnorderedEventList+0xc4>)
 80070fc:	2201      	movs	r2, #1
 80070fe:	601a      	str	r2, [r3, #0]
	}
}
 8007100:	bf00      	nop
 8007102:	3718      	adds	r7, #24
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}
 8007108:	200017a8 	.word	0x200017a8
 800710c:	20001788 	.word	0x20001788
 8007110:	200012b0 	.word	0x200012b0
 8007114:	200012ac 	.word	0x200012ac
 8007118:	20001794 	.word	0x20001794

0800711c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800711c:	b480      	push	{r7}
 800711e:	b083      	sub	sp, #12
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007124:	4b06      	ldr	r3, [pc, #24]	@ (8007140 <vTaskInternalSetTimeOutState+0x24>)
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800712c:	4b05      	ldr	r3, [pc, #20]	@ (8007144 <vTaskInternalSetTimeOutState+0x28>)
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	605a      	str	r2, [r3, #4]
}
 8007134:	bf00      	nop
 8007136:	370c      	adds	r7, #12
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr
 8007140:	20001798 	.word	0x20001798
 8007144:	20001784 	.word	0x20001784

08007148 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b088      	sub	sp, #32
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d10b      	bne.n	8007170 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800715c:	f383 8811 	msr	BASEPRI, r3
 8007160:	f3bf 8f6f 	isb	sy
 8007164:	f3bf 8f4f 	dsb	sy
 8007168:	613b      	str	r3, [r7, #16]
}
 800716a:	bf00      	nop
 800716c:	bf00      	nop
 800716e:	e7fd      	b.n	800716c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d10b      	bne.n	800718e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800717a:	f383 8811 	msr	BASEPRI, r3
 800717e:	f3bf 8f6f 	isb	sy
 8007182:	f3bf 8f4f 	dsb	sy
 8007186:	60fb      	str	r3, [r7, #12]
}
 8007188:	bf00      	nop
 800718a:	bf00      	nop
 800718c:	e7fd      	b.n	800718a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800718e:	f000 fecb 	bl	8007f28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007192:	4b1d      	ldr	r3, [pc, #116]	@ (8007208 <xTaskCheckForTimeOut+0xc0>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	685b      	ldr	r3, [r3, #4]
 800719c:	69ba      	ldr	r2, [r7, #24]
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071aa:	d102      	bne.n	80071b2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80071ac:	2300      	movs	r3, #0
 80071ae:	61fb      	str	r3, [r7, #28]
 80071b0:	e023      	b.n	80071fa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681a      	ldr	r2, [r3, #0]
 80071b6:	4b15      	ldr	r3, [pc, #84]	@ (800720c <xTaskCheckForTimeOut+0xc4>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d007      	beq.n	80071ce <xTaskCheckForTimeOut+0x86>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	69ba      	ldr	r2, [r7, #24]
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d302      	bcc.n	80071ce <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80071c8:	2301      	movs	r3, #1
 80071ca:	61fb      	str	r3, [r7, #28]
 80071cc:	e015      	b.n	80071fa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	697a      	ldr	r2, [r7, #20]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d20b      	bcs.n	80071f0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	1ad2      	subs	r2, r2, r3
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f7ff ff99 	bl	800711c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80071ea:	2300      	movs	r3, #0
 80071ec:	61fb      	str	r3, [r7, #28]
 80071ee:	e004      	b.n	80071fa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	2200      	movs	r2, #0
 80071f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80071f6:	2301      	movs	r3, #1
 80071f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80071fa:	f000 fec7 	bl	8007f8c <vPortExitCritical>

	return xReturn;
 80071fe:	69fb      	ldr	r3, [r7, #28]
}
 8007200:	4618      	mov	r0, r3
 8007202:	3720      	adds	r7, #32
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	20001784 	.word	0x20001784
 800720c:	20001798 	.word	0x20001798

08007210 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007210:	b480      	push	{r7}
 8007212:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007214:	4b03      	ldr	r3, [pc, #12]	@ (8007224 <vTaskMissedYield+0x14>)
 8007216:	2201      	movs	r2, #1
 8007218:	601a      	str	r2, [r3, #0]
}
 800721a:	bf00      	nop
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr
 8007224:	20001794 	.word	0x20001794

08007228 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007230:	f000 f852 	bl	80072d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007234:	4b06      	ldr	r3, [pc, #24]	@ (8007250 <prvIdleTask+0x28>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	2b01      	cmp	r3, #1
 800723a:	d9f9      	bls.n	8007230 <prvIdleTask+0x8>
			{
				taskYIELD();
 800723c:	4b05      	ldr	r3, [pc, #20]	@ (8007254 <prvIdleTask+0x2c>)
 800723e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007242:	601a      	str	r2, [r3, #0]
 8007244:	f3bf 8f4f 	dsb	sy
 8007248:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800724c:	e7f0      	b.n	8007230 <prvIdleTask+0x8>
 800724e:	bf00      	nop
 8007250:	200012b0 	.word	0x200012b0
 8007254:	e000ed04 	.word	0xe000ed04

08007258 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800725e:	2300      	movs	r3, #0
 8007260:	607b      	str	r3, [r7, #4]
 8007262:	e00c      	b.n	800727e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	4613      	mov	r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	4413      	add	r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	4a12      	ldr	r2, [pc, #72]	@ (80072b8 <prvInitialiseTaskLists+0x60>)
 8007270:	4413      	add	r3, r2
 8007272:	4618      	mov	r0, r3
 8007274:	f7fe fc42 	bl	8005afc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	3301      	adds	r3, #1
 800727c:	607b      	str	r3, [r7, #4]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2b37      	cmp	r3, #55	@ 0x37
 8007282:	d9ef      	bls.n	8007264 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007284:	480d      	ldr	r0, [pc, #52]	@ (80072bc <prvInitialiseTaskLists+0x64>)
 8007286:	f7fe fc39 	bl	8005afc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800728a:	480d      	ldr	r0, [pc, #52]	@ (80072c0 <prvInitialiseTaskLists+0x68>)
 800728c:	f7fe fc36 	bl	8005afc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007290:	480c      	ldr	r0, [pc, #48]	@ (80072c4 <prvInitialiseTaskLists+0x6c>)
 8007292:	f7fe fc33 	bl	8005afc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007296:	480c      	ldr	r0, [pc, #48]	@ (80072c8 <prvInitialiseTaskLists+0x70>)
 8007298:	f7fe fc30 	bl	8005afc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800729c:	480b      	ldr	r0, [pc, #44]	@ (80072cc <prvInitialiseTaskLists+0x74>)
 800729e:	f7fe fc2d 	bl	8005afc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80072a2:	4b0b      	ldr	r3, [pc, #44]	@ (80072d0 <prvInitialiseTaskLists+0x78>)
 80072a4:	4a05      	ldr	r2, [pc, #20]	@ (80072bc <prvInitialiseTaskLists+0x64>)
 80072a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80072a8:	4b0a      	ldr	r3, [pc, #40]	@ (80072d4 <prvInitialiseTaskLists+0x7c>)
 80072aa:	4a05      	ldr	r2, [pc, #20]	@ (80072c0 <prvInitialiseTaskLists+0x68>)
 80072ac:	601a      	str	r2, [r3, #0]
}
 80072ae:	bf00      	nop
 80072b0:	3708      	adds	r7, #8
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	200012b0 	.word	0x200012b0
 80072bc:	20001710 	.word	0x20001710
 80072c0:	20001724 	.word	0x20001724
 80072c4:	20001740 	.word	0x20001740
 80072c8:	20001754 	.word	0x20001754
 80072cc:	2000176c 	.word	0x2000176c
 80072d0:	20001738 	.word	0x20001738
 80072d4:	2000173c 	.word	0x2000173c

080072d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80072de:	e019      	b.n	8007314 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80072e0:	f000 fe22 	bl	8007f28 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072e4:	4b10      	ldr	r3, [pc, #64]	@ (8007328 <prvCheckTasksWaitingTermination+0x50>)
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	3304      	adds	r3, #4
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7fe fc8d 	bl	8005c10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80072f6:	4b0d      	ldr	r3, [pc, #52]	@ (800732c <prvCheckTasksWaitingTermination+0x54>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	3b01      	subs	r3, #1
 80072fc:	4a0b      	ldr	r2, [pc, #44]	@ (800732c <prvCheckTasksWaitingTermination+0x54>)
 80072fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007300:	4b0b      	ldr	r3, [pc, #44]	@ (8007330 <prvCheckTasksWaitingTermination+0x58>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	3b01      	subs	r3, #1
 8007306:	4a0a      	ldr	r2, [pc, #40]	@ (8007330 <prvCheckTasksWaitingTermination+0x58>)
 8007308:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800730a:	f000 fe3f 	bl	8007f8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f810 	bl	8007334 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007314:	4b06      	ldr	r3, [pc, #24]	@ (8007330 <prvCheckTasksWaitingTermination+0x58>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1e1      	bne.n	80072e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800731c:	bf00      	nop
 800731e:	bf00      	nop
 8007320:	3708      	adds	r7, #8
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	20001754 	.word	0x20001754
 800732c:	20001780 	.word	0x20001780
 8007330:	20001768 	.word	0x20001768

08007334 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	3354      	adds	r3, #84	@ 0x54
 8007340:	4618      	mov	r0, r3
 8007342:	f001 fc1d 	bl	8008b80 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800734c:	2b00      	cmp	r3, #0
 800734e:	d108      	bne.n	8007362 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007354:	4618      	mov	r0, r3
 8007356:	f000 ffd7 	bl	8008308 <vPortFree>
				vPortFree( pxTCB );
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 ffd4 	bl	8008308 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007360:	e019      	b.n	8007396 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007368:	2b01      	cmp	r3, #1
 800736a:	d103      	bne.n	8007374 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 ffcb 	bl	8008308 <vPortFree>
	}
 8007372:	e010      	b.n	8007396 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800737a:	2b02      	cmp	r3, #2
 800737c:	d00b      	beq.n	8007396 <prvDeleteTCB+0x62>
	__asm volatile
 800737e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007382:	f383 8811 	msr	BASEPRI, r3
 8007386:	f3bf 8f6f 	isb	sy
 800738a:	f3bf 8f4f 	dsb	sy
 800738e:	60fb      	str	r3, [r7, #12]
}
 8007390:	bf00      	nop
 8007392:	bf00      	nop
 8007394:	e7fd      	b.n	8007392 <prvDeleteTCB+0x5e>
	}
 8007396:	bf00      	nop
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
	...

080073a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073a6:	4b0c      	ldr	r3, [pc, #48]	@ (80073d8 <prvResetNextTaskUnblockTime+0x38>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d104      	bne.n	80073ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80073b0:	4b0a      	ldr	r3, [pc, #40]	@ (80073dc <prvResetNextTaskUnblockTime+0x3c>)
 80073b2:	f04f 32ff 	mov.w	r2, #4294967295
 80073b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80073b8:	e008      	b.n	80073cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073ba:	4b07      	ldr	r3, [pc, #28]	@ (80073d8 <prvResetNextTaskUnblockTime+0x38>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	4a04      	ldr	r2, [pc, #16]	@ (80073dc <prvResetNextTaskUnblockTime+0x3c>)
 80073ca:	6013      	str	r3, [r2, #0]
}
 80073cc:	bf00      	nop
 80073ce:	370c      	adds	r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr
 80073d8:	20001738 	.word	0x20001738
 80073dc:	200017a0 	.word	0x200017a0

080073e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80073e6:	4b0b      	ldr	r3, [pc, #44]	@ (8007414 <xTaskGetSchedulerState+0x34>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d102      	bne.n	80073f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80073ee:	2301      	movs	r3, #1
 80073f0:	607b      	str	r3, [r7, #4]
 80073f2:	e008      	b.n	8007406 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073f4:	4b08      	ldr	r3, [pc, #32]	@ (8007418 <xTaskGetSchedulerState+0x38>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d102      	bne.n	8007402 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80073fc:	2302      	movs	r3, #2
 80073fe:	607b      	str	r3, [r7, #4]
 8007400:	e001      	b.n	8007406 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007402:	2300      	movs	r3, #0
 8007404:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007406:	687b      	ldr	r3, [r7, #4]
	}
 8007408:	4618      	mov	r0, r3
 800740a:	370c      	adds	r7, #12
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr
 8007414:	2000178c 	.word	0x2000178c
 8007418:	200017a8 	.word	0x200017a8

0800741c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800741c:	b580      	push	{r7, lr}
 800741e:	b086      	sub	sp, #24
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007428:	2300      	movs	r3, #0
 800742a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d058      	beq.n	80074e4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007432:	4b2f      	ldr	r3, [pc, #188]	@ (80074f0 <xTaskPriorityDisinherit+0xd4>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	693a      	ldr	r2, [r7, #16]
 8007438:	429a      	cmp	r2, r3
 800743a:	d00b      	beq.n	8007454 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800743c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007440:	f383 8811 	msr	BASEPRI, r3
 8007444:	f3bf 8f6f 	isb	sy
 8007448:	f3bf 8f4f 	dsb	sy
 800744c:	60fb      	str	r3, [r7, #12]
}
 800744e:	bf00      	nop
 8007450:	bf00      	nop
 8007452:	e7fd      	b.n	8007450 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007458:	2b00      	cmp	r3, #0
 800745a:	d10b      	bne.n	8007474 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800745c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007460:	f383 8811 	msr	BASEPRI, r3
 8007464:	f3bf 8f6f 	isb	sy
 8007468:	f3bf 8f4f 	dsb	sy
 800746c:	60bb      	str	r3, [r7, #8]
}
 800746e:	bf00      	nop
 8007470:	bf00      	nop
 8007472:	e7fd      	b.n	8007470 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007478:	1e5a      	subs	r2, r3, #1
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007486:	429a      	cmp	r2, r3
 8007488:	d02c      	beq.n	80074e4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800748e:	2b00      	cmp	r3, #0
 8007490:	d128      	bne.n	80074e4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	3304      	adds	r3, #4
 8007496:	4618      	mov	r0, r3
 8007498:	f7fe fbba 	bl	8005c10 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074a8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074b4:	4b0f      	ldr	r3, [pc, #60]	@ (80074f4 <xTaskPriorityDisinherit+0xd8>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	429a      	cmp	r2, r3
 80074ba:	d903      	bls.n	80074c4 <xTaskPriorityDisinherit+0xa8>
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074c0:	4a0c      	ldr	r2, [pc, #48]	@ (80074f4 <xTaskPriorityDisinherit+0xd8>)
 80074c2:	6013      	str	r3, [r2, #0]
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074c8:	4613      	mov	r3, r2
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	4413      	add	r3, r2
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	4a09      	ldr	r2, [pc, #36]	@ (80074f8 <xTaskPriorityDisinherit+0xdc>)
 80074d2:	441a      	add	r2, r3
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	3304      	adds	r3, #4
 80074d8:	4619      	mov	r1, r3
 80074da:	4610      	mov	r0, r2
 80074dc:	f7fe fb3b 	bl	8005b56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80074e0:	2301      	movs	r3, #1
 80074e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80074e4:	697b      	ldr	r3, [r7, #20]
	}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3718      	adds	r7, #24
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	200012ac 	.word	0x200012ac
 80074f4:	20001788 	.word	0x20001788
 80074f8:	200012b0 	.word	0x200012b0

080074fc <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8007502:	4b09      	ldr	r3, [pc, #36]	@ (8007528 <uxTaskResetEventItemValue+0x2c>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	699b      	ldr	r3, [r3, #24]
 8007508:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800750a:	4b07      	ldr	r3, [pc, #28]	@ (8007528 <uxTaskResetEventItemValue+0x2c>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007510:	4b05      	ldr	r3, [pc, #20]	@ (8007528 <uxTaskResetEventItemValue+0x2c>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8007518:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800751a:	687b      	ldr	r3, [r7, #4]
}
 800751c:	4618      	mov	r0, r3
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr
 8007528:	200012ac 	.word	0x200012ac

0800752c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007536:	4b21      	ldr	r3, [pc, #132]	@ (80075bc <prvAddCurrentTaskToDelayedList+0x90>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800753c:	4b20      	ldr	r3, [pc, #128]	@ (80075c0 <prvAddCurrentTaskToDelayedList+0x94>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	3304      	adds	r3, #4
 8007542:	4618      	mov	r0, r3
 8007544:	f7fe fb64 	bl	8005c10 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800754e:	d10a      	bne.n	8007566 <prvAddCurrentTaskToDelayedList+0x3a>
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d007      	beq.n	8007566 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007556:	4b1a      	ldr	r3, [pc, #104]	@ (80075c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	3304      	adds	r3, #4
 800755c:	4619      	mov	r1, r3
 800755e:	4819      	ldr	r0, [pc, #100]	@ (80075c4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007560:	f7fe faf9 	bl	8005b56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007564:	e026      	b.n	80075b4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4413      	add	r3, r2
 800756c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800756e:	4b14      	ldr	r3, [pc, #80]	@ (80075c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	68ba      	ldr	r2, [r7, #8]
 8007574:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007576:	68ba      	ldr	r2, [r7, #8]
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	429a      	cmp	r2, r3
 800757c:	d209      	bcs.n	8007592 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800757e:	4b12      	ldr	r3, [pc, #72]	@ (80075c8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	4b0f      	ldr	r3, [pc, #60]	@ (80075c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	3304      	adds	r3, #4
 8007588:	4619      	mov	r1, r3
 800758a:	4610      	mov	r0, r2
 800758c:	f7fe fb07 	bl	8005b9e <vListInsert>
}
 8007590:	e010      	b.n	80075b4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007592:	4b0e      	ldr	r3, [pc, #56]	@ (80075cc <prvAddCurrentTaskToDelayedList+0xa0>)
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	4b0a      	ldr	r3, [pc, #40]	@ (80075c0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	3304      	adds	r3, #4
 800759c:	4619      	mov	r1, r3
 800759e:	4610      	mov	r0, r2
 80075a0:	f7fe fafd 	bl	8005b9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80075a4:	4b0a      	ldr	r3, [pc, #40]	@ (80075d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	68ba      	ldr	r2, [r7, #8]
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d202      	bcs.n	80075b4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80075ae:	4a08      	ldr	r2, [pc, #32]	@ (80075d0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	6013      	str	r3, [r2, #0]
}
 80075b4:	bf00      	nop
 80075b6:	3710      	adds	r7, #16
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	20001784 	.word	0x20001784
 80075c0:	200012ac 	.word	0x200012ac
 80075c4:	2000176c 	.word	0x2000176c
 80075c8:	2000173c 	.word	0x2000173c
 80075cc:	20001738 	.word	0x20001738
 80075d0:	200017a0 	.word	0x200017a0

080075d4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b08a      	sub	sp, #40	@ 0x28
 80075d8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80075da:	2300      	movs	r3, #0
 80075dc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80075de:	f000 fb13 	bl	8007c08 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80075e2:	4b1d      	ldr	r3, [pc, #116]	@ (8007658 <xTimerCreateTimerTask+0x84>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d021      	beq.n	800762e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80075ea:	2300      	movs	r3, #0
 80075ec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80075ee:	2300      	movs	r3, #0
 80075f0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80075f2:	1d3a      	adds	r2, r7, #4
 80075f4:	f107 0108 	add.w	r1, r7, #8
 80075f8:	f107 030c 	add.w	r3, r7, #12
 80075fc:	4618      	mov	r0, r3
 80075fe:	f7fe f86d 	bl	80056dc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007602:	6879      	ldr	r1, [r7, #4]
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	9202      	str	r2, [sp, #8]
 800760a:	9301      	str	r3, [sp, #4]
 800760c:	2302      	movs	r3, #2
 800760e:	9300      	str	r3, [sp, #0]
 8007610:	2300      	movs	r3, #0
 8007612:	460a      	mov	r2, r1
 8007614:	4911      	ldr	r1, [pc, #68]	@ (800765c <xTimerCreateTimerTask+0x88>)
 8007616:	4812      	ldr	r0, [pc, #72]	@ (8007660 <xTimerCreateTimerTask+0x8c>)
 8007618:	f7ff f81e 	bl	8006658 <xTaskCreateStatic>
 800761c:	4603      	mov	r3, r0
 800761e:	4a11      	ldr	r2, [pc, #68]	@ (8007664 <xTimerCreateTimerTask+0x90>)
 8007620:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007622:	4b10      	ldr	r3, [pc, #64]	@ (8007664 <xTimerCreateTimerTask+0x90>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d001      	beq.n	800762e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800762a:	2301      	movs	r3, #1
 800762c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d10b      	bne.n	800764c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007638:	f383 8811 	msr	BASEPRI, r3
 800763c:	f3bf 8f6f 	isb	sy
 8007640:	f3bf 8f4f 	dsb	sy
 8007644:	613b      	str	r3, [r7, #16]
}
 8007646:	bf00      	nop
 8007648:	bf00      	nop
 800764a:	e7fd      	b.n	8007648 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800764c:	697b      	ldr	r3, [r7, #20]
}
 800764e:	4618      	mov	r0, r3
 8007650:	3718      	adds	r7, #24
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	200017dc 	.word	0x200017dc
 800765c:	08009c04 	.word	0x08009c04
 8007660:	080077a1 	.word	0x080077a1
 8007664:	200017e0 	.word	0x200017e0

08007668 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b08a      	sub	sp, #40	@ 0x28
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	607a      	str	r2, [r7, #4]
 8007674:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007676:	2300      	movs	r3, #0
 8007678:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d10b      	bne.n	8007698 <xTimerGenericCommand+0x30>
	__asm volatile
 8007680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007684:	f383 8811 	msr	BASEPRI, r3
 8007688:	f3bf 8f6f 	isb	sy
 800768c:	f3bf 8f4f 	dsb	sy
 8007690:	623b      	str	r3, [r7, #32]
}
 8007692:	bf00      	nop
 8007694:	bf00      	nop
 8007696:	e7fd      	b.n	8007694 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007698:	4b19      	ldr	r3, [pc, #100]	@ (8007700 <xTimerGenericCommand+0x98>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d02a      	beq.n	80076f6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	2b05      	cmp	r3, #5
 80076b0:	dc18      	bgt.n	80076e4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80076b2:	f7ff fe95 	bl	80073e0 <xTaskGetSchedulerState>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b02      	cmp	r3, #2
 80076ba:	d109      	bne.n	80076d0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80076bc:	4b10      	ldr	r3, [pc, #64]	@ (8007700 <xTimerGenericCommand+0x98>)
 80076be:	6818      	ldr	r0, [r3, #0]
 80076c0:	f107 0110 	add.w	r1, r7, #16
 80076c4:	2300      	movs	r3, #0
 80076c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076c8:	f7fe fbd6 	bl	8005e78 <xQueueGenericSend>
 80076cc:	6278      	str	r0, [r7, #36]	@ 0x24
 80076ce:	e012      	b.n	80076f6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80076d0:	4b0b      	ldr	r3, [pc, #44]	@ (8007700 <xTimerGenericCommand+0x98>)
 80076d2:	6818      	ldr	r0, [r3, #0]
 80076d4:	f107 0110 	add.w	r1, r7, #16
 80076d8:	2300      	movs	r3, #0
 80076da:	2200      	movs	r2, #0
 80076dc:	f7fe fbcc 	bl	8005e78 <xQueueGenericSend>
 80076e0:	6278      	str	r0, [r7, #36]	@ 0x24
 80076e2:	e008      	b.n	80076f6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80076e4:	4b06      	ldr	r3, [pc, #24]	@ (8007700 <xTimerGenericCommand+0x98>)
 80076e6:	6818      	ldr	r0, [r3, #0]
 80076e8:	f107 0110 	add.w	r1, r7, #16
 80076ec:	2300      	movs	r3, #0
 80076ee:	683a      	ldr	r2, [r7, #0]
 80076f0:	f7fe fcc4 	bl	800607c <xQueueGenericSendFromISR>
 80076f4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80076f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3728      	adds	r7, #40	@ 0x28
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	200017dc 	.word	0x200017dc

08007704 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b088      	sub	sp, #32
 8007708:	af02      	add	r7, sp, #8
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800770e:	4b23      	ldr	r3, [pc, #140]	@ (800779c <prvProcessExpiredTimer+0x98>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	68db      	ldr	r3, [r3, #12]
 8007716:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	3304      	adds	r3, #4
 800771c:	4618      	mov	r0, r3
 800771e:	f7fe fa77 	bl	8005c10 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007728:	f003 0304 	and.w	r3, r3, #4
 800772c:	2b00      	cmp	r3, #0
 800772e:	d023      	beq.n	8007778 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	699a      	ldr	r2, [r3, #24]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	18d1      	adds	r1, r2, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	683a      	ldr	r2, [r7, #0]
 800773c:	6978      	ldr	r0, [r7, #20]
 800773e:	f000 f8d5 	bl	80078ec <prvInsertTimerInActiveList>
 8007742:	4603      	mov	r3, r0
 8007744:	2b00      	cmp	r3, #0
 8007746:	d020      	beq.n	800778a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007748:	2300      	movs	r3, #0
 800774a:	9300      	str	r3, [sp, #0]
 800774c:	2300      	movs	r3, #0
 800774e:	687a      	ldr	r2, [r7, #4]
 8007750:	2100      	movs	r1, #0
 8007752:	6978      	ldr	r0, [r7, #20]
 8007754:	f7ff ff88 	bl	8007668 <xTimerGenericCommand>
 8007758:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d114      	bne.n	800778a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007764:	f383 8811 	msr	BASEPRI, r3
 8007768:	f3bf 8f6f 	isb	sy
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	60fb      	str	r3, [r7, #12]
}
 8007772:	bf00      	nop
 8007774:	bf00      	nop
 8007776:	e7fd      	b.n	8007774 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800777e:	f023 0301 	bic.w	r3, r3, #1
 8007782:	b2da      	uxtb	r2, r3
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	6a1b      	ldr	r3, [r3, #32]
 800778e:	6978      	ldr	r0, [r7, #20]
 8007790:	4798      	blx	r3
}
 8007792:	bf00      	nop
 8007794:	3718      	adds	r7, #24
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	200017d4 	.word	0x200017d4

080077a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80077a8:	f107 0308 	add.w	r3, r7, #8
 80077ac:	4618      	mov	r0, r3
 80077ae:	f000 f859 	bl	8007864 <prvGetNextExpireTime>
 80077b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	4619      	mov	r1, r3
 80077b8:	68f8      	ldr	r0, [r7, #12]
 80077ba:	f000 f805 	bl	80077c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80077be:	f000 f8d7 	bl	8007970 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80077c2:	bf00      	nop
 80077c4:	e7f0      	b.n	80077a8 <prvTimerTask+0x8>
	...

080077c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80077d2:	f7ff f96f 	bl	8006ab4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80077d6:	f107 0308 	add.w	r3, r7, #8
 80077da:	4618      	mov	r0, r3
 80077dc:	f000 f866 	bl	80078ac <prvSampleTimeNow>
 80077e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d130      	bne.n	800784a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d10a      	bne.n	8007804 <prvProcessTimerOrBlockTask+0x3c>
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d806      	bhi.n	8007804 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80077f6:	f7ff f96b 	bl	8006ad0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80077fa:	68f9      	ldr	r1, [r7, #12]
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f7ff ff81 	bl	8007704 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007802:	e024      	b.n	800784e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d008      	beq.n	800781c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800780a:	4b13      	ldr	r3, [pc, #76]	@ (8007858 <prvProcessTimerOrBlockTask+0x90>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d101      	bne.n	8007818 <prvProcessTimerOrBlockTask+0x50>
 8007814:	2301      	movs	r3, #1
 8007816:	e000      	b.n	800781a <prvProcessTimerOrBlockTask+0x52>
 8007818:	2300      	movs	r3, #0
 800781a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800781c:	4b0f      	ldr	r3, [pc, #60]	@ (800785c <prvProcessTimerOrBlockTask+0x94>)
 800781e:	6818      	ldr	r0, [r3, #0]
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	1ad3      	subs	r3, r2, r3
 8007826:	683a      	ldr	r2, [r7, #0]
 8007828:	4619      	mov	r1, r3
 800782a:	f7fe fee1 	bl	80065f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800782e:	f7ff f94f 	bl	8006ad0 <xTaskResumeAll>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d10a      	bne.n	800784e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007838:	4b09      	ldr	r3, [pc, #36]	@ (8007860 <prvProcessTimerOrBlockTask+0x98>)
 800783a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800783e:	601a      	str	r2, [r3, #0]
 8007840:	f3bf 8f4f 	dsb	sy
 8007844:	f3bf 8f6f 	isb	sy
}
 8007848:	e001      	b.n	800784e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800784a:	f7ff f941 	bl	8006ad0 <xTaskResumeAll>
}
 800784e:	bf00      	nop
 8007850:	3710      	adds	r7, #16
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
 8007856:	bf00      	nop
 8007858:	200017d8 	.word	0x200017d8
 800785c:	200017dc 	.word	0x200017dc
 8007860:	e000ed04 	.word	0xe000ed04

08007864 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007864:	b480      	push	{r7}
 8007866:	b085      	sub	sp, #20
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800786c:	4b0e      	ldr	r3, [pc, #56]	@ (80078a8 <prvGetNextExpireTime+0x44>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d101      	bne.n	800787a <prvGetNextExpireTime+0x16>
 8007876:	2201      	movs	r2, #1
 8007878:	e000      	b.n	800787c <prvGetNextExpireTime+0x18>
 800787a:	2200      	movs	r2, #0
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d105      	bne.n	8007894 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007888:	4b07      	ldr	r3, [pc, #28]	@ (80078a8 <prvGetNextExpireTime+0x44>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	60fb      	str	r3, [r7, #12]
 8007892:	e001      	b.n	8007898 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007894:	2300      	movs	r3, #0
 8007896:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007898:	68fb      	ldr	r3, [r7, #12]
}
 800789a:	4618      	mov	r0, r3
 800789c:	3714      	adds	r7, #20
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr
 80078a6:	bf00      	nop
 80078a8:	200017d4 	.word	0x200017d4

080078ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80078b4:	f7ff f9aa 	bl	8006c0c <xTaskGetTickCount>
 80078b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80078ba:	4b0b      	ldr	r3, [pc, #44]	@ (80078e8 <prvSampleTimeNow+0x3c>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	68fa      	ldr	r2, [r7, #12]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d205      	bcs.n	80078d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80078c4:	f000 f93a 	bl	8007b3c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	601a      	str	r2, [r3, #0]
 80078ce:	e002      	b.n	80078d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80078d6:	4a04      	ldr	r2, [pc, #16]	@ (80078e8 <prvSampleTimeNow+0x3c>)
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80078dc:	68fb      	ldr	r3, [r7, #12]
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3710      	adds	r7, #16
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	200017e4 	.word	0x200017e4

080078ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b086      	sub	sp, #24
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	607a      	str	r2, [r7, #4]
 80078f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80078fa:	2300      	movs	r3, #0
 80078fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	68ba      	ldr	r2, [r7, #8]
 8007902:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800790a:	68ba      	ldr	r2, [r7, #8]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	429a      	cmp	r2, r3
 8007910:	d812      	bhi.n	8007938 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	1ad2      	subs	r2, r2, r3
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	699b      	ldr	r3, [r3, #24]
 800791c:	429a      	cmp	r2, r3
 800791e:	d302      	bcc.n	8007926 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007920:	2301      	movs	r3, #1
 8007922:	617b      	str	r3, [r7, #20]
 8007924:	e01b      	b.n	800795e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007926:	4b10      	ldr	r3, [pc, #64]	@ (8007968 <prvInsertTimerInActiveList+0x7c>)
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	3304      	adds	r3, #4
 800792e:	4619      	mov	r1, r3
 8007930:	4610      	mov	r0, r2
 8007932:	f7fe f934 	bl	8005b9e <vListInsert>
 8007936:	e012      	b.n	800795e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	429a      	cmp	r2, r3
 800793e:	d206      	bcs.n	800794e <prvInsertTimerInActiveList+0x62>
 8007940:	68ba      	ldr	r2, [r7, #8]
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	429a      	cmp	r2, r3
 8007946:	d302      	bcc.n	800794e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007948:	2301      	movs	r3, #1
 800794a:	617b      	str	r3, [r7, #20]
 800794c:	e007      	b.n	800795e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800794e:	4b07      	ldr	r3, [pc, #28]	@ (800796c <prvInsertTimerInActiveList+0x80>)
 8007950:	681a      	ldr	r2, [r3, #0]
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	3304      	adds	r3, #4
 8007956:	4619      	mov	r1, r3
 8007958:	4610      	mov	r0, r2
 800795a:	f7fe f920 	bl	8005b9e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800795e:	697b      	ldr	r3, [r7, #20]
}
 8007960:	4618      	mov	r0, r3
 8007962:	3718      	adds	r7, #24
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}
 8007968:	200017d8 	.word	0x200017d8
 800796c:	200017d4 	.word	0x200017d4

08007970 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b08e      	sub	sp, #56	@ 0x38
 8007974:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007976:	e0ce      	b.n	8007b16 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	da19      	bge.n	80079b2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800797e:	1d3b      	adds	r3, r7, #4
 8007980:	3304      	adds	r3, #4
 8007982:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007986:	2b00      	cmp	r3, #0
 8007988:	d10b      	bne.n	80079a2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800798a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800798e:	f383 8811 	msr	BASEPRI, r3
 8007992:	f3bf 8f6f 	isb	sy
 8007996:	f3bf 8f4f 	dsb	sy
 800799a:	61fb      	str	r3, [r7, #28]
}
 800799c:	bf00      	nop
 800799e:	bf00      	nop
 80079a0:	e7fd      	b.n	800799e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80079a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079a8:	6850      	ldr	r0, [r2, #4]
 80079aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079ac:	6892      	ldr	r2, [r2, #8]
 80079ae:	4611      	mov	r1, r2
 80079b0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	f2c0 80ae 	blt.w	8007b16 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80079be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079c0:	695b      	ldr	r3, [r3, #20]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d004      	beq.n	80079d0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80079c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079c8:	3304      	adds	r3, #4
 80079ca:	4618      	mov	r0, r3
 80079cc:	f7fe f920 	bl	8005c10 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80079d0:	463b      	mov	r3, r7
 80079d2:	4618      	mov	r0, r3
 80079d4:	f7ff ff6a 	bl	80078ac <prvSampleTimeNow>
 80079d8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2b09      	cmp	r3, #9
 80079de:	f200 8097 	bhi.w	8007b10 <prvProcessReceivedCommands+0x1a0>
 80079e2:	a201      	add	r2, pc, #4	@ (adr r2, 80079e8 <prvProcessReceivedCommands+0x78>)
 80079e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e8:	08007a11 	.word	0x08007a11
 80079ec:	08007a11 	.word	0x08007a11
 80079f0:	08007a11 	.word	0x08007a11
 80079f4:	08007a87 	.word	0x08007a87
 80079f8:	08007a9b 	.word	0x08007a9b
 80079fc:	08007ae7 	.word	0x08007ae7
 8007a00:	08007a11 	.word	0x08007a11
 8007a04:	08007a11 	.word	0x08007a11
 8007a08:	08007a87 	.word	0x08007a87
 8007a0c:	08007a9b 	.word	0x08007a9b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a16:	f043 0301 	orr.w	r3, r3, #1
 8007a1a:	b2da      	uxtb	r2, r3
 8007a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007a22:	68ba      	ldr	r2, [r7, #8]
 8007a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a26:	699b      	ldr	r3, [r3, #24]
 8007a28:	18d1      	adds	r1, r2, r3
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a30:	f7ff ff5c 	bl	80078ec <prvInsertTimerInActiveList>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d06c      	beq.n	8007b14 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a3c:	6a1b      	ldr	r3, [r3, #32]
 8007a3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a40:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a48:	f003 0304 	and.w	r3, r3, #4
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d061      	beq.n	8007b14 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007a50:	68ba      	ldr	r2, [r7, #8]
 8007a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a54:	699b      	ldr	r3, [r3, #24]
 8007a56:	441a      	add	r2, r3
 8007a58:	2300      	movs	r3, #0
 8007a5a:	9300      	str	r3, [sp, #0]
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	2100      	movs	r1, #0
 8007a60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a62:	f7ff fe01 	bl	8007668 <xTimerGenericCommand>
 8007a66:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007a68:	6a3b      	ldr	r3, [r7, #32]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d152      	bne.n	8007b14 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007a6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a72:	f383 8811 	msr	BASEPRI, r3
 8007a76:	f3bf 8f6f 	isb	sy
 8007a7a:	f3bf 8f4f 	dsb	sy
 8007a7e:	61bb      	str	r3, [r7, #24]
}
 8007a80:	bf00      	nop
 8007a82:	bf00      	nop
 8007a84:	e7fd      	b.n	8007a82 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a8c:	f023 0301 	bic.w	r3, r3, #1
 8007a90:	b2da      	uxtb	r2, r3
 8007a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a94:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007a98:	e03d      	b.n	8007b16 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007aa0:	f043 0301 	orr.w	r3, r3, #1
 8007aa4:	b2da      	uxtb	r2, r3
 8007aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aa8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007aac:	68ba      	ldr	r2, [r7, #8]
 8007aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ab0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ab4:	699b      	ldr	r3, [r3, #24]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d10b      	bne.n	8007ad2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007aba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007abe:	f383 8811 	msr	BASEPRI, r3
 8007ac2:	f3bf 8f6f 	isb	sy
 8007ac6:	f3bf 8f4f 	dsb	sy
 8007aca:	617b      	str	r3, [r7, #20]
}
 8007acc:	bf00      	nop
 8007ace:	bf00      	nop
 8007ad0:	e7fd      	b.n	8007ace <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ad4:	699a      	ldr	r2, [r3, #24]
 8007ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ad8:	18d1      	adds	r1, r2, r3
 8007ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007adc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ade:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ae0:	f7ff ff04 	bl	80078ec <prvInsertTimerInActiveList>
					break;
 8007ae4:	e017      	b.n	8007b16 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ae8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007aec:	f003 0302 	and.w	r3, r3, #2
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d103      	bne.n	8007afc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007af4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007af6:	f000 fc07 	bl	8008308 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007afa:	e00c      	b.n	8007b16 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007afe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b02:	f023 0301 	bic.w	r3, r3, #1
 8007b06:	b2da      	uxtb	r2, r3
 8007b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007b0e:	e002      	b.n	8007b16 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007b10:	bf00      	nop
 8007b12:	e000      	b.n	8007b16 <prvProcessReceivedCommands+0x1a6>
					break;
 8007b14:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b16:	4b08      	ldr	r3, [pc, #32]	@ (8007b38 <prvProcessReceivedCommands+0x1c8>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	1d39      	adds	r1, r7, #4
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	4618      	mov	r0, r3
 8007b20:	f7fe fb4a 	bl	80061b8 <xQueueReceive>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f47f af26 	bne.w	8007978 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007b2c:	bf00      	nop
 8007b2e:	bf00      	nop
 8007b30:	3730      	adds	r7, #48	@ 0x30
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}
 8007b36:	bf00      	nop
 8007b38:	200017dc 	.word	0x200017dc

08007b3c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b088      	sub	sp, #32
 8007b40:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007b42:	e049      	b.n	8007bd8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b44:	4b2e      	ldr	r3, [pc, #184]	@ (8007c00 <prvSwitchTimerLists+0xc4>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b4e:	4b2c      	ldr	r3, [pc, #176]	@ (8007c00 <prvSwitchTimerLists+0xc4>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	3304      	adds	r3, #4
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f7fe f857 	bl	8005c10 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	6a1b      	ldr	r3, [r3, #32]
 8007b66:	68f8      	ldr	r0, [r7, #12]
 8007b68:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b70:	f003 0304 	and.w	r3, r3, #4
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d02f      	beq.n	8007bd8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	699b      	ldr	r3, [r3, #24]
 8007b7c:	693a      	ldr	r2, [r7, #16]
 8007b7e:	4413      	add	r3, r2
 8007b80:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007b82:	68ba      	ldr	r2, [r7, #8]
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	429a      	cmp	r2, r3
 8007b88:	d90e      	bls.n	8007ba8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	68ba      	ldr	r2, [r7, #8]
 8007b8e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	68fa      	ldr	r2, [r7, #12]
 8007b94:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b96:	4b1a      	ldr	r3, [pc, #104]	@ (8007c00 <prvSwitchTimerLists+0xc4>)
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	3304      	adds	r3, #4
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	4610      	mov	r0, r2
 8007ba2:	f7fd fffc 	bl	8005b9e <vListInsert>
 8007ba6:	e017      	b.n	8007bd8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ba8:	2300      	movs	r3, #0
 8007baa:	9300      	str	r3, [sp, #0]
 8007bac:	2300      	movs	r3, #0
 8007bae:	693a      	ldr	r2, [r7, #16]
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f7ff fd58 	bl	8007668 <xTimerGenericCommand>
 8007bb8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d10b      	bne.n	8007bd8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc4:	f383 8811 	msr	BASEPRI, r3
 8007bc8:	f3bf 8f6f 	isb	sy
 8007bcc:	f3bf 8f4f 	dsb	sy
 8007bd0:	603b      	str	r3, [r7, #0]
}
 8007bd2:	bf00      	nop
 8007bd4:	bf00      	nop
 8007bd6:	e7fd      	b.n	8007bd4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007bd8:	4b09      	ldr	r3, [pc, #36]	@ (8007c00 <prvSwitchTimerLists+0xc4>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d1b0      	bne.n	8007b44 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007be2:	4b07      	ldr	r3, [pc, #28]	@ (8007c00 <prvSwitchTimerLists+0xc4>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007be8:	4b06      	ldr	r3, [pc, #24]	@ (8007c04 <prvSwitchTimerLists+0xc8>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a04      	ldr	r2, [pc, #16]	@ (8007c00 <prvSwitchTimerLists+0xc4>)
 8007bee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007bf0:	4a04      	ldr	r2, [pc, #16]	@ (8007c04 <prvSwitchTimerLists+0xc8>)
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	6013      	str	r3, [r2, #0]
}
 8007bf6:	bf00      	nop
 8007bf8:	3718      	adds	r7, #24
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	bf00      	nop
 8007c00:	200017d4 	.word	0x200017d4
 8007c04:	200017d8 	.word	0x200017d8

08007c08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007c0e:	f000 f98b 	bl	8007f28 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007c12:	4b15      	ldr	r3, [pc, #84]	@ (8007c68 <prvCheckForValidListAndQueue+0x60>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d120      	bne.n	8007c5c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007c1a:	4814      	ldr	r0, [pc, #80]	@ (8007c6c <prvCheckForValidListAndQueue+0x64>)
 8007c1c:	f7fd ff6e 	bl	8005afc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007c20:	4813      	ldr	r0, [pc, #76]	@ (8007c70 <prvCheckForValidListAndQueue+0x68>)
 8007c22:	f7fd ff6b 	bl	8005afc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007c26:	4b13      	ldr	r3, [pc, #76]	@ (8007c74 <prvCheckForValidListAndQueue+0x6c>)
 8007c28:	4a10      	ldr	r2, [pc, #64]	@ (8007c6c <prvCheckForValidListAndQueue+0x64>)
 8007c2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007c2c:	4b12      	ldr	r3, [pc, #72]	@ (8007c78 <prvCheckForValidListAndQueue+0x70>)
 8007c2e:	4a10      	ldr	r2, [pc, #64]	@ (8007c70 <prvCheckForValidListAndQueue+0x68>)
 8007c30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007c32:	2300      	movs	r3, #0
 8007c34:	9300      	str	r3, [sp, #0]
 8007c36:	4b11      	ldr	r3, [pc, #68]	@ (8007c7c <prvCheckForValidListAndQueue+0x74>)
 8007c38:	4a11      	ldr	r2, [pc, #68]	@ (8007c80 <prvCheckForValidListAndQueue+0x78>)
 8007c3a:	2110      	movs	r1, #16
 8007c3c:	200a      	movs	r0, #10
 8007c3e:	f7fe f87b 	bl	8005d38 <xQueueGenericCreateStatic>
 8007c42:	4603      	mov	r3, r0
 8007c44:	4a08      	ldr	r2, [pc, #32]	@ (8007c68 <prvCheckForValidListAndQueue+0x60>)
 8007c46:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007c48:	4b07      	ldr	r3, [pc, #28]	@ (8007c68 <prvCheckForValidListAndQueue+0x60>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d005      	beq.n	8007c5c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007c50:	4b05      	ldr	r3, [pc, #20]	@ (8007c68 <prvCheckForValidListAndQueue+0x60>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	490b      	ldr	r1, [pc, #44]	@ (8007c84 <prvCheckForValidListAndQueue+0x7c>)
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7fe fca0 	bl	800659c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c5c:	f000 f996 	bl	8007f8c <vPortExitCritical>
}
 8007c60:	bf00      	nop
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
 8007c66:	bf00      	nop
 8007c68:	200017dc 	.word	0x200017dc
 8007c6c:	200017ac 	.word	0x200017ac
 8007c70:	200017c0 	.word	0x200017c0
 8007c74:	200017d4 	.word	0x200017d4
 8007c78:	200017d8 	.word	0x200017d8
 8007c7c:	20001888 	.word	0x20001888
 8007c80:	200017e8 	.word	0x200017e8
 8007c84:	08009c0c 	.word	0x08009c0c

08007c88 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b08a      	sub	sp, #40	@ 0x28
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	607a      	str	r2, [r7, #4]
 8007c94:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8007c96:	f06f 0301 	mvn.w	r3, #1
 8007c9a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007ca8:	4b06      	ldr	r3, [pc, #24]	@ (8007cc4 <xTimerPendFunctionCallFromISR+0x3c>)
 8007caa:	6818      	ldr	r0, [r3, #0]
 8007cac:	f107 0114 	add.w	r1, r7, #20
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	683a      	ldr	r2, [r7, #0]
 8007cb4:	f7fe f9e2 	bl	800607c <xQueueGenericSendFromISR>
 8007cb8:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8007cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3728      	adds	r7, #40	@ 0x28
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	200017dc 	.word	0x200017dc

08007cc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b085      	sub	sp, #20
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	60f8      	str	r0, [r7, #12]
 8007cd0:	60b9      	str	r1, [r7, #8]
 8007cd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	3b04      	subs	r3, #4
 8007cd8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007ce0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	3b04      	subs	r3, #4
 8007ce6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	f023 0201 	bic.w	r2, r3, #1
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	3b04      	subs	r3, #4
 8007cf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007cf8:	4a0c      	ldr	r2, [pc, #48]	@ (8007d2c <pxPortInitialiseStack+0x64>)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	3b14      	subs	r3, #20
 8007d02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	3b04      	subs	r3, #4
 8007d0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f06f 0202 	mvn.w	r2, #2
 8007d16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	3b20      	subs	r3, #32
 8007d1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3714      	adds	r7, #20
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr
 8007d2c:	08007d31 	.word	0x08007d31

08007d30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007d30:	b480      	push	{r7}
 8007d32:	b085      	sub	sp, #20
 8007d34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007d36:	2300      	movs	r3, #0
 8007d38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007d3a:	4b13      	ldr	r3, [pc, #76]	@ (8007d88 <prvTaskExitError+0x58>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d42:	d00b      	beq.n	8007d5c <prvTaskExitError+0x2c>
	__asm volatile
 8007d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d48:	f383 8811 	msr	BASEPRI, r3
 8007d4c:	f3bf 8f6f 	isb	sy
 8007d50:	f3bf 8f4f 	dsb	sy
 8007d54:	60fb      	str	r3, [r7, #12]
}
 8007d56:	bf00      	nop
 8007d58:	bf00      	nop
 8007d5a:	e7fd      	b.n	8007d58 <prvTaskExitError+0x28>
	__asm volatile
 8007d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d60:	f383 8811 	msr	BASEPRI, r3
 8007d64:	f3bf 8f6f 	isb	sy
 8007d68:	f3bf 8f4f 	dsb	sy
 8007d6c:	60bb      	str	r3, [r7, #8]
}
 8007d6e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007d70:	bf00      	nop
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d0fc      	beq.n	8007d72 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007d78:	bf00      	nop
 8007d7a:	bf00      	nop
 8007d7c:	3714      	adds	r7, #20
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr
 8007d86:	bf00      	nop
 8007d88:	2000000c 	.word	0x2000000c
 8007d8c:	00000000 	.word	0x00000000

08007d90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007d90:	4b07      	ldr	r3, [pc, #28]	@ (8007db0 <pxCurrentTCBConst2>)
 8007d92:	6819      	ldr	r1, [r3, #0]
 8007d94:	6808      	ldr	r0, [r1, #0]
 8007d96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d9a:	f380 8809 	msr	PSP, r0
 8007d9e:	f3bf 8f6f 	isb	sy
 8007da2:	f04f 0000 	mov.w	r0, #0
 8007da6:	f380 8811 	msr	BASEPRI, r0
 8007daa:	4770      	bx	lr
 8007dac:	f3af 8000 	nop.w

08007db0 <pxCurrentTCBConst2>:
 8007db0:	200012ac 	.word	0x200012ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007db4:	bf00      	nop
 8007db6:	bf00      	nop

08007db8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007db8:	4808      	ldr	r0, [pc, #32]	@ (8007ddc <prvPortStartFirstTask+0x24>)
 8007dba:	6800      	ldr	r0, [r0, #0]
 8007dbc:	6800      	ldr	r0, [r0, #0]
 8007dbe:	f380 8808 	msr	MSP, r0
 8007dc2:	f04f 0000 	mov.w	r0, #0
 8007dc6:	f380 8814 	msr	CONTROL, r0
 8007dca:	b662      	cpsie	i
 8007dcc:	b661      	cpsie	f
 8007dce:	f3bf 8f4f 	dsb	sy
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	df00      	svc	0
 8007dd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007dda:	bf00      	nop
 8007ddc:	e000ed08 	.word	0xe000ed08

08007de0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b086      	sub	sp, #24
 8007de4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007de6:	4b47      	ldr	r3, [pc, #284]	@ (8007f04 <xPortStartScheduler+0x124>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a47      	ldr	r2, [pc, #284]	@ (8007f08 <xPortStartScheduler+0x128>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d10b      	bne.n	8007e08 <xPortStartScheduler+0x28>
	__asm volatile
 8007df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df4:	f383 8811 	msr	BASEPRI, r3
 8007df8:	f3bf 8f6f 	isb	sy
 8007dfc:	f3bf 8f4f 	dsb	sy
 8007e00:	613b      	str	r3, [r7, #16]
}
 8007e02:	bf00      	nop
 8007e04:	bf00      	nop
 8007e06:	e7fd      	b.n	8007e04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007e08:	4b3e      	ldr	r3, [pc, #248]	@ (8007f04 <xPortStartScheduler+0x124>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a3f      	ldr	r2, [pc, #252]	@ (8007f0c <xPortStartScheduler+0x12c>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d10b      	bne.n	8007e2a <xPortStartScheduler+0x4a>
	__asm volatile
 8007e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e16:	f383 8811 	msr	BASEPRI, r3
 8007e1a:	f3bf 8f6f 	isb	sy
 8007e1e:	f3bf 8f4f 	dsb	sy
 8007e22:	60fb      	str	r3, [r7, #12]
}
 8007e24:	bf00      	nop
 8007e26:	bf00      	nop
 8007e28:	e7fd      	b.n	8007e26 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007e2a:	4b39      	ldr	r3, [pc, #228]	@ (8007f10 <xPortStartScheduler+0x130>)
 8007e2c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	22ff      	movs	r2, #255	@ 0xff
 8007e3a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007e44:	78fb      	ldrb	r3, [r7, #3]
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007e4c:	b2da      	uxtb	r2, r3
 8007e4e:	4b31      	ldr	r3, [pc, #196]	@ (8007f14 <xPortStartScheduler+0x134>)
 8007e50:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007e52:	4b31      	ldr	r3, [pc, #196]	@ (8007f18 <xPortStartScheduler+0x138>)
 8007e54:	2207      	movs	r2, #7
 8007e56:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e58:	e009      	b.n	8007e6e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007e5a:	4b2f      	ldr	r3, [pc, #188]	@ (8007f18 <xPortStartScheduler+0x138>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	3b01      	subs	r3, #1
 8007e60:	4a2d      	ldr	r2, [pc, #180]	@ (8007f18 <xPortStartScheduler+0x138>)
 8007e62:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007e64:	78fb      	ldrb	r3, [r7, #3]
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	005b      	lsls	r3, r3, #1
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007e6e:	78fb      	ldrb	r3, [r7, #3]
 8007e70:	b2db      	uxtb	r3, r3
 8007e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e76:	2b80      	cmp	r3, #128	@ 0x80
 8007e78:	d0ef      	beq.n	8007e5a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007e7a:	4b27      	ldr	r3, [pc, #156]	@ (8007f18 <xPortStartScheduler+0x138>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f1c3 0307 	rsb	r3, r3, #7
 8007e82:	2b04      	cmp	r3, #4
 8007e84:	d00b      	beq.n	8007e9e <xPortStartScheduler+0xbe>
	__asm volatile
 8007e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e8a:	f383 8811 	msr	BASEPRI, r3
 8007e8e:	f3bf 8f6f 	isb	sy
 8007e92:	f3bf 8f4f 	dsb	sy
 8007e96:	60bb      	str	r3, [r7, #8]
}
 8007e98:	bf00      	nop
 8007e9a:	bf00      	nop
 8007e9c:	e7fd      	b.n	8007e9a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8007f18 <xPortStartScheduler+0x138>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	021b      	lsls	r3, r3, #8
 8007ea4:	4a1c      	ldr	r2, [pc, #112]	@ (8007f18 <xPortStartScheduler+0x138>)
 8007ea6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8007f18 <xPortStartScheduler+0x138>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007eb0:	4a19      	ldr	r2, [pc, #100]	@ (8007f18 <xPortStartScheduler+0x138>)
 8007eb2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	b2da      	uxtb	r2, r3
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007ebc:	4b17      	ldr	r3, [pc, #92]	@ (8007f1c <xPortStartScheduler+0x13c>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a16      	ldr	r2, [pc, #88]	@ (8007f1c <xPortStartScheduler+0x13c>)
 8007ec2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007ec6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ec8:	4b14      	ldr	r3, [pc, #80]	@ (8007f1c <xPortStartScheduler+0x13c>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a13      	ldr	r2, [pc, #76]	@ (8007f1c <xPortStartScheduler+0x13c>)
 8007ece:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007ed2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007ed4:	f000 f8da 	bl	800808c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ed8:	4b11      	ldr	r3, [pc, #68]	@ (8007f20 <xPortStartScheduler+0x140>)
 8007eda:	2200      	movs	r2, #0
 8007edc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007ede:	f000 f8f9 	bl	80080d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007ee2:	4b10      	ldr	r3, [pc, #64]	@ (8007f24 <xPortStartScheduler+0x144>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a0f      	ldr	r2, [pc, #60]	@ (8007f24 <xPortStartScheduler+0x144>)
 8007ee8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007eec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007eee:	f7ff ff63 	bl	8007db8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007ef2:	f7fe ff55 	bl	8006da0 <vTaskSwitchContext>
	prvTaskExitError();
 8007ef6:	f7ff ff1b 	bl	8007d30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007efa:	2300      	movs	r3, #0
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3718      	adds	r7, #24
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}
 8007f04:	e000ed00 	.word	0xe000ed00
 8007f08:	410fc271 	.word	0x410fc271
 8007f0c:	410fc270 	.word	0x410fc270
 8007f10:	e000e400 	.word	0xe000e400
 8007f14:	200018d8 	.word	0x200018d8
 8007f18:	200018dc 	.word	0x200018dc
 8007f1c:	e000ed20 	.word	0xe000ed20
 8007f20:	2000000c 	.word	0x2000000c
 8007f24:	e000ef34 	.word	0xe000ef34

08007f28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
	__asm volatile
 8007f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f32:	f383 8811 	msr	BASEPRI, r3
 8007f36:	f3bf 8f6f 	isb	sy
 8007f3a:	f3bf 8f4f 	dsb	sy
 8007f3e:	607b      	str	r3, [r7, #4]
}
 8007f40:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007f42:	4b10      	ldr	r3, [pc, #64]	@ (8007f84 <vPortEnterCritical+0x5c>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	3301      	adds	r3, #1
 8007f48:	4a0e      	ldr	r2, [pc, #56]	@ (8007f84 <vPortEnterCritical+0x5c>)
 8007f4a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8007f84 <vPortEnterCritical+0x5c>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	2b01      	cmp	r3, #1
 8007f52:	d110      	bne.n	8007f76 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007f54:	4b0c      	ldr	r3, [pc, #48]	@ (8007f88 <vPortEnterCritical+0x60>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00b      	beq.n	8007f76 <vPortEnterCritical+0x4e>
	__asm volatile
 8007f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f62:	f383 8811 	msr	BASEPRI, r3
 8007f66:	f3bf 8f6f 	isb	sy
 8007f6a:	f3bf 8f4f 	dsb	sy
 8007f6e:	603b      	str	r3, [r7, #0]
}
 8007f70:	bf00      	nop
 8007f72:	bf00      	nop
 8007f74:	e7fd      	b.n	8007f72 <vPortEnterCritical+0x4a>
	}
}
 8007f76:	bf00      	nop
 8007f78:	370c      	adds	r7, #12
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr
 8007f82:	bf00      	nop
 8007f84:	2000000c 	.word	0x2000000c
 8007f88:	e000ed04 	.word	0xe000ed04

08007f8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007f92:	4b12      	ldr	r3, [pc, #72]	@ (8007fdc <vPortExitCritical+0x50>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d10b      	bne.n	8007fb2 <vPortExitCritical+0x26>
	__asm volatile
 8007f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f9e:	f383 8811 	msr	BASEPRI, r3
 8007fa2:	f3bf 8f6f 	isb	sy
 8007fa6:	f3bf 8f4f 	dsb	sy
 8007faa:	607b      	str	r3, [r7, #4]
}
 8007fac:	bf00      	nop
 8007fae:	bf00      	nop
 8007fb0:	e7fd      	b.n	8007fae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007fb2:	4b0a      	ldr	r3, [pc, #40]	@ (8007fdc <vPortExitCritical+0x50>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	3b01      	subs	r3, #1
 8007fb8:	4a08      	ldr	r2, [pc, #32]	@ (8007fdc <vPortExitCritical+0x50>)
 8007fba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007fbc:	4b07      	ldr	r3, [pc, #28]	@ (8007fdc <vPortExitCritical+0x50>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d105      	bne.n	8007fd0 <vPortExitCritical+0x44>
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	f383 8811 	msr	BASEPRI, r3
}
 8007fce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007fd0:	bf00      	nop
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr
 8007fdc:	2000000c 	.word	0x2000000c

08007fe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007fe0:	f3ef 8009 	mrs	r0, PSP
 8007fe4:	f3bf 8f6f 	isb	sy
 8007fe8:	4b15      	ldr	r3, [pc, #84]	@ (8008040 <pxCurrentTCBConst>)
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	f01e 0f10 	tst.w	lr, #16
 8007ff0:	bf08      	it	eq
 8007ff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007ff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ffa:	6010      	str	r0, [r2, #0]
 8007ffc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008000:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008004:	f380 8811 	msr	BASEPRI, r0
 8008008:	f3bf 8f4f 	dsb	sy
 800800c:	f3bf 8f6f 	isb	sy
 8008010:	f7fe fec6 	bl	8006da0 <vTaskSwitchContext>
 8008014:	f04f 0000 	mov.w	r0, #0
 8008018:	f380 8811 	msr	BASEPRI, r0
 800801c:	bc09      	pop	{r0, r3}
 800801e:	6819      	ldr	r1, [r3, #0]
 8008020:	6808      	ldr	r0, [r1, #0]
 8008022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008026:	f01e 0f10 	tst.w	lr, #16
 800802a:	bf08      	it	eq
 800802c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008030:	f380 8809 	msr	PSP, r0
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	4770      	bx	lr
 800803a:	bf00      	nop
 800803c:	f3af 8000 	nop.w

08008040 <pxCurrentTCBConst>:
 8008040:	200012ac 	.word	0x200012ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008044:	bf00      	nop
 8008046:	bf00      	nop

08008048 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
	__asm volatile
 800804e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008052:	f383 8811 	msr	BASEPRI, r3
 8008056:	f3bf 8f6f 	isb	sy
 800805a:	f3bf 8f4f 	dsb	sy
 800805e:	607b      	str	r3, [r7, #4]
}
 8008060:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008062:	f7fe fde3 	bl	8006c2c <xTaskIncrementTick>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d003      	beq.n	8008074 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800806c:	4b06      	ldr	r3, [pc, #24]	@ (8008088 <xPortSysTickHandler+0x40>)
 800806e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008072:	601a      	str	r2, [r3, #0]
 8008074:	2300      	movs	r3, #0
 8008076:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	f383 8811 	msr	BASEPRI, r3
}
 800807e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008080:	bf00      	nop
 8008082:	3708      	adds	r7, #8
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	e000ed04 	.word	0xe000ed04

0800808c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800808c:	b480      	push	{r7}
 800808e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008090:	4b0b      	ldr	r3, [pc, #44]	@ (80080c0 <vPortSetupTimerInterrupt+0x34>)
 8008092:	2200      	movs	r2, #0
 8008094:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008096:	4b0b      	ldr	r3, [pc, #44]	@ (80080c4 <vPortSetupTimerInterrupt+0x38>)
 8008098:	2200      	movs	r2, #0
 800809a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800809c:	4b0a      	ldr	r3, [pc, #40]	@ (80080c8 <vPortSetupTimerInterrupt+0x3c>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a0a      	ldr	r2, [pc, #40]	@ (80080cc <vPortSetupTimerInterrupt+0x40>)
 80080a2:	fba2 2303 	umull	r2, r3, r2, r3
 80080a6:	099b      	lsrs	r3, r3, #6
 80080a8:	4a09      	ldr	r2, [pc, #36]	@ (80080d0 <vPortSetupTimerInterrupt+0x44>)
 80080aa:	3b01      	subs	r3, #1
 80080ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80080ae:	4b04      	ldr	r3, [pc, #16]	@ (80080c0 <vPortSetupTimerInterrupt+0x34>)
 80080b0:	2207      	movs	r2, #7
 80080b2:	601a      	str	r2, [r3, #0]
}
 80080b4:	bf00      	nop
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop
 80080c0:	e000e010 	.word	0xe000e010
 80080c4:	e000e018 	.word	0xe000e018
 80080c8:	20000000 	.word	0x20000000
 80080cc:	10624dd3 	.word	0x10624dd3
 80080d0:	e000e014 	.word	0xe000e014

080080d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80080d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80080e4 <vPortEnableVFP+0x10>
 80080d8:	6801      	ldr	r1, [r0, #0]
 80080da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80080de:	6001      	str	r1, [r0, #0]
 80080e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80080e2:	bf00      	nop
 80080e4:	e000ed88 	.word	0xe000ed88

080080e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80080ee:	f3ef 8305 	mrs	r3, IPSR
 80080f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	2b0f      	cmp	r3, #15
 80080f8:	d915      	bls.n	8008126 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80080fa:	4a18      	ldr	r2, [pc, #96]	@ (800815c <vPortValidateInterruptPriority+0x74>)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	4413      	add	r3, r2
 8008100:	781b      	ldrb	r3, [r3, #0]
 8008102:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008104:	4b16      	ldr	r3, [pc, #88]	@ (8008160 <vPortValidateInterruptPriority+0x78>)
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	7afa      	ldrb	r2, [r7, #11]
 800810a:	429a      	cmp	r2, r3
 800810c:	d20b      	bcs.n	8008126 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800810e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008112:	f383 8811 	msr	BASEPRI, r3
 8008116:	f3bf 8f6f 	isb	sy
 800811a:	f3bf 8f4f 	dsb	sy
 800811e:	607b      	str	r3, [r7, #4]
}
 8008120:	bf00      	nop
 8008122:	bf00      	nop
 8008124:	e7fd      	b.n	8008122 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008126:	4b0f      	ldr	r3, [pc, #60]	@ (8008164 <vPortValidateInterruptPriority+0x7c>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800812e:	4b0e      	ldr	r3, [pc, #56]	@ (8008168 <vPortValidateInterruptPriority+0x80>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	429a      	cmp	r2, r3
 8008134:	d90b      	bls.n	800814e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800813a:	f383 8811 	msr	BASEPRI, r3
 800813e:	f3bf 8f6f 	isb	sy
 8008142:	f3bf 8f4f 	dsb	sy
 8008146:	603b      	str	r3, [r7, #0]
}
 8008148:	bf00      	nop
 800814a:	bf00      	nop
 800814c:	e7fd      	b.n	800814a <vPortValidateInterruptPriority+0x62>
	}
 800814e:	bf00      	nop
 8008150:	3714      	adds	r7, #20
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr
 800815a:	bf00      	nop
 800815c:	e000e3f0 	.word	0xe000e3f0
 8008160:	200018d8 	.word	0x200018d8
 8008164:	e000ed0c 	.word	0xe000ed0c
 8008168:	200018dc 	.word	0x200018dc

0800816c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b08a      	sub	sp, #40	@ 0x28
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008174:	2300      	movs	r3, #0
 8008176:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008178:	f7fe fc9c 	bl	8006ab4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800817c:	4b5c      	ldr	r3, [pc, #368]	@ (80082f0 <pvPortMalloc+0x184>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d101      	bne.n	8008188 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008184:	f000 f924 	bl	80083d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008188:	4b5a      	ldr	r3, [pc, #360]	@ (80082f4 <pvPortMalloc+0x188>)
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	4013      	ands	r3, r2
 8008190:	2b00      	cmp	r3, #0
 8008192:	f040 8095 	bne.w	80082c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d01e      	beq.n	80081da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800819c:	2208      	movs	r2, #8
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	4413      	add	r3, r2
 80081a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f003 0307 	and.w	r3, r3, #7
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d015      	beq.n	80081da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f023 0307 	bic.w	r3, r3, #7
 80081b4:	3308      	adds	r3, #8
 80081b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f003 0307 	and.w	r3, r3, #7
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00b      	beq.n	80081da <pvPortMalloc+0x6e>
	__asm volatile
 80081c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081c6:	f383 8811 	msr	BASEPRI, r3
 80081ca:	f3bf 8f6f 	isb	sy
 80081ce:	f3bf 8f4f 	dsb	sy
 80081d2:	617b      	str	r3, [r7, #20]
}
 80081d4:	bf00      	nop
 80081d6:	bf00      	nop
 80081d8:	e7fd      	b.n	80081d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d06f      	beq.n	80082c0 <pvPortMalloc+0x154>
 80081e0:	4b45      	ldr	r3, [pc, #276]	@ (80082f8 <pvPortMalloc+0x18c>)
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	687a      	ldr	r2, [r7, #4]
 80081e6:	429a      	cmp	r2, r3
 80081e8:	d86a      	bhi.n	80082c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80081ea:	4b44      	ldr	r3, [pc, #272]	@ (80082fc <pvPortMalloc+0x190>)
 80081ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80081ee:	4b43      	ldr	r3, [pc, #268]	@ (80082fc <pvPortMalloc+0x190>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80081f4:	e004      	b.n	8008200 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80081f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80081fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	687a      	ldr	r2, [r7, #4]
 8008206:	429a      	cmp	r2, r3
 8008208:	d903      	bls.n	8008212 <pvPortMalloc+0xa6>
 800820a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d1f1      	bne.n	80081f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008212:	4b37      	ldr	r3, [pc, #220]	@ (80082f0 <pvPortMalloc+0x184>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008218:	429a      	cmp	r2, r3
 800821a:	d051      	beq.n	80082c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800821c:	6a3b      	ldr	r3, [r7, #32]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2208      	movs	r2, #8
 8008222:	4413      	add	r3, r2
 8008224:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	6a3b      	ldr	r3, [r7, #32]
 800822c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800822e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008230:	685a      	ldr	r2, [r3, #4]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	1ad2      	subs	r2, r2, r3
 8008236:	2308      	movs	r3, #8
 8008238:	005b      	lsls	r3, r3, #1
 800823a:	429a      	cmp	r2, r3
 800823c:	d920      	bls.n	8008280 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800823e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4413      	add	r3, r2
 8008244:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	f003 0307 	and.w	r3, r3, #7
 800824c:	2b00      	cmp	r3, #0
 800824e:	d00b      	beq.n	8008268 <pvPortMalloc+0xfc>
	__asm volatile
 8008250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008254:	f383 8811 	msr	BASEPRI, r3
 8008258:	f3bf 8f6f 	isb	sy
 800825c:	f3bf 8f4f 	dsb	sy
 8008260:	613b      	str	r3, [r7, #16]
}
 8008262:	bf00      	nop
 8008264:	bf00      	nop
 8008266:	e7fd      	b.n	8008264 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800826a:	685a      	ldr	r2, [r3, #4]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	1ad2      	subs	r2, r2, r3
 8008270:	69bb      	ldr	r3, [r7, #24]
 8008272:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800827a:	69b8      	ldr	r0, [r7, #24]
 800827c:	f000 f90a 	bl	8008494 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008280:	4b1d      	ldr	r3, [pc, #116]	@ (80082f8 <pvPortMalloc+0x18c>)
 8008282:	681a      	ldr	r2, [r3, #0]
 8008284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	1ad3      	subs	r3, r2, r3
 800828a:	4a1b      	ldr	r2, [pc, #108]	@ (80082f8 <pvPortMalloc+0x18c>)
 800828c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800828e:	4b1a      	ldr	r3, [pc, #104]	@ (80082f8 <pvPortMalloc+0x18c>)
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	4b1b      	ldr	r3, [pc, #108]	@ (8008300 <pvPortMalloc+0x194>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	429a      	cmp	r2, r3
 8008298:	d203      	bcs.n	80082a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800829a:	4b17      	ldr	r3, [pc, #92]	@ (80082f8 <pvPortMalloc+0x18c>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a18      	ldr	r2, [pc, #96]	@ (8008300 <pvPortMalloc+0x194>)
 80082a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80082a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082a4:	685a      	ldr	r2, [r3, #4]
 80082a6:	4b13      	ldr	r3, [pc, #76]	@ (80082f4 <pvPortMalloc+0x188>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	431a      	orrs	r2, r3
 80082ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80082b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082b2:	2200      	movs	r2, #0
 80082b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80082b6:	4b13      	ldr	r3, [pc, #76]	@ (8008304 <pvPortMalloc+0x198>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	3301      	adds	r3, #1
 80082bc:	4a11      	ldr	r2, [pc, #68]	@ (8008304 <pvPortMalloc+0x198>)
 80082be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80082c0:	f7fe fc06 	bl	8006ad0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	f003 0307 	and.w	r3, r3, #7
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d00b      	beq.n	80082e6 <pvPortMalloc+0x17a>
	__asm volatile
 80082ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082d2:	f383 8811 	msr	BASEPRI, r3
 80082d6:	f3bf 8f6f 	isb	sy
 80082da:	f3bf 8f4f 	dsb	sy
 80082de:	60fb      	str	r3, [r7, #12]
}
 80082e0:	bf00      	nop
 80082e2:	bf00      	nop
 80082e4:	e7fd      	b.n	80082e2 <pvPortMalloc+0x176>
	return pvReturn;
 80082e6:	69fb      	ldr	r3, [r7, #28]
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3728      	adds	r7, #40	@ 0x28
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	200054e8 	.word	0x200054e8
 80082f4:	200054fc 	.word	0x200054fc
 80082f8:	200054ec 	.word	0x200054ec
 80082fc:	200054e0 	.word	0x200054e0
 8008300:	200054f0 	.word	0x200054f0
 8008304:	200054f4 	.word	0x200054f4

08008308 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b086      	sub	sp, #24
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d04f      	beq.n	80083ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800831a:	2308      	movs	r3, #8
 800831c:	425b      	negs	r3, r3
 800831e:	697a      	ldr	r2, [r7, #20]
 8008320:	4413      	add	r3, r2
 8008322:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	685a      	ldr	r2, [r3, #4]
 800832c:	4b25      	ldr	r3, [pc, #148]	@ (80083c4 <vPortFree+0xbc>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4013      	ands	r3, r2
 8008332:	2b00      	cmp	r3, #0
 8008334:	d10b      	bne.n	800834e <vPortFree+0x46>
	__asm volatile
 8008336:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800833a:	f383 8811 	msr	BASEPRI, r3
 800833e:	f3bf 8f6f 	isb	sy
 8008342:	f3bf 8f4f 	dsb	sy
 8008346:	60fb      	str	r3, [r7, #12]
}
 8008348:	bf00      	nop
 800834a:	bf00      	nop
 800834c:	e7fd      	b.n	800834a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d00b      	beq.n	800836e <vPortFree+0x66>
	__asm volatile
 8008356:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800835a:	f383 8811 	msr	BASEPRI, r3
 800835e:	f3bf 8f6f 	isb	sy
 8008362:	f3bf 8f4f 	dsb	sy
 8008366:	60bb      	str	r3, [r7, #8]
}
 8008368:	bf00      	nop
 800836a:	bf00      	nop
 800836c:	e7fd      	b.n	800836a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	685a      	ldr	r2, [r3, #4]
 8008372:	4b14      	ldr	r3, [pc, #80]	@ (80083c4 <vPortFree+0xbc>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4013      	ands	r3, r2
 8008378:	2b00      	cmp	r3, #0
 800837a:	d01e      	beq.n	80083ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d11a      	bne.n	80083ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	685a      	ldr	r2, [r3, #4]
 8008388:	4b0e      	ldr	r3, [pc, #56]	@ (80083c4 <vPortFree+0xbc>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	43db      	mvns	r3, r3
 800838e:	401a      	ands	r2, r3
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008394:	f7fe fb8e 	bl	8006ab4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	685a      	ldr	r2, [r3, #4]
 800839c:	4b0a      	ldr	r3, [pc, #40]	@ (80083c8 <vPortFree+0xc0>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4413      	add	r3, r2
 80083a2:	4a09      	ldr	r2, [pc, #36]	@ (80083c8 <vPortFree+0xc0>)
 80083a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80083a6:	6938      	ldr	r0, [r7, #16]
 80083a8:	f000 f874 	bl	8008494 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80083ac:	4b07      	ldr	r3, [pc, #28]	@ (80083cc <vPortFree+0xc4>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	3301      	adds	r3, #1
 80083b2:	4a06      	ldr	r2, [pc, #24]	@ (80083cc <vPortFree+0xc4>)
 80083b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80083b6:	f7fe fb8b 	bl	8006ad0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80083ba:	bf00      	nop
 80083bc:	3718      	adds	r7, #24
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	200054fc 	.word	0x200054fc
 80083c8:	200054ec 	.word	0x200054ec
 80083cc:	200054f8 	.word	0x200054f8

080083d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80083d0:	b480      	push	{r7}
 80083d2:	b085      	sub	sp, #20
 80083d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80083d6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80083da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80083dc:	4b27      	ldr	r3, [pc, #156]	@ (800847c <prvHeapInit+0xac>)
 80083de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f003 0307 	and.w	r3, r3, #7
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00c      	beq.n	8008404 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	3307      	adds	r3, #7
 80083ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f023 0307 	bic.w	r3, r3, #7
 80083f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80083f8:	68ba      	ldr	r2, [r7, #8]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	1ad3      	subs	r3, r2, r3
 80083fe:	4a1f      	ldr	r2, [pc, #124]	@ (800847c <prvHeapInit+0xac>)
 8008400:	4413      	add	r3, r2
 8008402:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008408:	4a1d      	ldr	r2, [pc, #116]	@ (8008480 <prvHeapInit+0xb0>)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800840e:	4b1c      	ldr	r3, [pc, #112]	@ (8008480 <prvHeapInit+0xb0>)
 8008410:	2200      	movs	r2, #0
 8008412:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	68ba      	ldr	r2, [r7, #8]
 8008418:	4413      	add	r3, r2
 800841a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800841c:	2208      	movs	r2, #8
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	1a9b      	subs	r3, r3, r2
 8008422:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f023 0307 	bic.w	r3, r3, #7
 800842a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	4a15      	ldr	r2, [pc, #84]	@ (8008484 <prvHeapInit+0xb4>)
 8008430:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008432:	4b14      	ldr	r3, [pc, #80]	@ (8008484 <prvHeapInit+0xb4>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2200      	movs	r2, #0
 8008438:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800843a:	4b12      	ldr	r3, [pc, #72]	@ (8008484 <prvHeapInit+0xb4>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	2200      	movs	r2, #0
 8008440:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	68fa      	ldr	r2, [r7, #12]
 800844a:	1ad2      	subs	r2, r2, r3
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008450:	4b0c      	ldr	r3, [pc, #48]	@ (8008484 <prvHeapInit+0xb4>)
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	4a0a      	ldr	r2, [pc, #40]	@ (8008488 <prvHeapInit+0xb8>)
 800845e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	4a09      	ldr	r2, [pc, #36]	@ (800848c <prvHeapInit+0xbc>)
 8008466:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008468:	4b09      	ldr	r3, [pc, #36]	@ (8008490 <prvHeapInit+0xc0>)
 800846a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800846e:	601a      	str	r2, [r3, #0]
}
 8008470:	bf00      	nop
 8008472:	3714      	adds	r7, #20
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr
 800847c:	200018e0 	.word	0x200018e0
 8008480:	200054e0 	.word	0x200054e0
 8008484:	200054e8 	.word	0x200054e8
 8008488:	200054f0 	.word	0x200054f0
 800848c:	200054ec 	.word	0x200054ec
 8008490:	200054fc 	.word	0x200054fc

08008494 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008494:	b480      	push	{r7}
 8008496:	b085      	sub	sp, #20
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800849c:	4b28      	ldr	r3, [pc, #160]	@ (8008540 <prvInsertBlockIntoFreeList+0xac>)
 800849e:	60fb      	str	r3, [r7, #12]
 80084a0:	e002      	b.n	80084a8 <prvInsertBlockIntoFreeList+0x14>
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	60fb      	str	r3, [r7, #12]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d8f7      	bhi.n	80084a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	68ba      	ldr	r2, [r7, #8]
 80084bc:	4413      	add	r3, r2
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d108      	bne.n	80084d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	685a      	ldr	r2, [r3, #4]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	441a      	add	r2, r3
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	68ba      	ldr	r2, [r7, #8]
 80084e0:	441a      	add	r2, r3
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d118      	bne.n	800851c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	4b15      	ldr	r3, [pc, #84]	@ (8008544 <prvInsertBlockIntoFreeList+0xb0>)
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d00d      	beq.n	8008512 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	685a      	ldr	r2, [r3, #4]
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	441a      	add	r2, r3
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	681a      	ldr	r2, [r3, #0]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	601a      	str	r2, [r3, #0]
 8008510:	e008      	b.n	8008524 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008512:	4b0c      	ldr	r3, [pc, #48]	@ (8008544 <prvInsertBlockIntoFreeList+0xb0>)
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	601a      	str	r2, [r3, #0]
 800851a:	e003      	b.n	8008524 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008524:	68fa      	ldr	r2, [r7, #12]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	429a      	cmp	r2, r3
 800852a:	d002      	beq.n	8008532 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008532:	bf00      	nop
 8008534:	3714      	adds	r7, #20
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr
 800853e:	bf00      	nop
 8008540:	200054e0 	.word	0x200054e0
 8008544:	200054e8 	.word	0x200054e8

08008548 <_strtol_l.constprop.0>:
 8008548:	2b24      	cmp	r3, #36	@ 0x24
 800854a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800854e:	4686      	mov	lr, r0
 8008550:	4690      	mov	r8, r2
 8008552:	d801      	bhi.n	8008558 <_strtol_l.constprop.0+0x10>
 8008554:	2b01      	cmp	r3, #1
 8008556:	d106      	bne.n	8008566 <_strtol_l.constprop.0+0x1e>
 8008558:	f000 fb9e 	bl	8008c98 <__errno>
 800855c:	2316      	movs	r3, #22
 800855e:	6003      	str	r3, [r0, #0]
 8008560:	2000      	movs	r0, #0
 8008562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008566:	4834      	ldr	r0, [pc, #208]	@ (8008638 <_strtol_l.constprop.0+0xf0>)
 8008568:	460d      	mov	r5, r1
 800856a:	462a      	mov	r2, r5
 800856c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008570:	5d06      	ldrb	r6, [r0, r4]
 8008572:	f016 0608 	ands.w	r6, r6, #8
 8008576:	d1f8      	bne.n	800856a <_strtol_l.constprop.0+0x22>
 8008578:	2c2d      	cmp	r4, #45	@ 0x2d
 800857a:	d12d      	bne.n	80085d8 <_strtol_l.constprop.0+0x90>
 800857c:	782c      	ldrb	r4, [r5, #0]
 800857e:	2601      	movs	r6, #1
 8008580:	1c95      	adds	r5, r2, #2
 8008582:	f033 0210 	bics.w	r2, r3, #16
 8008586:	d109      	bne.n	800859c <_strtol_l.constprop.0+0x54>
 8008588:	2c30      	cmp	r4, #48	@ 0x30
 800858a:	d12a      	bne.n	80085e2 <_strtol_l.constprop.0+0x9a>
 800858c:	782a      	ldrb	r2, [r5, #0]
 800858e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008592:	2a58      	cmp	r2, #88	@ 0x58
 8008594:	d125      	bne.n	80085e2 <_strtol_l.constprop.0+0x9a>
 8008596:	786c      	ldrb	r4, [r5, #1]
 8008598:	2310      	movs	r3, #16
 800859a:	3502      	adds	r5, #2
 800859c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80085a0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80085a4:	2200      	movs	r2, #0
 80085a6:	fbbc f9f3 	udiv	r9, ip, r3
 80085aa:	4610      	mov	r0, r2
 80085ac:	fb03 ca19 	mls	sl, r3, r9, ip
 80085b0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80085b4:	2f09      	cmp	r7, #9
 80085b6:	d81b      	bhi.n	80085f0 <_strtol_l.constprop.0+0xa8>
 80085b8:	463c      	mov	r4, r7
 80085ba:	42a3      	cmp	r3, r4
 80085bc:	dd27      	ble.n	800860e <_strtol_l.constprop.0+0xc6>
 80085be:	1c57      	adds	r7, r2, #1
 80085c0:	d007      	beq.n	80085d2 <_strtol_l.constprop.0+0x8a>
 80085c2:	4581      	cmp	r9, r0
 80085c4:	d320      	bcc.n	8008608 <_strtol_l.constprop.0+0xc0>
 80085c6:	d101      	bne.n	80085cc <_strtol_l.constprop.0+0x84>
 80085c8:	45a2      	cmp	sl, r4
 80085ca:	db1d      	blt.n	8008608 <_strtol_l.constprop.0+0xc0>
 80085cc:	fb00 4003 	mla	r0, r0, r3, r4
 80085d0:	2201      	movs	r2, #1
 80085d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80085d6:	e7eb      	b.n	80085b0 <_strtol_l.constprop.0+0x68>
 80085d8:	2c2b      	cmp	r4, #43	@ 0x2b
 80085da:	bf04      	itt	eq
 80085dc:	782c      	ldrbeq	r4, [r5, #0]
 80085de:	1c95      	addeq	r5, r2, #2
 80085e0:	e7cf      	b.n	8008582 <_strtol_l.constprop.0+0x3a>
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d1da      	bne.n	800859c <_strtol_l.constprop.0+0x54>
 80085e6:	2c30      	cmp	r4, #48	@ 0x30
 80085e8:	bf0c      	ite	eq
 80085ea:	2308      	moveq	r3, #8
 80085ec:	230a      	movne	r3, #10
 80085ee:	e7d5      	b.n	800859c <_strtol_l.constprop.0+0x54>
 80085f0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80085f4:	2f19      	cmp	r7, #25
 80085f6:	d801      	bhi.n	80085fc <_strtol_l.constprop.0+0xb4>
 80085f8:	3c37      	subs	r4, #55	@ 0x37
 80085fa:	e7de      	b.n	80085ba <_strtol_l.constprop.0+0x72>
 80085fc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008600:	2f19      	cmp	r7, #25
 8008602:	d804      	bhi.n	800860e <_strtol_l.constprop.0+0xc6>
 8008604:	3c57      	subs	r4, #87	@ 0x57
 8008606:	e7d8      	b.n	80085ba <_strtol_l.constprop.0+0x72>
 8008608:	f04f 32ff 	mov.w	r2, #4294967295
 800860c:	e7e1      	b.n	80085d2 <_strtol_l.constprop.0+0x8a>
 800860e:	1c53      	adds	r3, r2, #1
 8008610:	d108      	bne.n	8008624 <_strtol_l.constprop.0+0xdc>
 8008612:	2322      	movs	r3, #34	@ 0x22
 8008614:	f8ce 3000 	str.w	r3, [lr]
 8008618:	4660      	mov	r0, ip
 800861a:	f1b8 0f00 	cmp.w	r8, #0
 800861e:	d0a0      	beq.n	8008562 <_strtol_l.constprop.0+0x1a>
 8008620:	1e69      	subs	r1, r5, #1
 8008622:	e006      	b.n	8008632 <_strtol_l.constprop.0+0xea>
 8008624:	b106      	cbz	r6, 8008628 <_strtol_l.constprop.0+0xe0>
 8008626:	4240      	negs	r0, r0
 8008628:	f1b8 0f00 	cmp.w	r8, #0
 800862c:	d099      	beq.n	8008562 <_strtol_l.constprop.0+0x1a>
 800862e:	2a00      	cmp	r2, #0
 8008630:	d1f6      	bne.n	8008620 <_strtol_l.constprop.0+0xd8>
 8008632:	f8c8 1000 	str.w	r1, [r8]
 8008636:	e794      	b.n	8008562 <_strtol_l.constprop.0+0x1a>
 8008638:	08009d29 	.word	0x08009d29

0800863c <strtol>:
 800863c:	4613      	mov	r3, r2
 800863e:	460a      	mov	r2, r1
 8008640:	4601      	mov	r1, r0
 8008642:	4802      	ldr	r0, [pc, #8]	@ (800864c <strtol+0x10>)
 8008644:	6800      	ldr	r0, [r0, #0]
 8008646:	f7ff bf7f 	b.w	8008548 <_strtol_l.constprop.0>
 800864a:	bf00      	nop
 800864c:	2000001c 	.word	0x2000001c

08008650 <std>:
 8008650:	2300      	movs	r3, #0
 8008652:	b510      	push	{r4, lr}
 8008654:	4604      	mov	r4, r0
 8008656:	e9c0 3300 	strd	r3, r3, [r0]
 800865a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800865e:	6083      	str	r3, [r0, #8]
 8008660:	8181      	strh	r1, [r0, #12]
 8008662:	6643      	str	r3, [r0, #100]	@ 0x64
 8008664:	81c2      	strh	r2, [r0, #14]
 8008666:	6183      	str	r3, [r0, #24]
 8008668:	4619      	mov	r1, r3
 800866a:	2208      	movs	r2, #8
 800866c:	305c      	adds	r0, #92	@ 0x5c
 800866e:	f000 fa01 	bl	8008a74 <memset>
 8008672:	4b0d      	ldr	r3, [pc, #52]	@ (80086a8 <std+0x58>)
 8008674:	6263      	str	r3, [r4, #36]	@ 0x24
 8008676:	4b0d      	ldr	r3, [pc, #52]	@ (80086ac <std+0x5c>)
 8008678:	62a3      	str	r3, [r4, #40]	@ 0x28
 800867a:	4b0d      	ldr	r3, [pc, #52]	@ (80086b0 <std+0x60>)
 800867c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800867e:	4b0d      	ldr	r3, [pc, #52]	@ (80086b4 <std+0x64>)
 8008680:	6323      	str	r3, [r4, #48]	@ 0x30
 8008682:	4b0d      	ldr	r3, [pc, #52]	@ (80086b8 <std+0x68>)
 8008684:	6224      	str	r4, [r4, #32]
 8008686:	429c      	cmp	r4, r3
 8008688:	d006      	beq.n	8008698 <std+0x48>
 800868a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800868e:	4294      	cmp	r4, r2
 8008690:	d002      	beq.n	8008698 <std+0x48>
 8008692:	33d0      	adds	r3, #208	@ 0xd0
 8008694:	429c      	cmp	r4, r3
 8008696:	d105      	bne.n	80086a4 <std+0x54>
 8008698:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800869c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086a0:	f000 bb24 	b.w	8008cec <__retarget_lock_init_recursive>
 80086a4:	bd10      	pop	{r4, pc}
 80086a6:	bf00      	nop
 80086a8:	080088c5 	.word	0x080088c5
 80086ac:	080088e7 	.word	0x080088e7
 80086b0:	0800891f 	.word	0x0800891f
 80086b4:	08008943 	.word	0x08008943
 80086b8:	20005500 	.word	0x20005500

080086bc <stdio_exit_handler>:
 80086bc:	4a02      	ldr	r2, [pc, #8]	@ (80086c8 <stdio_exit_handler+0xc>)
 80086be:	4903      	ldr	r1, [pc, #12]	@ (80086cc <stdio_exit_handler+0x10>)
 80086c0:	4803      	ldr	r0, [pc, #12]	@ (80086d0 <stdio_exit_handler+0x14>)
 80086c2:	f000 b869 	b.w	8008798 <_fwalk_sglue>
 80086c6:	bf00      	nop
 80086c8:	20000010 	.word	0x20000010
 80086cc:	080095f5 	.word	0x080095f5
 80086d0:	20000020 	.word	0x20000020

080086d4 <cleanup_stdio>:
 80086d4:	6841      	ldr	r1, [r0, #4]
 80086d6:	4b0c      	ldr	r3, [pc, #48]	@ (8008708 <cleanup_stdio+0x34>)
 80086d8:	4299      	cmp	r1, r3
 80086da:	b510      	push	{r4, lr}
 80086dc:	4604      	mov	r4, r0
 80086de:	d001      	beq.n	80086e4 <cleanup_stdio+0x10>
 80086e0:	f000 ff88 	bl	80095f4 <_fflush_r>
 80086e4:	68a1      	ldr	r1, [r4, #8]
 80086e6:	4b09      	ldr	r3, [pc, #36]	@ (800870c <cleanup_stdio+0x38>)
 80086e8:	4299      	cmp	r1, r3
 80086ea:	d002      	beq.n	80086f2 <cleanup_stdio+0x1e>
 80086ec:	4620      	mov	r0, r4
 80086ee:	f000 ff81 	bl	80095f4 <_fflush_r>
 80086f2:	68e1      	ldr	r1, [r4, #12]
 80086f4:	4b06      	ldr	r3, [pc, #24]	@ (8008710 <cleanup_stdio+0x3c>)
 80086f6:	4299      	cmp	r1, r3
 80086f8:	d004      	beq.n	8008704 <cleanup_stdio+0x30>
 80086fa:	4620      	mov	r0, r4
 80086fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008700:	f000 bf78 	b.w	80095f4 <_fflush_r>
 8008704:	bd10      	pop	{r4, pc}
 8008706:	bf00      	nop
 8008708:	20005500 	.word	0x20005500
 800870c:	20005568 	.word	0x20005568
 8008710:	200055d0 	.word	0x200055d0

08008714 <global_stdio_init.part.0>:
 8008714:	b510      	push	{r4, lr}
 8008716:	4b0b      	ldr	r3, [pc, #44]	@ (8008744 <global_stdio_init.part.0+0x30>)
 8008718:	4c0b      	ldr	r4, [pc, #44]	@ (8008748 <global_stdio_init.part.0+0x34>)
 800871a:	4a0c      	ldr	r2, [pc, #48]	@ (800874c <global_stdio_init.part.0+0x38>)
 800871c:	601a      	str	r2, [r3, #0]
 800871e:	4620      	mov	r0, r4
 8008720:	2200      	movs	r2, #0
 8008722:	2104      	movs	r1, #4
 8008724:	f7ff ff94 	bl	8008650 <std>
 8008728:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800872c:	2201      	movs	r2, #1
 800872e:	2109      	movs	r1, #9
 8008730:	f7ff ff8e 	bl	8008650 <std>
 8008734:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008738:	2202      	movs	r2, #2
 800873a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800873e:	2112      	movs	r1, #18
 8008740:	f7ff bf86 	b.w	8008650 <std>
 8008744:	20005638 	.word	0x20005638
 8008748:	20005500 	.word	0x20005500
 800874c:	080086bd 	.word	0x080086bd

08008750 <__sfp_lock_acquire>:
 8008750:	4801      	ldr	r0, [pc, #4]	@ (8008758 <__sfp_lock_acquire+0x8>)
 8008752:	f000 bacc 	b.w	8008cee <__retarget_lock_acquire_recursive>
 8008756:	bf00      	nop
 8008758:	20005641 	.word	0x20005641

0800875c <__sfp_lock_release>:
 800875c:	4801      	ldr	r0, [pc, #4]	@ (8008764 <__sfp_lock_release+0x8>)
 800875e:	f000 bac7 	b.w	8008cf0 <__retarget_lock_release_recursive>
 8008762:	bf00      	nop
 8008764:	20005641 	.word	0x20005641

08008768 <__sinit>:
 8008768:	b510      	push	{r4, lr}
 800876a:	4604      	mov	r4, r0
 800876c:	f7ff fff0 	bl	8008750 <__sfp_lock_acquire>
 8008770:	6a23      	ldr	r3, [r4, #32]
 8008772:	b11b      	cbz	r3, 800877c <__sinit+0x14>
 8008774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008778:	f7ff bff0 	b.w	800875c <__sfp_lock_release>
 800877c:	4b04      	ldr	r3, [pc, #16]	@ (8008790 <__sinit+0x28>)
 800877e:	6223      	str	r3, [r4, #32]
 8008780:	4b04      	ldr	r3, [pc, #16]	@ (8008794 <__sinit+0x2c>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d1f5      	bne.n	8008774 <__sinit+0xc>
 8008788:	f7ff ffc4 	bl	8008714 <global_stdio_init.part.0>
 800878c:	e7f2      	b.n	8008774 <__sinit+0xc>
 800878e:	bf00      	nop
 8008790:	080086d5 	.word	0x080086d5
 8008794:	20005638 	.word	0x20005638

08008798 <_fwalk_sglue>:
 8008798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800879c:	4607      	mov	r7, r0
 800879e:	4688      	mov	r8, r1
 80087a0:	4614      	mov	r4, r2
 80087a2:	2600      	movs	r6, #0
 80087a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80087a8:	f1b9 0901 	subs.w	r9, r9, #1
 80087ac:	d505      	bpl.n	80087ba <_fwalk_sglue+0x22>
 80087ae:	6824      	ldr	r4, [r4, #0]
 80087b0:	2c00      	cmp	r4, #0
 80087b2:	d1f7      	bne.n	80087a4 <_fwalk_sglue+0xc>
 80087b4:	4630      	mov	r0, r6
 80087b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087ba:	89ab      	ldrh	r3, [r5, #12]
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d907      	bls.n	80087d0 <_fwalk_sglue+0x38>
 80087c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80087c4:	3301      	adds	r3, #1
 80087c6:	d003      	beq.n	80087d0 <_fwalk_sglue+0x38>
 80087c8:	4629      	mov	r1, r5
 80087ca:	4638      	mov	r0, r7
 80087cc:	47c0      	blx	r8
 80087ce:	4306      	orrs	r6, r0
 80087d0:	3568      	adds	r5, #104	@ 0x68
 80087d2:	e7e9      	b.n	80087a8 <_fwalk_sglue+0x10>

080087d4 <iprintf>:
 80087d4:	b40f      	push	{r0, r1, r2, r3}
 80087d6:	b507      	push	{r0, r1, r2, lr}
 80087d8:	4906      	ldr	r1, [pc, #24]	@ (80087f4 <iprintf+0x20>)
 80087da:	ab04      	add	r3, sp, #16
 80087dc:	6808      	ldr	r0, [r1, #0]
 80087de:	f853 2b04 	ldr.w	r2, [r3], #4
 80087e2:	6881      	ldr	r1, [r0, #8]
 80087e4:	9301      	str	r3, [sp, #4]
 80087e6:	f000 fbdb 	bl	8008fa0 <_vfiprintf_r>
 80087ea:	b003      	add	sp, #12
 80087ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80087f0:	b004      	add	sp, #16
 80087f2:	4770      	bx	lr
 80087f4:	2000001c 	.word	0x2000001c

080087f8 <putchar>:
 80087f8:	4b02      	ldr	r3, [pc, #8]	@ (8008804 <putchar+0xc>)
 80087fa:	4601      	mov	r1, r0
 80087fc:	6818      	ldr	r0, [r3, #0]
 80087fe:	6882      	ldr	r2, [r0, #8]
 8008800:	f000 bf94 	b.w	800972c <_putc_r>
 8008804:	2000001c 	.word	0x2000001c

08008808 <_puts_r>:
 8008808:	6a03      	ldr	r3, [r0, #32]
 800880a:	b570      	push	{r4, r5, r6, lr}
 800880c:	6884      	ldr	r4, [r0, #8]
 800880e:	4605      	mov	r5, r0
 8008810:	460e      	mov	r6, r1
 8008812:	b90b      	cbnz	r3, 8008818 <_puts_r+0x10>
 8008814:	f7ff ffa8 	bl	8008768 <__sinit>
 8008818:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800881a:	07db      	lsls	r3, r3, #31
 800881c:	d405      	bmi.n	800882a <_puts_r+0x22>
 800881e:	89a3      	ldrh	r3, [r4, #12]
 8008820:	0598      	lsls	r0, r3, #22
 8008822:	d402      	bmi.n	800882a <_puts_r+0x22>
 8008824:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008826:	f000 fa62 	bl	8008cee <__retarget_lock_acquire_recursive>
 800882a:	89a3      	ldrh	r3, [r4, #12]
 800882c:	0719      	lsls	r1, r3, #28
 800882e:	d502      	bpl.n	8008836 <_puts_r+0x2e>
 8008830:	6923      	ldr	r3, [r4, #16]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d135      	bne.n	80088a2 <_puts_r+0x9a>
 8008836:	4621      	mov	r1, r4
 8008838:	4628      	mov	r0, r5
 800883a:	f000 f8c5 	bl	80089c8 <__swsetup_r>
 800883e:	b380      	cbz	r0, 80088a2 <_puts_r+0x9a>
 8008840:	f04f 35ff 	mov.w	r5, #4294967295
 8008844:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008846:	07da      	lsls	r2, r3, #31
 8008848:	d405      	bmi.n	8008856 <_puts_r+0x4e>
 800884a:	89a3      	ldrh	r3, [r4, #12]
 800884c:	059b      	lsls	r3, r3, #22
 800884e:	d402      	bmi.n	8008856 <_puts_r+0x4e>
 8008850:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008852:	f000 fa4d 	bl	8008cf0 <__retarget_lock_release_recursive>
 8008856:	4628      	mov	r0, r5
 8008858:	bd70      	pop	{r4, r5, r6, pc}
 800885a:	2b00      	cmp	r3, #0
 800885c:	da04      	bge.n	8008868 <_puts_r+0x60>
 800885e:	69a2      	ldr	r2, [r4, #24]
 8008860:	429a      	cmp	r2, r3
 8008862:	dc17      	bgt.n	8008894 <_puts_r+0x8c>
 8008864:	290a      	cmp	r1, #10
 8008866:	d015      	beq.n	8008894 <_puts_r+0x8c>
 8008868:	6823      	ldr	r3, [r4, #0]
 800886a:	1c5a      	adds	r2, r3, #1
 800886c:	6022      	str	r2, [r4, #0]
 800886e:	7019      	strb	r1, [r3, #0]
 8008870:	68a3      	ldr	r3, [r4, #8]
 8008872:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008876:	3b01      	subs	r3, #1
 8008878:	60a3      	str	r3, [r4, #8]
 800887a:	2900      	cmp	r1, #0
 800887c:	d1ed      	bne.n	800885a <_puts_r+0x52>
 800887e:	2b00      	cmp	r3, #0
 8008880:	da11      	bge.n	80088a6 <_puts_r+0x9e>
 8008882:	4622      	mov	r2, r4
 8008884:	210a      	movs	r1, #10
 8008886:	4628      	mov	r0, r5
 8008888:	f000 f85f 	bl	800894a <__swbuf_r>
 800888c:	3001      	adds	r0, #1
 800888e:	d0d7      	beq.n	8008840 <_puts_r+0x38>
 8008890:	250a      	movs	r5, #10
 8008892:	e7d7      	b.n	8008844 <_puts_r+0x3c>
 8008894:	4622      	mov	r2, r4
 8008896:	4628      	mov	r0, r5
 8008898:	f000 f857 	bl	800894a <__swbuf_r>
 800889c:	3001      	adds	r0, #1
 800889e:	d1e7      	bne.n	8008870 <_puts_r+0x68>
 80088a0:	e7ce      	b.n	8008840 <_puts_r+0x38>
 80088a2:	3e01      	subs	r6, #1
 80088a4:	e7e4      	b.n	8008870 <_puts_r+0x68>
 80088a6:	6823      	ldr	r3, [r4, #0]
 80088a8:	1c5a      	adds	r2, r3, #1
 80088aa:	6022      	str	r2, [r4, #0]
 80088ac:	220a      	movs	r2, #10
 80088ae:	701a      	strb	r2, [r3, #0]
 80088b0:	e7ee      	b.n	8008890 <_puts_r+0x88>
	...

080088b4 <puts>:
 80088b4:	4b02      	ldr	r3, [pc, #8]	@ (80088c0 <puts+0xc>)
 80088b6:	4601      	mov	r1, r0
 80088b8:	6818      	ldr	r0, [r3, #0]
 80088ba:	f7ff bfa5 	b.w	8008808 <_puts_r>
 80088be:	bf00      	nop
 80088c0:	2000001c 	.word	0x2000001c

080088c4 <__sread>:
 80088c4:	b510      	push	{r4, lr}
 80088c6:	460c      	mov	r4, r1
 80088c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088cc:	f000 f9c0 	bl	8008c50 <_read_r>
 80088d0:	2800      	cmp	r0, #0
 80088d2:	bfab      	itete	ge
 80088d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80088d6:	89a3      	ldrhlt	r3, [r4, #12]
 80088d8:	181b      	addge	r3, r3, r0
 80088da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80088de:	bfac      	ite	ge
 80088e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80088e2:	81a3      	strhlt	r3, [r4, #12]
 80088e4:	bd10      	pop	{r4, pc}

080088e6 <__swrite>:
 80088e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088ea:	461f      	mov	r7, r3
 80088ec:	898b      	ldrh	r3, [r1, #12]
 80088ee:	05db      	lsls	r3, r3, #23
 80088f0:	4605      	mov	r5, r0
 80088f2:	460c      	mov	r4, r1
 80088f4:	4616      	mov	r6, r2
 80088f6:	d505      	bpl.n	8008904 <__swrite+0x1e>
 80088f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088fc:	2302      	movs	r3, #2
 80088fe:	2200      	movs	r2, #0
 8008900:	f000 f994 	bl	8008c2c <_lseek_r>
 8008904:	89a3      	ldrh	r3, [r4, #12]
 8008906:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800890a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800890e:	81a3      	strh	r3, [r4, #12]
 8008910:	4632      	mov	r2, r6
 8008912:	463b      	mov	r3, r7
 8008914:	4628      	mov	r0, r5
 8008916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800891a:	f000 b9ab 	b.w	8008c74 <_write_r>

0800891e <__sseek>:
 800891e:	b510      	push	{r4, lr}
 8008920:	460c      	mov	r4, r1
 8008922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008926:	f000 f981 	bl	8008c2c <_lseek_r>
 800892a:	1c43      	adds	r3, r0, #1
 800892c:	89a3      	ldrh	r3, [r4, #12]
 800892e:	bf15      	itete	ne
 8008930:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008932:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008936:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800893a:	81a3      	strheq	r3, [r4, #12]
 800893c:	bf18      	it	ne
 800893e:	81a3      	strhne	r3, [r4, #12]
 8008940:	bd10      	pop	{r4, pc}

08008942 <__sclose>:
 8008942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008946:	f000 b90b 	b.w	8008b60 <_close_r>

0800894a <__swbuf_r>:
 800894a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800894c:	460e      	mov	r6, r1
 800894e:	4614      	mov	r4, r2
 8008950:	4605      	mov	r5, r0
 8008952:	b118      	cbz	r0, 800895c <__swbuf_r+0x12>
 8008954:	6a03      	ldr	r3, [r0, #32]
 8008956:	b90b      	cbnz	r3, 800895c <__swbuf_r+0x12>
 8008958:	f7ff ff06 	bl	8008768 <__sinit>
 800895c:	69a3      	ldr	r3, [r4, #24]
 800895e:	60a3      	str	r3, [r4, #8]
 8008960:	89a3      	ldrh	r3, [r4, #12]
 8008962:	071a      	lsls	r2, r3, #28
 8008964:	d501      	bpl.n	800896a <__swbuf_r+0x20>
 8008966:	6923      	ldr	r3, [r4, #16]
 8008968:	b943      	cbnz	r3, 800897c <__swbuf_r+0x32>
 800896a:	4621      	mov	r1, r4
 800896c:	4628      	mov	r0, r5
 800896e:	f000 f82b 	bl	80089c8 <__swsetup_r>
 8008972:	b118      	cbz	r0, 800897c <__swbuf_r+0x32>
 8008974:	f04f 37ff 	mov.w	r7, #4294967295
 8008978:	4638      	mov	r0, r7
 800897a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800897c:	6823      	ldr	r3, [r4, #0]
 800897e:	6922      	ldr	r2, [r4, #16]
 8008980:	1a98      	subs	r0, r3, r2
 8008982:	6963      	ldr	r3, [r4, #20]
 8008984:	b2f6      	uxtb	r6, r6
 8008986:	4283      	cmp	r3, r0
 8008988:	4637      	mov	r7, r6
 800898a:	dc05      	bgt.n	8008998 <__swbuf_r+0x4e>
 800898c:	4621      	mov	r1, r4
 800898e:	4628      	mov	r0, r5
 8008990:	f000 fe30 	bl	80095f4 <_fflush_r>
 8008994:	2800      	cmp	r0, #0
 8008996:	d1ed      	bne.n	8008974 <__swbuf_r+0x2a>
 8008998:	68a3      	ldr	r3, [r4, #8]
 800899a:	3b01      	subs	r3, #1
 800899c:	60a3      	str	r3, [r4, #8]
 800899e:	6823      	ldr	r3, [r4, #0]
 80089a0:	1c5a      	adds	r2, r3, #1
 80089a2:	6022      	str	r2, [r4, #0]
 80089a4:	701e      	strb	r6, [r3, #0]
 80089a6:	6962      	ldr	r2, [r4, #20]
 80089a8:	1c43      	adds	r3, r0, #1
 80089aa:	429a      	cmp	r2, r3
 80089ac:	d004      	beq.n	80089b8 <__swbuf_r+0x6e>
 80089ae:	89a3      	ldrh	r3, [r4, #12]
 80089b0:	07db      	lsls	r3, r3, #31
 80089b2:	d5e1      	bpl.n	8008978 <__swbuf_r+0x2e>
 80089b4:	2e0a      	cmp	r6, #10
 80089b6:	d1df      	bne.n	8008978 <__swbuf_r+0x2e>
 80089b8:	4621      	mov	r1, r4
 80089ba:	4628      	mov	r0, r5
 80089bc:	f000 fe1a 	bl	80095f4 <_fflush_r>
 80089c0:	2800      	cmp	r0, #0
 80089c2:	d0d9      	beq.n	8008978 <__swbuf_r+0x2e>
 80089c4:	e7d6      	b.n	8008974 <__swbuf_r+0x2a>
	...

080089c8 <__swsetup_r>:
 80089c8:	b538      	push	{r3, r4, r5, lr}
 80089ca:	4b29      	ldr	r3, [pc, #164]	@ (8008a70 <__swsetup_r+0xa8>)
 80089cc:	4605      	mov	r5, r0
 80089ce:	6818      	ldr	r0, [r3, #0]
 80089d0:	460c      	mov	r4, r1
 80089d2:	b118      	cbz	r0, 80089dc <__swsetup_r+0x14>
 80089d4:	6a03      	ldr	r3, [r0, #32]
 80089d6:	b90b      	cbnz	r3, 80089dc <__swsetup_r+0x14>
 80089d8:	f7ff fec6 	bl	8008768 <__sinit>
 80089dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089e0:	0719      	lsls	r1, r3, #28
 80089e2:	d422      	bmi.n	8008a2a <__swsetup_r+0x62>
 80089e4:	06da      	lsls	r2, r3, #27
 80089e6:	d407      	bmi.n	80089f8 <__swsetup_r+0x30>
 80089e8:	2209      	movs	r2, #9
 80089ea:	602a      	str	r2, [r5, #0]
 80089ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80089f0:	81a3      	strh	r3, [r4, #12]
 80089f2:	f04f 30ff 	mov.w	r0, #4294967295
 80089f6:	e033      	b.n	8008a60 <__swsetup_r+0x98>
 80089f8:	0758      	lsls	r0, r3, #29
 80089fa:	d512      	bpl.n	8008a22 <__swsetup_r+0x5a>
 80089fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80089fe:	b141      	cbz	r1, 8008a12 <__swsetup_r+0x4a>
 8008a00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a04:	4299      	cmp	r1, r3
 8008a06:	d002      	beq.n	8008a0e <__swsetup_r+0x46>
 8008a08:	4628      	mov	r0, r5
 8008a0a:	f000 f99f 	bl	8008d4c <_free_r>
 8008a0e:	2300      	movs	r3, #0
 8008a10:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a12:	89a3      	ldrh	r3, [r4, #12]
 8008a14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008a18:	81a3      	strh	r3, [r4, #12]
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	6063      	str	r3, [r4, #4]
 8008a1e:	6923      	ldr	r3, [r4, #16]
 8008a20:	6023      	str	r3, [r4, #0]
 8008a22:	89a3      	ldrh	r3, [r4, #12]
 8008a24:	f043 0308 	orr.w	r3, r3, #8
 8008a28:	81a3      	strh	r3, [r4, #12]
 8008a2a:	6923      	ldr	r3, [r4, #16]
 8008a2c:	b94b      	cbnz	r3, 8008a42 <__swsetup_r+0x7a>
 8008a2e:	89a3      	ldrh	r3, [r4, #12]
 8008a30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008a34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a38:	d003      	beq.n	8008a42 <__swsetup_r+0x7a>
 8008a3a:	4621      	mov	r1, r4
 8008a3c:	4628      	mov	r0, r5
 8008a3e:	f000 fe39 	bl	80096b4 <__smakebuf_r>
 8008a42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a46:	f013 0201 	ands.w	r2, r3, #1
 8008a4a:	d00a      	beq.n	8008a62 <__swsetup_r+0x9a>
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	60a2      	str	r2, [r4, #8]
 8008a50:	6962      	ldr	r2, [r4, #20]
 8008a52:	4252      	negs	r2, r2
 8008a54:	61a2      	str	r2, [r4, #24]
 8008a56:	6922      	ldr	r2, [r4, #16]
 8008a58:	b942      	cbnz	r2, 8008a6c <__swsetup_r+0xa4>
 8008a5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008a5e:	d1c5      	bne.n	80089ec <__swsetup_r+0x24>
 8008a60:	bd38      	pop	{r3, r4, r5, pc}
 8008a62:	0799      	lsls	r1, r3, #30
 8008a64:	bf58      	it	pl
 8008a66:	6962      	ldrpl	r2, [r4, #20]
 8008a68:	60a2      	str	r2, [r4, #8]
 8008a6a:	e7f4      	b.n	8008a56 <__swsetup_r+0x8e>
 8008a6c:	2000      	movs	r0, #0
 8008a6e:	e7f7      	b.n	8008a60 <__swsetup_r+0x98>
 8008a70:	2000001c 	.word	0x2000001c

08008a74 <memset>:
 8008a74:	4402      	add	r2, r0
 8008a76:	4603      	mov	r3, r0
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d100      	bne.n	8008a7e <memset+0xa>
 8008a7c:	4770      	bx	lr
 8008a7e:	f803 1b01 	strb.w	r1, [r3], #1
 8008a82:	e7f9      	b.n	8008a78 <memset+0x4>

08008a84 <strncmp>:
 8008a84:	b510      	push	{r4, lr}
 8008a86:	b16a      	cbz	r2, 8008aa4 <strncmp+0x20>
 8008a88:	3901      	subs	r1, #1
 8008a8a:	1884      	adds	r4, r0, r2
 8008a8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a90:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d103      	bne.n	8008aa0 <strncmp+0x1c>
 8008a98:	42a0      	cmp	r0, r4
 8008a9a:	d001      	beq.n	8008aa0 <strncmp+0x1c>
 8008a9c:	2a00      	cmp	r2, #0
 8008a9e:	d1f5      	bne.n	8008a8c <strncmp+0x8>
 8008aa0:	1ad0      	subs	r0, r2, r3
 8008aa2:	bd10      	pop	{r4, pc}
 8008aa4:	4610      	mov	r0, r2
 8008aa6:	e7fc      	b.n	8008aa2 <strncmp+0x1e>

08008aa8 <strtok>:
 8008aa8:	4b16      	ldr	r3, [pc, #88]	@ (8008b04 <strtok+0x5c>)
 8008aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aae:	681f      	ldr	r7, [r3, #0]
 8008ab0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8008ab2:	4605      	mov	r5, r0
 8008ab4:	460e      	mov	r6, r1
 8008ab6:	b9ec      	cbnz	r4, 8008af4 <strtok+0x4c>
 8008ab8:	2050      	movs	r0, #80	@ 0x50
 8008aba:	f000 f991 	bl	8008de0 <malloc>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	6478      	str	r0, [r7, #68]	@ 0x44
 8008ac2:	b920      	cbnz	r0, 8008ace <strtok+0x26>
 8008ac4:	4b10      	ldr	r3, [pc, #64]	@ (8008b08 <strtok+0x60>)
 8008ac6:	4811      	ldr	r0, [pc, #68]	@ (8008b0c <strtok+0x64>)
 8008ac8:	215b      	movs	r1, #91	@ 0x5b
 8008aca:	f000 f921 	bl	8008d10 <__assert_func>
 8008ace:	e9c0 4400 	strd	r4, r4, [r0]
 8008ad2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008ad6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008ada:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8008ade:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8008ae2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8008ae6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8008aea:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8008aee:	6184      	str	r4, [r0, #24]
 8008af0:	7704      	strb	r4, [r0, #28]
 8008af2:	6244      	str	r4, [r0, #36]	@ 0x24
 8008af4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008af6:	4631      	mov	r1, r6
 8008af8:	4628      	mov	r0, r5
 8008afa:	2301      	movs	r3, #1
 8008afc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b00:	f000 b806 	b.w	8008b10 <__strtok_r>
 8008b04:	2000001c 	.word	0x2000001c
 8008b08:	08009e29 	.word	0x08009e29
 8008b0c:	08009e40 	.word	0x08009e40

08008b10 <__strtok_r>:
 8008b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008b12:	4604      	mov	r4, r0
 8008b14:	b908      	cbnz	r0, 8008b1a <__strtok_r+0xa>
 8008b16:	6814      	ldr	r4, [r2, #0]
 8008b18:	b144      	cbz	r4, 8008b2c <__strtok_r+0x1c>
 8008b1a:	4620      	mov	r0, r4
 8008b1c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008b20:	460f      	mov	r7, r1
 8008b22:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008b26:	b91e      	cbnz	r6, 8008b30 <__strtok_r+0x20>
 8008b28:	b965      	cbnz	r5, 8008b44 <__strtok_r+0x34>
 8008b2a:	6015      	str	r5, [r2, #0]
 8008b2c:	2000      	movs	r0, #0
 8008b2e:	e005      	b.n	8008b3c <__strtok_r+0x2c>
 8008b30:	42b5      	cmp	r5, r6
 8008b32:	d1f6      	bne.n	8008b22 <__strtok_r+0x12>
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d1f0      	bne.n	8008b1a <__strtok_r+0xa>
 8008b38:	6014      	str	r4, [r2, #0]
 8008b3a:	7003      	strb	r3, [r0, #0]
 8008b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b3e:	461c      	mov	r4, r3
 8008b40:	e00c      	b.n	8008b5c <__strtok_r+0x4c>
 8008b42:	b915      	cbnz	r5, 8008b4a <__strtok_r+0x3a>
 8008b44:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008b48:	460e      	mov	r6, r1
 8008b4a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008b4e:	42ab      	cmp	r3, r5
 8008b50:	d1f7      	bne.n	8008b42 <__strtok_r+0x32>
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d0f3      	beq.n	8008b3e <__strtok_r+0x2e>
 8008b56:	2300      	movs	r3, #0
 8008b58:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008b5c:	6014      	str	r4, [r2, #0]
 8008b5e:	e7ed      	b.n	8008b3c <__strtok_r+0x2c>

08008b60 <_close_r>:
 8008b60:	b538      	push	{r3, r4, r5, lr}
 8008b62:	4d06      	ldr	r5, [pc, #24]	@ (8008b7c <_close_r+0x1c>)
 8008b64:	2300      	movs	r3, #0
 8008b66:	4604      	mov	r4, r0
 8008b68:	4608      	mov	r0, r1
 8008b6a:	602b      	str	r3, [r5, #0]
 8008b6c:	f7f8 ff0a 	bl	8001984 <_close>
 8008b70:	1c43      	adds	r3, r0, #1
 8008b72:	d102      	bne.n	8008b7a <_close_r+0x1a>
 8008b74:	682b      	ldr	r3, [r5, #0]
 8008b76:	b103      	cbz	r3, 8008b7a <_close_r+0x1a>
 8008b78:	6023      	str	r3, [r4, #0]
 8008b7a:	bd38      	pop	{r3, r4, r5, pc}
 8008b7c:	2000563c 	.word	0x2000563c

08008b80 <_reclaim_reent>:
 8008b80:	4b29      	ldr	r3, [pc, #164]	@ (8008c28 <_reclaim_reent+0xa8>)
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4283      	cmp	r3, r0
 8008b86:	b570      	push	{r4, r5, r6, lr}
 8008b88:	4604      	mov	r4, r0
 8008b8a:	d04b      	beq.n	8008c24 <_reclaim_reent+0xa4>
 8008b8c:	69c3      	ldr	r3, [r0, #28]
 8008b8e:	b1ab      	cbz	r3, 8008bbc <_reclaim_reent+0x3c>
 8008b90:	68db      	ldr	r3, [r3, #12]
 8008b92:	b16b      	cbz	r3, 8008bb0 <_reclaim_reent+0x30>
 8008b94:	2500      	movs	r5, #0
 8008b96:	69e3      	ldr	r3, [r4, #28]
 8008b98:	68db      	ldr	r3, [r3, #12]
 8008b9a:	5959      	ldr	r1, [r3, r5]
 8008b9c:	2900      	cmp	r1, #0
 8008b9e:	d13b      	bne.n	8008c18 <_reclaim_reent+0x98>
 8008ba0:	3504      	adds	r5, #4
 8008ba2:	2d80      	cmp	r5, #128	@ 0x80
 8008ba4:	d1f7      	bne.n	8008b96 <_reclaim_reent+0x16>
 8008ba6:	69e3      	ldr	r3, [r4, #28]
 8008ba8:	4620      	mov	r0, r4
 8008baa:	68d9      	ldr	r1, [r3, #12]
 8008bac:	f000 f8ce 	bl	8008d4c <_free_r>
 8008bb0:	69e3      	ldr	r3, [r4, #28]
 8008bb2:	6819      	ldr	r1, [r3, #0]
 8008bb4:	b111      	cbz	r1, 8008bbc <_reclaim_reent+0x3c>
 8008bb6:	4620      	mov	r0, r4
 8008bb8:	f000 f8c8 	bl	8008d4c <_free_r>
 8008bbc:	6961      	ldr	r1, [r4, #20]
 8008bbe:	b111      	cbz	r1, 8008bc6 <_reclaim_reent+0x46>
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	f000 f8c3 	bl	8008d4c <_free_r>
 8008bc6:	69e1      	ldr	r1, [r4, #28]
 8008bc8:	b111      	cbz	r1, 8008bd0 <_reclaim_reent+0x50>
 8008bca:	4620      	mov	r0, r4
 8008bcc:	f000 f8be 	bl	8008d4c <_free_r>
 8008bd0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008bd2:	b111      	cbz	r1, 8008bda <_reclaim_reent+0x5a>
 8008bd4:	4620      	mov	r0, r4
 8008bd6:	f000 f8b9 	bl	8008d4c <_free_r>
 8008bda:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008bdc:	b111      	cbz	r1, 8008be4 <_reclaim_reent+0x64>
 8008bde:	4620      	mov	r0, r4
 8008be0:	f000 f8b4 	bl	8008d4c <_free_r>
 8008be4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008be6:	b111      	cbz	r1, 8008bee <_reclaim_reent+0x6e>
 8008be8:	4620      	mov	r0, r4
 8008bea:	f000 f8af 	bl	8008d4c <_free_r>
 8008bee:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008bf0:	b111      	cbz	r1, 8008bf8 <_reclaim_reent+0x78>
 8008bf2:	4620      	mov	r0, r4
 8008bf4:	f000 f8aa 	bl	8008d4c <_free_r>
 8008bf8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008bfa:	b111      	cbz	r1, 8008c02 <_reclaim_reent+0x82>
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	f000 f8a5 	bl	8008d4c <_free_r>
 8008c02:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008c04:	b111      	cbz	r1, 8008c0c <_reclaim_reent+0x8c>
 8008c06:	4620      	mov	r0, r4
 8008c08:	f000 f8a0 	bl	8008d4c <_free_r>
 8008c0c:	6a23      	ldr	r3, [r4, #32]
 8008c0e:	b14b      	cbz	r3, 8008c24 <_reclaim_reent+0xa4>
 8008c10:	4620      	mov	r0, r4
 8008c12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008c16:	4718      	bx	r3
 8008c18:	680e      	ldr	r6, [r1, #0]
 8008c1a:	4620      	mov	r0, r4
 8008c1c:	f000 f896 	bl	8008d4c <_free_r>
 8008c20:	4631      	mov	r1, r6
 8008c22:	e7bb      	b.n	8008b9c <_reclaim_reent+0x1c>
 8008c24:	bd70      	pop	{r4, r5, r6, pc}
 8008c26:	bf00      	nop
 8008c28:	2000001c 	.word	0x2000001c

08008c2c <_lseek_r>:
 8008c2c:	b538      	push	{r3, r4, r5, lr}
 8008c2e:	4d07      	ldr	r5, [pc, #28]	@ (8008c4c <_lseek_r+0x20>)
 8008c30:	4604      	mov	r4, r0
 8008c32:	4608      	mov	r0, r1
 8008c34:	4611      	mov	r1, r2
 8008c36:	2200      	movs	r2, #0
 8008c38:	602a      	str	r2, [r5, #0]
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	f7f8 fec9 	bl	80019d2 <_lseek>
 8008c40:	1c43      	adds	r3, r0, #1
 8008c42:	d102      	bne.n	8008c4a <_lseek_r+0x1e>
 8008c44:	682b      	ldr	r3, [r5, #0]
 8008c46:	b103      	cbz	r3, 8008c4a <_lseek_r+0x1e>
 8008c48:	6023      	str	r3, [r4, #0]
 8008c4a:	bd38      	pop	{r3, r4, r5, pc}
 8008c4c:	2000563c 	.word	0x2000563c

08008c50 <_read_r>:
 8008c50:	b538      	push	{r3, r4, r5, lr}
 8008c52:	4d07      	ldr	r5, [pc, #28]	@ (8008c70 <_read_r+0x20>)
 8008c54:	4604      	mov	r4, r0
 8008c56:	4608      	mov	r0, r1
 8008c58:	4611      	mov	r1, r2
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	602a      	str	r2, [r5, #0]
 8008c5e:	461a      	mov	r2, r3
 8008c60:	f7f8 fe73 	bl	800194a <_read>
 8008c64:	1c43      	adds	r3, r0, #1
 8008c66:	d102      	bne.n	8008c6e <_read_r+0x1e>
 8008c68:	682b      	ldr	r3, [r5, #0]
 8008c6a:	b103      	cbz	r3, 8008c6e <_read_r+0x1e>
 8008c6c:	6023      	str	r3, [r4, #0]
 8008c6e:	bd38      	pop	{r3, r4, r5, pc}
 8008c70:	2000563c 	.word	0x2000563c

08008c74 <_write_r>:
 8008c74:	b538      	push	{r3, r4, r5, lr}
 8008c76:	4d07      	ldr	r5, [pc, #28]	@ (8008c94 <_write_r+0x20>)
 8008c78:	4604      	mov	r4, r0
 8008c7a:	4608      	mov	r0, r1
 8008c7c:	4611      	mov	r1, r2
 8008c7e:	2200      	movs	r2, #0
 8008c80:	602a      	str	r2, [r5, #0]
 8008c82:	461a      	mov	r2, r3
 8008c84:	f7f8 f88a 	bl	8000d9c <_write>
 8008c88:	1c43      	adds	r3, r0, #1
 8008c8a:	d102      	bne.n	8008c92 <_write_r+0x1e>
 8008c8c:	682b      	ldr	r3, [r5, #0]
 8008c8e:	b103      	cbz	r3, 8008c92 <_write_r+0x1e>
 8008c90:	6023      	str	r3, [r4, #0]
 8008c92:	bd38      	pop	{r3, r4, r5, pc}
 8008c94:	2000563c 	.word	0x2000563c

08008c98 <__errno>:
 8008c98:	4b01      	ldr	r3, [pc, #4]	@ (8008ca0 <__errno+0x8>)
 8008c9a:	6818      	ldr	r0, [r3, #0]
 8008c9c:	4770      	bx	lr
 8008c9e:	bf00      	nop
 8008ca0:	2000001c 	.word	0x2000001c

08008ca4 <__libc_init_array>:
 8008ca4:	b570      	push	{r4, r5, r6, lr}
 8008ca6:	4d0d      	ldr	r5, [pc, #52]	@ (8008cdc <__libc_init_array+0x38>)
 8008ca8:	4c0d      	ldr	r4, [pc, #52]	@ (8008ce0 <__libc_init_array+0x3c>)
 8008caa:	1b64      	subs	r4, r4, r5
 8008cac:	10a4      	asrs	r4, r4, #2
 8008cae:	2600      	movs	r6, #0
 8008cb0:	42a6      	cmp	r6, r4
 8008cb2:	d109      	bne.n	8008cc8 <__libc_init_array+0x24>
 8008cb4:	4d0b      	ldr	r5, [pc, #44]	@ (8008ce4 <__libc_init_array+0x40>)
 8008cb6:	4c0c      	ldr	r4, [pc, #48]	@ (8008ce8 <__libc_init_array+0x44>)
 8008cb8:	f000 fdea 	bl	8009890 <_init>
 8008cbc:	1b64      	subs	r4, r4, r5
 8008cbe:	10a4      	asrs	r4, r4, #2
 8008cc0:	2600      	movs	r6, #0
 8008cc2:	42a6      	cmp	r6, r4
 8008cc4:	d105      	bne.n	8008cd2 <__libc_init_array+0x2e>
 8008cc6:	bd70      	pop	{r4, r5, r6, pc}
 8008cc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ccc:	4798      	blx	r3
 8008cce:	3601      	adds	r6, #1
 8008cd0:	e7ee      	b.n	8008cb0 <__libc_init_array+0xc>
 8008cd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008cd6:	4798      	blx	r3
 8008cd8:	3601      	adds	r6, #1
 8008cda:	e7f2      	b.n	8008cc2 <__libc_init_array+0x1e>
 8008cdc:	08009f14 	.word	0x08009f14
 8008ce0:	08009f14 	.word	0x08009f14
 8008ce4:	08009f14 	.word	0x08009f14
 8008ce8:	08009f18 	.word	0x08009f18

08008cec <__retarget_lock_init_recursive>:
 8008cec:	4770      	bx	lr

08008cee <__retarget_lock_acquire_recursive>:
 8008cee:	4770      	bx	lr

08008cf0 <__retarget_lock_release_recursive>:
 8008cf0:	4770      	bx	lr

08008cf2 <memcpy>:
 8008cf2:	440a      	add	r2, r1
 8008cf4:	4291      	cmp	r1, r2
 8008cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cfa:	d100      	bne.n	8008cfe <memcpy+0xc>
 8008cfc:	4770      	bx	lr
 8008cfe:	b510      	push	{r4, lr}
 8008d00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d08:	4291      	cmp	r1, r2
 8008d0a:	d1f9      	bne.n	8008d00 <memcpy+0xe>
 8008d0c:	bd10      	pop	{r4, pc}
	...

08008d10 <__assert_func>:
 8008d10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d12:	4614      	mov	r4, r2
 8008d14:	461a      	mov	r2, r3
 8008d16:	4b09      	ldr	r3, [pc, #36]	@ (8008d3c <__assert_func+0x2c>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	4605      	mov	r5, r0
 8008d1c:	68d8      	ldr	r0, [r3, #12]
 8008d1e:	b954      	cbnz	r4, 8008d36 <__assert_func+0x26>
 8008d20:	4b07      	ldr	r3, [pc, #28]	@ (8008d40 <__assert_func+0x30>)
 8008d22:	461c      	mov	r4, r3
 8008d24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d28:	9100      	str	r1, [sp, #0]
 8008d2a:	462b      	mov	r3, r5
 8008d2c:	4905      	ldr	r1, [pc, #20]	@ (8008d44 <__assert_func+0x34>)
 8008d2e:	f000 fc89 	bl	8009644 <fiprintf>
 8008d32:	f000 fd61 	bl	80097f8 <abort>
 8008d36:	4b04      	ldr	r3, [pc, #16]	@ (8008d48 <__assert_func+0x38>)
 8008d38:	e7f4      	b.n	8008d24 <__assert_func+0x14>
 8008d3a:	bf00      	nop
 8008d3c:	2000001c 	.word	0x2000001c
 8008d40:	08009ed5 	.word	0x08009ed5
 8008d44:	08009ea7 	.word	0x08009ea7
 8008d48:	08009e9a 	.word	0x08009e9a

08008d4c <_free_r>:
 8008d4c:	b538      	push	{r3, r4, r5, lr}
 8008d4e:	4605      	mov	r5, r0
 8008d50:	2900      	cmp	r1, #0
 8008d52:	d041      	beq.n	8008dd8 <_free_r+0x8c>
 8008d54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d58:	1f0c      	subs	r4, r1, #4
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	bfb8      	it	lt
 8008d5e:	18e4      	addlt	r4, r4, r3
 8008d60:	f000 f8e8 	bl	8008f34 <__malloc_lock>
 8008d64:	4a1d      	ldr	r2, [pc, #116]	@ (8008ddc <_free_r+0x90>)
 8008d66:	6813      	ldr	r3, [r2, #0]
 8008d68:	b933      	cbnz	r3, 8008d78 <_free_r+0x2c>
 8008d6a:	6063      	str	r3, [r4, #4]
 8008d6c:	6014      	str	r4, [r2, #0]
 8008d6e:	4628      	mov	r0, r5
 8008d70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d74:	f000 b8e4 	b.w	8008f40 <__malloc_unlock>
 8008d78:	42a3      	cmp	r3, r4
 8008d7a:	d908      	bls.n	8008d8e <_free_r+0x42>
 8008d7c:	6820      	ldr	r0, [r4, #0]
 8008d7e:	1821      	adds	r1, r4, r0
 8008d80:	428b      	cmp	r3, r1
 8008d82:	bf01      	itttt	eq
 8008d84:	6819      	ldreq	r1, [r3, #0]
 8008d86:	685b      	ldreq	r3, [r3, #4]
 8008d88:	1809      	addeq	r1, r1, r0
 8008d8a:	6021      	streq	r1, [r4, #0]
 8008d8c:	e7ed      	b.n	8008d6a <_free_r+0x1e>
 8008d8e:	461a      	mov	r2, r3
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	b10b      	cbz	r3, 8008d98 <_free_r+0x4c>
 8008d94:	42a3      	cmp	r3, r4
 8008d96:	d9fa      	bls.n	8008d8e <_free_r+0x42>
 8008d98:	6811      	ldr	r1, [r2, #0]
 8008d9a:	1850      	adds	r0, r2, r1
 8008d9c:	42a0      	cmp	r0, r4
 8008d9e:	d10b      	bne.n	8008db8 <_free_r+0x6c>
 8008da0:	6820      	ldr	r0, [r4, #0]
 8008da2:	4401      	add	r1, r0
 8008da4:	1850      	adds	r0, r2, r1
 8008da6:	4283      	cmp	r3, r0
 8008da8:	6011      	str	r1, [r2, #0]
 8008daa:	d1e0      	bne.n	8008d6e <_free_r+0x22>
 8008dac:	6818      	ldr	r0, [r3, #0]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	6053      	str	r3, [r2, #4]
 8008db2:	4408      	add	r0, r1
 8008db4:	6010      	str	r0, [r2, #0]
 8008db6:	e7da      	b.n	8008d6e <_free_r+0x22>
 8008db8:	d902      	bls.n	8008dc0 <_free_r+0x74>
 8008dba:	230c      	movs	r3, #12
 8008dbc:	602b      	str	r3, [r5, #0]
 8008dbe:	e7d6      	b.n	8008d6e <_free_r+0x22>
 8008dc0:	6820      	ldr	r0, [r4, #0]
 8008dc2:	1821      	adds	r1, r4, r0
 8008dc4:	428b      	cmp	r3, r1
 8008dc6:	bf04      	itt	eq
 8008dc8:	6819      	ldreq	r1, [r3, #0]
 8008dca:	685b      	ldreq	r3, [r3, #4]
 8008dcc:	6063      	str	r3, [r4, #4]
 8008dce:	bf04      	itt	eq
 8008dd0:	1809      	addeq	r1, r1, r0
 8008dd2:	6021      	streq	r1, [r4, #0]
 8008dd4:	6054      	str	r4, [r2, #4]
 8008dd6:	e7ca      	b.n	8008d6e <_free_r+0x22>
 8008dd8:	bd38      	pop	{r3, r4, r5, pc}
 8008dda:	bf00      	nop
 8008ddc:	20005648 	.word	0x20005648

08008de0 <malloc>:
 8008de0:	4b02      	ldr	r3, [pc, #8]	@ (8008dec <malloc+0xc>)
 8008de2:	4601      	mov	r1, r0
 8008de4:	6818      	ldr	r0, [r3, #0]
 8008de6:	f000 b825 	b.w	8008e34 <_malloc_r>
 8008dea:	bf00      	nop
 8008dec:	2000001c 	.word	0x2000001c

08008df0 <sbrk_aligned>:
 8008df0:	b570      	push	{r4, r5, r6, lr}
 8008df2:	4e0f      	ldr	r6, [pc, #60]	@ (8008e30 <sbrk_aligned+0x40>)
 8008df4:	460c      	mov	r4, r1
 8008df6:	6831      	ldr	r1, [r6, #0]
 8008df8:	4605      	mov	r5, r0
 8008dfa:	b911      	cbnz	r1, 8008e02 <sbrk_aligned+0x12>
 8008dfc:	f000 fcec 	bl	80097d8 <_sbrk_r>
 8008e00:	6030      	str	r0, [r6, #0]
 8008e02:	4621      	mov	r1, r4
 8008e04:	4628      	mov	r0, r5
 8008e06:	f000 fce7 	bl	80097d8 <_sbrk_r>
 8008e0a:	1c43      	adds	r3, r0, #1
 8008e0c:	d103      	bne.n	8008e16 <sbrk_aligned+0x26>
 8008e0e:	f04f 34ff 	mov.w	r4, #4294967295
 8008e12:	4620      	mov	r0, r4
 8008e14:	bd70      	pop	{r4, r5, r6, pc}
 8008e16:	1cc4      	adds	r4, r0, #3
 8008e18:	f024 0403 	bic.w	r4, r4, #3
 8008e1c:	42a0      	cmp	r0, r4
 8008e1e:	d0f8      	beq.n	8008e12 <sbrk_aligned+0x22>
 8008e20:	1a21      	subs	r1, r4, r0
 8008e22:	4628      	mov	r0, r5
 8008e24:	f000 fcd8 	bl	80097d8 <_sbrk_r>
 8008e28:	3001      	adds	r0, #1
 8008e2a:	d1f2      	bne.n	8008e12 <sbrk_aligned+0x22>
 8008e2c:	e7ef      	b.n	8008e0e <sbrk_aligned+0x1e>
 8008e2e:	bf00      	nop
 8008e30:	20005644 	.word	0x20005644

08008e34 <_malloc_r>:
 8008e34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e38:	1ccd      	adds	r5, r1, #3
 8008e3a:	f025 0503 	bic.w	r5, r5, #3
 8008e3e:	3508      	adds	r5, #8
 8008e40:	2d0c      	cmp	r5, #12
 8008e42:	bf38      	it	cc
 8008e44:	250c      	movcc	r5, #12
 8008e46:	2d00      	cmp	r5, #0
 8008e48:	4606      	mov	r6, r0
 8008e4a:	db01      	blt.n	8008e50 <_malloc_r+0x1c>
 8008e4c:	42a9      	cmp	r1, r5
 8008e4e:	d904      	bls.n	8008e5a <_malloc_r+0x26>
 8008e50:	230c      	movs	r3, #12
 8008e52:	6033      	str	r3, [r6, #0]
 8008e54:	2000      	movs	r0, #0
 8008e56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008f30 <_malloc_r+0xfc>
 8008e5e:	f000 f869 	bl	8008f34 <__malloc_lock>
 8008e62:	f8d8 3000 	ldr.w	r3, [r8]
 8008e66:	461c      	mov	r4, r3
 8008e68:	bb44      	cbnz	r4, 8008ebc <_malloc_r+0x88>
 8008e6a:	4629      	mov	r1, r5
 8008e6c:	4630      	mov	r0, r6
 8008e6e:	f7ff ffbf 	bl	8008df0 <sbrk_aligned>
 8008e72:	1c43      	adds	r3, r0, #1
 8008e74:	4604      	mov	r4, r0
 8008e76:	d158      	bne.n	8008f2a <_malloc_r+0xf6>
 8008e78:	f8d8 4000 	ldr.w	r4, [r8]
 8008e7c:	4627      	mov	r7, r4
 8008e7e:	2f00      	cmp	r7, #0
 8008e80:	d143      	bne.n	8008f0a <_malloc_r+0xd6>
 8008e82:	2c00      	cmp	r4, #0
 8008e84:	d04b      	beq.n	8008f1e <_malloc_r+0xea>
 8008e86:	6823      	ldr	r3, [r4, #0]
 8008e88:	4639      	mov	r1, r7
 8008e8a:	4630      	mov	r0, r6
 8008e8c:	eb04 0903 	add.w	r9, r4, r3
 8008e90:	f000 fca2 	bl	80097d8 <_sbrk_r>
 8008e94:	4581      	cmp	r9, r0
 8008e96:	d142      	bne.n	8008f1e <_malloc_r+0xea>
 8008e98:	6821      	ldr	r1, [r4, #0]
 8008e9a:	1a6d      	subs	r5, r5, r1
 8008e9c:	4629      	mov	r1, r5
 8008e9e:	4630      	mov	r0, r6
 8008ea0:	f7ff ffa6 	bl	8008df0 <sbrk_aligned>
 8008ea4:	3001      	adds	r0, #1
 8008ea6:	d03a      	beq.n	8008f1e <_malloc_r+0xea>
 8008ea8:	6823      	ldr	r3, [r4, #0]
 8008eaa:	442b      	add	r3, r5
 8008eac:	6023      	str	r3, [r4, #0]
 8008eae:	f8d8 3000 	ldr.w	r3, [r8]
 8008eb2:	685a      	ldr	r2, [r3, #4]
 8008eb4:	bb62      	cbnz	r2, 8008f10 <_malloc_r+0xdc>
 8008eb6:	f8c8 7000 	str.w	r7, [r8]
 8008eba:	e00f      	b.n	8008edc <_malloc_r+0xa8>
 8008ebc:	6822      	ldr	r2, [r4, #0]
 8008ebe:	1b52      	subs	r2, r2, r5
 8008ec0:	d420      	bmi.n	8008f04 <_malloc_r+0xd0>
 8008ec2:	2a0b      	cmp	r2, #11
 8008ec4:	d917      	bls.n	8008ef6 <_malloc_r+0xc2>
 8008ec6:	1961      	adds	r1, r4, r5
 8008ec8:	42a3      	cmp	r3, r4
 8008eca:	6025      	str	r5, [r4, #0]
 8008ecc:	bf18      	it	ne
 8008ece:	6059      	strne	r1, [r3, #4]
 8008ed0:	6863      	ldr	r3, [r4, #4]
 8008ed2:	bf08      	it	eq
 8008ed4:	f8c8 1000 	streq.w	r1, [r8]
 8008ed8:	5162      	str	r2, [r4, r5]
 8008eda:	604b      	str	r3, [r1, #4]
 8008edc:	4630      	mov	r0, r6
 8008ede:	f000 f82f 	bl	8008f40 <__malloc_unlock>
 8008ee2:	f104 000b 	add.w	r0, r4, #11
 8008ee6:	1d23      	adds	r3, r4, #4
 8008ee8:	f020 0007 	bic.w	r0, r0, #7
 8008eec:	1ac2      	subs	r2, r0, r3
 8008eee:	bf1c      	itt	ne
 8008ef0:	1a1b      	subne	r3, r3, r0
 8008ef2:	50a3      	strne	r3, [r4, r2]
 8008ef4:	e7af      	b.n	8008e56 <_malloc_r+0x22>
 8008ef6:	6862      	ldr	r2, [r4, #4]
 8008ef8:	42a3      	cmp	r3, r4
 8008efa:	bf0c      	ite	eq
 8008efc:	f8c8 2000 	streq.w	r2, [r8]
 8008f00:	605a      	strne	r2, [r3, #4]
 8008f02:	e7eb      	b.n	8008edc <_malloc_r+0xa8>
 8008f04:	4623      	mov	r3, r4
 8008f06:	6864      	ldr	r4, [r4, #4]
 8008f08:	e7ae      	b.n	8008e68 <_malloc_r+0x34>
 8008f0a:	463c      	mov	r4, r7
 8008f0c:	687f      	ldr	r7, [r7, #4]
 8008f0e:	e7b6      	b.n	8008e7e <_malloc_r+0x4a>
 8008f10:	461a      	mov	r2, r3
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	42a3      	cmp	r3, r4
 8008f16:	d1fb      	bne.n	8008f10 <_malloc_r+0xdc>
 8008f18:	2300      	movs	r3, #0
 8008f1a:	6053      	str	r3, [r2, #4]
 8008f1c:	e7de      	b.n	8008edc <_malloc_r+0xa8>
 8008f1e:	230c      	movs	r3, #12
 8008f20:	6033      	str	r3, [r6, #0]
 8008f22:	4630      	mov	r0, r6
 8008f24:	f000 f80c 	bl	8008f40 <__malloc_unlock>
 8008f28:	e794      	b.n	8008e54 <_malloc_r+0x20>
 8008f2a:	6005      	str	r5, [r0, #0]
 8008f2c:	e7d6      	b.n	8008edc <_malloc_r+0xa8>
 8008f2e:	bf00      	nop
 8008f30:	20005648 	.word	0x20005648

08008f34 <__malloc_lock>:
 8008f34:	4801      	ldr	r0, [pc, #4]	@ (8008f3c <__malloc_lock+0x8>)
 8008f36:	f7ff beda 	b.w	8008cee <__retarget_lock_acquire_recursive>
 8008f3a:	bf00      	nop
 8008f3c:	20005640 	.word	0x20005640

08008f40 <__malloc_unlock>:
 8008f40:	4801      	ldr	r0, [pc, #4]	@ (8008f48 <__malloc_unlock+0x8>)
 8008f42:	f7ff bed5 	b.w	8008cf0 <__retarget_lock_release_recursive>
 8008f46:	bf00      	nop
 8008f48:	20005640 	.word	0x20005640

08008f4c <__sfputc_r>:
 8008f4c:	6893      	ldr	r3, [r2, #8]
 8008f4e:	3b01      	subs	r3, #1
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	b410      	push	{r4}
 8008f54:	6093      	str	r3, [r2, #8]
 8008f56:	da08      	bge.n	8008f6a <__sfputc_r+0x1e>
 8008f58:	6994      	ldr	r4, [r2, #24]
 8008f5a:	42a3      	cmp	r3, r4
 8008f5c:	db01      	blt.n	8008f62 <__sfputc_r+0x16>
 8008f5e:	290a      	cmp	r1, #10
 8008f60:	d103      	bne.n	8008f6a <__sfputc_r+0x1e>
 8008f62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f66:	f7ff bcf0 	b.w	800894a <__swbuf_r>
 8008f6a:	6813      	ldr	r3, [r2, #0]
 8008f6c:	1c58      	adds	r0, r3, #1
 8008f6e:	6010      	str	r0, [r2, #0]
 8008f70:	7019      	strb	r1, [r3, #0]
 8008f72:	4608      	mov	r0, r1
 8008f74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f78:	4770      	bx	lr

08008f7a <__sfputs_r>:
 8008f7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f7c:	4606      	mov	r6, r0
 8008f7e:	460f      	mov	r7, r1
 8008f80:	4614      	mov	r4, r2
 8008f82:	18d5      	adds	r5, r2, r3
 8008f84:	42ac      	cmp	r4, r5
 8008f86:	d101      	bne.n	8008f8c <__sfputs_r+0x12>
 8008f88:	2000      	movs	r0, #0
 8008f8a:	e007      	b.n	8008f9c <__sfputs_r+0x22>
 8008f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f90:	463a      	mov	r2, r7
 8008f92:	4630      	mov	r0, r6
 8008f94:	f7ff ffda 	bl	8008f4c <__sfputc_r>
 8008f98:	1c43      	adds	r3, r0, #1
 8008f9a:	d1f3      	bne.n	8008f84 <__sfputs_r+0xa>
 8008f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008fa0 <_vfiprintf_r>:
 8008fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fa4:	460d      	mov	r5, r1
 8008fa6:	b09d      	sub	sp, #116	@ 0x74
 8008fa8:	4614      	mov	r4, r2
 8008faa:	4698      	mov	r8, r3
 8008fac:	4606      	mov	r6, r0
 8008fae:	b118      	cbz	r0, 8008fb8 <_vfiprintf_r+0x18>
 8008fb0:	6a03      	ldr	r3, [r0, #32]
 8008fb2:	b90b      	cbnz	r3, 8008fb8 <_vfiprintf_r+0x18>
 8008fb4:	f7ff fbd8 	bl	8008768 <__sinit>
 8008fb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008fba:	07d9      	lsls	r1, r3, #31
 8008fbc:	d405      	bmi.n	8008fca <_vfiprintf_r+0x2a>
 8008fbe:	89ab      	ldrh	r3, [r5, #12]
 8008fc0:	059a      	lsls	r2, r3, #22
 8008fc2:	d402      	bmi.n	8008fca <_vfiprintf_r+0x2a>
 8008fc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fc6:	f7ff fe92 	bl	8008cee <__retarget_lock_acquire_recursive>
 8008fca:	89ab      	ldrh	r3, [r5, #12]
 8008fcc:	071b      	lsls	r3, r3, #28
 8008fce:	d501      	bpl.n	8008fd4 <_vfiprintf_r+0x34>
 8008fd0:	692b      	ldr	r3, [r5, #16]
 8008fd2:	b99b      	cbnz	r3, 8008ffc <_vfiprintf_r+0x5c>
 8008fd4:	4629      	mov	r1, r5
 8008fd6:	4630      	mov	r0, r6
 8008fd8:	f7ff fcf6 	bl	80089c8 <__swsetup_r>
 8008fdc:	b170      	cbz	r0, 8008ffc <_vfiprintf_r+0x5c>
 8008fde:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008fe0:	07dc      	lsls	r4, r3, #31
 8008fe2:	d504      	bpl.n	8008fee <_vfiprintf_r+0x4e>
 8008fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fe8:	b01d      	add	sp, #116	@ 0x74
 8008fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fee:	89ab      	ldrh	r3, [r5, #12]
 8008ff0:	0598      	lsls	r0, r3, #22
 8008ff2:	d4f7      	bmi.n	8008fe4 <_vfiprintf_r+0x44>
 8008ff4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008ff6:	f7ff fe7b 	bl	8008cf0 <__retarget_lock_release_recursive>
 8008ffa:	e7f3      	b.n	8008fe4 <_vfiprintf_r+0x44>
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	9309      	str	r3, [sp, #36]	@ 0x24
 8009000:	2320      	movs	r3, #32
 8009002:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009006:	f8cd 800c 	str.w	r8, [sp, #12]
 800900a:	2330      	movs	r3, #48	@ 0x30
 800900c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80091bc <_vfiprintf_r+0x21c>
 8009010:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009014:	f04f 0901 	mov.w	r9, #1
 8009018:	4623      	mov	r3, r4
 800901a:	469a      	mov	sl, r3
 800901c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009020:	b10a      	cbz	r2, 8009026 <_vfiprintf_r+0x86>
 8009022:	2a25      	cmp	r2, #37	@ 0x25
 8009024:	d1f9      	bne.n	800901a <_vfiprintf_r+0x7a>
 8009026:	ebba 0b04 	subs.w	fp, sl, r4
 800902a:	d00b      	beq.n	8009044 <_vfiprintf_r+0xa4>
 800902c:	465b      	mov	r3, fp
 800902e:	4622      	mov	r2, r4
 8009030:	4629      	mov	r1, r5
 8009032:	4630      	mov	r0, r6
 8009034:	f7ff ffa1 	bl	8008f7a <__sfputs_r>
 8009038:	3001      	adds	r0, #1
 800903a:	f000 80a7 	beq.w	800918c <_vfiprintf_r+0x1ec>
 800903e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009040:	445a      	add	r2, fp
 8009042:	9209      	str	r2, [sp, #36]	@ 0x24
 8009044:	f89a 3000 	ldrb.w	r3, [sl]
 8009048:	2b00      	cmp	r3, #0
 800904a:	f000 809f 	beq.w	800918c <_vfiprintf_r+0x1ec>
 800904e:	2300      	movs	r3, #0
 8009050:	f04f 32ff 	mov.w	r2, #4294967295
 8009054:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009058:	f10a 0a01 	add.w	sl, sl, #1
 800905c:	9304      	str	r3, [sp, #16]
 800905e:	9307      	str	r3, [sp, #28]
 8009060:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009064:	931a      	str	r3, [sp, #104]	@ 0x68
 8009066:	4654      	mov	r4, sl
 8009068:	2205      	movs	r2, #5
 800906a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800906e:	4853      	ldr	r0, [pc, #332]	@ (80091bc <_vfiprintf_r+0x21c>)
 8009070:	f7f7 f8ce 	bl	8000210 <memchr>
 8009074:	9a04      	ldr	r2, [sp, #16]
 8009076:	b9d8      	cbnz	r0, 80090b0 <_vfiprintf_r+0x110>
 8009078:	06d1      	lsls	r1, r2, #27
 800907a:	bf44      	itt	mi
 800907c:	2320      	movmi	r3, #32
 800907e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009082:	0713      	lsls	r3, r2, #28
 8009084:	bf44      	itt	mi
 8009086:	232b      	movmi	r3, #43	@ 0x2b
 8009088:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800908c:	f89a 3000 	ldrb.w	r3, [sl]
 8009090:	2b2a      	cmp	r3, #42	@ 0x2a
 8009092:	d015      	beq.n	80090c0 <_vfiprintf_r+0x120>
 8009094:	9a07      	ldr	r2, [sp, #28]
 8009096:	4654      	mov	r4, sl
 8009098:	2000      	movs	r0, #0
 800909a:	f04f 0c0a 	mov.w	ip, #10
 800909e:	4621      	mov	r1, r4
 80090a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090a4:	3b30      	subs	r3, #48	@ 0x30
 80090a6:	2b09      	cmp	r3, #9
 80090a8:	d94b      	bls.n	8009142 <_vfiprintf_r+0x1a2>
 80090aa:	b1b0      	cbz	r0, 80090da <_vfiprintf_r+0x13a>
 80090ac:	9207      	str	r2, [sp, #28]
 80090ae:	e014      	b.n	80090da <_vfiprintf_r+0x13a>
 80090b0:	eba0 0308 	sub.w	r3, r0, r8
 80090b4:	fa09 f303 	lsl.w	r3, r9, r3
 80090b8:	4313      	orrs	r3, r2
 80090ba:	9304      	str	r3, [sp, #16]
 80090bc:	46a2      	mov	sl, r4
 80090be:	e7d2      	b.n	8009066 <_vfiprintf_r+0xc6>
 80090c0:	9b03      	ldr	r3, [sp, #12]
 80090c2:	1d19      	adds	r1, r3, #4
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	9103      	str	r1, [sp, #12]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	bfbb      	ittet	lt
 80090cc:	425b      	neglt	r3, r3
 80090ce:	f042 0202 	orrlt.w	r2, r2, #2
 80090d2:	9307      	strge	r3, [sp, #28]
 80090d4:	9307      	strlt	r3, [sp, #28]
 80090d6:	bfb8      	it	lt
 80090d8:	9204      	strlt	r2, [sp, #16]
 80090da:	7823      	ldrb	r3, [r4, #0]
 80090dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80090de:	d10a      	bne.n	80090f6 <_vfiprintf_r+0x156>
 80090e0:	7863      	ldrb	r3, [r4, #1]
 80090e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80090e4:	d132      	bne.n	800914c <_vfiprintf_r+0x1ac>
 80090e6:	9b03      	ldr	r3, [sp, #12]
 80090e8:	1d1a      	adds	r2, r3, #4
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	9203      	str	r2, [sp, #12]
 80090ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80090f2:	3402      	adds	r4, #2
 80090f4:	9305      	str	r3, [sp, #20]
 80090f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80091cc <_vfiprintf_r+0x22c>
 80090fa:	7821      	ldrb	r1, [r4, #0]
 80090fc:	2203      	movs	r2, #3
 80090fe:	4650      	mov	r0, sl
 8009100:	f7f7 f886 	bl	8000210 <memchr>
 8009104:	b138      	cbz	r0, 8009116 <_vfiprintf_r+0x176>
 8009106:	9b04      	ldr	r3, [sp, #16]
 8009108:	eba0 000a 	sub.w	r0, r0, sl
 800910c:	2240      	movs	r2, #64	@ 0x40
 800910e:	4082      	lsls	r2, r0
 8009110:	4313      	orrs	r3, r2
 8009112:	3401      	adds	r4, #1
 8009114:	9304      	str	r3, [sp, #16]
 8009116:	f814 1b01 	ldrb.w	r1, [r4], #1
 800911a:	4829      	ldr	r0, [pc, #164]	@ (80091c0 <_vfiprintf_r+0x220>)
 800911c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009120:	2206      	movs	r2, #6
 8009122:	f7f7 f875 	bl	8000210 <memchr>
 8009126:	2800      	cmp	r0, #0
 8009128:	d03f      	beq.n	80091aa <_vfiprintf_r+0x20a>
 800912a:	4b26      	ldr	r3, [pc, #152]	@ (80091c4 <_vfiprintf_r+0x224>)
 800912c:	bb1b      	cbnz	r3, 8009176 <_vfiprintf_r+0x1d6>
 800912e:	9b03      	ldr	r3, [sp, #12]
 8009130:	3307      	adds	r3, #7
 8009132:	f023 0307 	bic.w	r3, r3, #7
 8009136:	3308      	adds	r3, #8
 8009138:	9303      	str	r3, [sp, #12]
 800913a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800913c:	443b      	add	r3, r7
 800913e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009140:	e76a      	b.n	8009018 <_vfiprintf_r+0x78>
 8009142:	fb0c 3202 	mla	r2, ip, r2, r3
 8009146:	460c      	mov	r4, r1
 8009148:	2001      	movs	r0, #1
 800914a:	e7a8      	b.n	800909e <_vfiprintf_r+0xfe>
 800914c:	2300      	movs	r3, #0
 800914e:	3401      	adds	r4, #1
 8009150:	9305      	str	r3, [sp, #20]
 8009152:	4619      	mov	r1, r3
 8009154:	f04f 0c0a 	mov.w	ip, #10
 8009158:	4620      	mov	r0, r4
 800915a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800915e:	3a30      	subs	r2, #48	@ 0x30
 8009160:	2a09      	cmp	r2, #9
 8009162:	d903      	bls.n	800916c <_vfiprintf_r+0x1cc>
 8009164:	2b00      	cmp	r3, #0
 8009166:	d0c6      	beq.n	80090f6 <_vfiprintf_r+0x156>
 8009168:	9105      	str	r1, [sp, #20]
 800916a:	e7c4      	b.n	80090f6 <_vfiprintf_r+0x156>
 800916c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009170:	4604      	mov	r4, r0
 8009172:	2301      	movs	r3, #1
 8009174:	e7f0      	b.n	8009158 <_vfiprintf_r+0x1b8>
 8009176:	ab03      	add	r3, sp, #12
 8009178:	9300      	str	r3, [sp, #0]
 800917a:	462a      	mov	r2, r5
 800917c:	4b12      	ldr	r3, [pc, #72]	@ (80091c8 <_vfiprintf_r+0x228>)
 800917e:	a904      	add	r1, sp, #16
 8009180:	4630      	mov	r0, r6
 8009182:	f3af 8000 	nop.w
 8009186:	4607      	mov	r7, r0
 8009188:	1c78      	adds	r0, r7, #1
 800918a:	d1d6      	bne.n	800913a <_vfiprintf_r+0x19a>
 800918c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800918e:	07d9      	lsls	r1, r3, #31
 8009190:	d405      	bmi.n	800919e <_vfiprintf_r+0x1fe>
 8009192:	89ab      	ldrh	r3, [r5, #12]
 8009194:	059a      	lsls	r2, r3, #22
 8009196:	d402      	bmi.n	800919e <_vfiprintf_r+0x1fe>
 8009198:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800919a:	f7ff fda9 	bl	8008cf0 <__retarget_lock_release_recursive>
 800919e:	89ab      	ldrh	r3, [r5, #12]
 80091a0:	065b      	lsls	r3, r3, #25
 80091a2:	f53f af1f 	bmi.w	8008fe4 <_vfiprintf_r+0x44>
 80091a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80091a8:	e71e      	b.n	8008fe8 <_vfiprintf_r+0x48>
 80091aa:	ab03      	add	r3, sp, #12
 80091ac:	9300      	str	r3, [sp, #0]
 80091ae:	462a      	mov	r2, r5
 80091b0:	4b05      	ldr	r3, [pc, #20]	@ (80091c8 <_vfiprintf_r+0x228>)
 80091b2:	a904      	add	r1, sp, #16
 80091b4:	4630      	mov	r0, r6
 80091b6:	f000 f879 	bl	80092ac <_printf_i>
 80091ba:	e7e4      	b.n	8009186 <_vfiprintf_r+0x1e6>
 80091bc:	08009ed6 	.word	0x08009ed6
 80091c0:	08009ee0 	.word	0x08009ee0
 80091c4:	00000000 	.word	0x00000000
 80091c8:	08008f7b 	.word	0x08008f7b
 80091cc:	08009edc 	.word	0x08009edc

080091d0 <_printf_common>:
 80091d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091d4:	4616      	mov	r6, r2
 80091d6:	4698      	mov	r8, r3
 80091d8:	688a      	ldr	r2, [r1, #8]
 80091da:	690b      	ldr	r3, [r1, #16]
 80091dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80091e0:	4293      	cmp	r3, r2
 80091e2:	bfb8      	it	lt
 80091e4:	4613      	movlt	r3, r2
 80091e6:	6033      	str	r3, [r6, #0]
 80091e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80091ec:	4607      	mov	r7, r0
 80091ee:	460c      	mov	r4, r1
 80091f0:	b10a      	cbz	r2, 80091f6 <_printf_common+0x26>
 80091f2:	3301      	adds	r3, #1
 80091f4:	6033      	str	r3, [r6, #0]
 80091f6:	6823      	ldr	r3, [r4, #0]
 80091f8:	0699      	lsls	r1, r3, #26
 80091fa:	bf42      	ittt	mi
 80091fc:	6833      	ldrmi	r3, [r6, #0]
 80091fe:	3302      	addmi	r3, #2
 8009200:	6033      	strmi	r3, [r6, #0]
 8009202:	6825      	ldr	r5, [r4, #0]
 8009204:	f015 0506 	ands.w	r5, r5, #6
 8009208:	d106      	bne.n	8009218 <_printf_common+0x48>
 800920a:	f104 0a19 	add.w	sl, r4, #25
 800920e:	68e3      	ldr	r3, [r4, #12]
 8009210:	6832      	ldr	r2, [r6, #0]
 8009212:	1a9b      	subs	r3, r3, r2
 8009214:	42ab      	cmp	r3, r5
 8009216:	dc26      	bgt.n	8009266 <_printf_common+0x96>
 8009218:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800921c:	6822      	ldr	r2, [r4, #0]
 800921e:	3b00      	subs	r3, #0
 8009220:	bf18      	it	ne
 8009222:	2301      	movne	r3, #1
 8009224:	0692      	lsls	r2, r2, #26
 8009226:	d42b      	bmi.n	8009280 <_printf_common+0xb0>
 8009228:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800922c:	4641      	mov	r1, r8
 800922e:	4638      	mov	r0, r7
 8009230:	47c8      	blx	r9
 8009232:	3001      	adds	r0, #1
 8009234:	d01e      	beq.n	8009274 <_printf_common+0xa4>
 8009236:	6823      	ldr	r3, [r4, #0]
 8009238:	6922      	ldr	r2, [r4, #16]
 800923a:	f003 0306 	and.w	r3, r3, #6
 800923e:	2b04      	cmp	r3, #4
 8009240:	bf02      	ittt	eq
 8009242:	68e5      	ldreq	r5, [r4, #12]
 8009244:	6833      	ldreq	r3, [r6, #0]
 8009246:	1aed      	subeq	r5, r5, r3
 8009248:	68a3      	ldr	r3, [r4, #8]
 800924a:	bf0c      	ite	eq
 800924c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009250:	2500      	movne	r5, #0
 8009252:	4293      	cmp	r3, r2
 8009254:	bfc4      	itt	gt
 8009256:	1a9b      	subgt	r3, r3, r2
 8009258:	18ed      	addgt	r5, r5, r3
 800925a:	2600      	movs	r6, #0
 800925c:	341a      	adds	r4, #26
 800925e:	42b5      	cmp	r5, r6
 8009260:	d11a      	bne.n	8009298 <_printf_common+0xc8>
 8009262:	2000      	movs	r0, #0
 8009264:	e008      	b.n	8009278 <_printf_common+0xa8>
 8009266:	2301      	movs	r3, #1
 8009268:	4652      	mov	r2, sl
 800926a:	4641      	mov	r1, r8
 800926c:	4638      	mov	r0, r7
 800926e:	47c8      	blx	r9
 8009270:	3001      	adds	r0, #1
 8009272:	d103      	bne.n	800927c <_printf_common+0xac>
 8009274:	f04f 30ff 	mov.w	r0, #4294967295
 8009278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800927c:	3501      	adds	r5, #1
 800927e:	e7c6      	b.n	800920e <_printf_common+0x3e>
 8009280:	18e1      	adds	r1, r4, r3
 8009282:	1c5a      	adds	r2, r3, #1
 8009284:	2030      	movs	r0, #48	@ 0x30
 8009286:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800928a:	4422      	add	r2, r4
 800928c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009290:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009294:	3302      	adds	r3, #2
 8009296:	e7c7      	b.n	8009228 <_printf_common+0x58>
 8009298:	2301      	movs	r3, #1
 800929a:	4622      	mov	r2, r4
 800929c:	4641      	mov	r1, r8
 800929e:	4638      	mov	r0, r7
 80092a0:	47c8      	blx	r9
 80092a2:	3001      	adds	r0, #1
 80092a4:	d0e6      	beq.n	8009274 <_printf_common+0xa4>
 80092a6:	3601      	adds	r6, #1
 80092a8:	e7d9      	b.n	800925e <_printf_common+0x8e>
	...

080092ac <_printf_i>:
 80092ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092b0:	7e0f      	ldrb	r7, [r1, #24]
 80092b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80092b4:	2f78      	cmp	r7, #120	@ 0x78
 80092b6:	4691      	mov	r9, r2
 80092b8:	4680      	mov	r8, r0
 80092ba:	460c      	mov	r4, r1
 80092bc:	469a      	mov	sl, r3
 80092be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80092c2:	d807      	bhi.n	80092d4 <_printf_i+0x28>
 80092c4:	2f62      	cmp	r7, #98	@ 0x62
 80092c6:	d80a      	bhi.n	80092de <_printf_i+0x32>
 80092c8:	2f00      	cmp	r7, #0
 80092ca:	f000 80d2 	beq.w	8009472 <_printf_i+0x1c6>
 80092ce:	2f58      	cmp	r7, #88	@ 0x58
 80092d0:	f000 80b9 	beq.w	8009446 <_printf_i+0x19a>
 80092d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80092d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80092dc:	e03a      	b.n	8009354 <_printf_i+0xa8>
 80092de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80092e2:	2b15      	cmp	r3, #21
 80092e4:	d8f6      	bhi.n	80092d4 <_printf_i+0x28>
 80092e6:	a101      	add	r1, pc, #4	@ (adr r1, 80092ec <_printf_i+0x40>)
 80092e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80092ec:	08009345 	.word	0x08009345
 80092f0:	08009359 	.word	0x08009359
 80092f4:	080092d5 	.word	0x080092d5
 80092f8:	080092d5 	.word	0x080092d5
 80092fc:	080092d5 	.word	0x080092d5
 8009300:	080092d5 	.word	0x080092d5
 8009304:	08009359 	.word	0x08009359
 8009308:	080092d5 	.word	0x080092d5
 800930c:	080092d5 	.word	0x080092d5
 8009310:	080092d5 	.word	0x080092d5
 8009314:	080092d5 	.word	0x080092d5
 8009318:	08009459 	.word	0x08009459
 800931c:	08009383 	.word	0x08009383
 8009320:	08009413 	.word	0x08009413
 8009324:	080092d5 	.word	0x080092d5
 8009328:	080092d5 	.word	0x080092d5
 800932c:	0800947b 	.word	0x0800947b
 8009330:	080092d5 	.word	0x080092d5
 8009334:	08009383 	.word	0x08009383
 8009338:	080092d5 	.word	0x080092d5
 800933c:	080092d5 	.word	0x080092d5
 8009340:	0800941b 	.word	0x0800941b
 8009344:	6833      	ldr	r3, [r6, #0]
 8009346:	1d1a      	adds	r2, r3, #4
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	6032      	str	r2, [r6, #0]
 800934c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009350:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009354:	2301      	movs	r3, #1
 8009356:	e09d      	b.n	8009494 <_printf_i+0x1e8>
 8009358:	6833      	ldr	r3, [r6, #0]
 800935a:	6820      	ldr	r0, [r4, #0]
 800935c:	1d19      	adds	r1, r3, #4
 800935e:	6031      	str	r1, [r6, #0]
 8009360:	0606      	lsls	r6, r0, #24
 8009362:	d501      	bpl.n	8009368 <_printf_i+0xbc>
 8009364:	681d      	ldr	r5, [r3, #0]
 8009366:	e003      	b.n	8009370 <_printf_i+0xc4>
 8009368:	0645      	lsls	r5, r0, #25
 800936a:	d5fb      	bpl.n	8009364 <_printf_i+0xb8>
 800936c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009370:	2d00      	cmp	r5, #0
 8009372:	da03      	bge.n	800937c <_printf_i+0xd0>
 8009374:	232d      	movs	r3, #45	@ 0x2d
 8009376:	426d      	negs	r5, r5
 8009378:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800937c:	4859      	ldr	r0, [pc, #356]	@ (80094e4 <_printf_i+0x238>)
 800937e:	230a      	movs	r3, #10
 8009380:	e011      	b.n	80093a6 <_printf_i+0xfa>
 8009382:	6821      	ldr	r1, [r4, #0]
 8009384:	6833      	ldr	r3, [r6, #0]
 8009386:	0608      	lsls	r0, r1, #24
 8009388:	f853 5b04 	ldr.w	r5, [r3], #4
 800938c:	d402      	bmi.n	8009394 <_printf_i+0xe8>
 800938e:	0649      	lsls	r1, r1, #25
 8009390:	bf48      	it	mi
 8009392:	b2ad      	uxthmi	r5, r5
 8009394:	2f6f      	cmp	r7, #111	@ 0x6f
 8009396:	4853      	ldr	r0, [pc, #332]	@ (80094e4 <_printf_i+0x238>)
 8009398:	6033      	str	r3, [r6, #0]
 800939a:	bf14      	ite	ne
 800939c:	230a      	movne	r3, #10
 800939e:	2308      	moveq	r3, #8
 80093a0:	2100      	movs	r1, #0
 80093a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80093a6:	6866      	ldr	r6, [r4, #4]
 80093a8:	60a6      	str	r6, [r4, #8]
 80093aa:	2e00      	cmp	r6, #0
 80093ac:	bfa2      	ittt	ge
 80093ae:	6821      	ldrge	r1, [r4, #0]
 80093b0:	f021 0104 	bicge.w	r1, r1, #4
 80093b4:	6021      	strge	r1, [r4, #0]
 80093b6:	b90d      	cbnz	r5, 80093bc <_printf_i+0x110>
 80093b8:	2e00      	cmp	r6, #0
 80093ba:	d04b      	beq.n	8009454 <_printf_i+0x1a8>
 80093bc:	4616      	mov	r6, r2
 80093be:	fbb5 f1f3 	udiv	r1, r5, r3
 80093c2:	fb03 5711 	mls	r7, r3, r1, r5
 80093c6:	5dc7      	ldrb	r7, [r0, r7]
 80093c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80093cc:	462f      	mov	r7, r5
 80093ce:	42bb      	cmp	r3, r7
 80093d0:	460d      	mov	r5, r1
 80093d2:	d9f4      	bls.n	80093be <_printf_i+0x112>
 80093d4:	2b08      	cmp	r3, #8
 80093d6:	d10b      	bne.n	80093f0 <_printf_i+0x144>
 80093d8:	6823      	ldr	r3, [r4, #0]
 80093da:	07df      	lsls	r7, r3, #31
 80093dc:	d508      	bpl.n	80093f0 <_printf_i+0x144>
 80093de:	6923      	ldr	r3, [r4, #16]
 80093e0:	6861      	ldr	r1, [r4, #4]
 80093e2:	4299      	cmp	r1, r3
 80093e4:	bfde      	ittt	le
 80093e6:	2330      	movle	r3, #48	@ 0x30
 80093e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80093ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80093f0:	1b92      	subs	r2, r2, r6
 80093f2:	6122      	str	r2, [r4, #16]
 80093f4:	f8cd a000 	str.w	sl, [sp]
 80093f8:	464b      	mov	r3, r9
 80093fa:	aa03      	add	r2, sp, #12
 80093fc:	4621      	mov	r1, r4
 80093fe:	4640      	mov	r0, r8
 8009400:	f7ff fee6 	bl	80091d0 <_printf_common>
 8009404:	3001      	adds	r0, #1
 8009406:	d14a      	bne.n	800949e <_printf_i+0x1f2>
 8009408:	f04f 30ff 	mov.w	r0, #4294967295
 800940c:	b004      	add	sp, #16
 800940e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009412:	6823      	ldr	r3, [r4, #0]
 8009414:	f043 0320 	orr.w	r3, r3, #32
 8009418:	6023      	str	r3, [r4, #0]
 800941a:	4833      	ldr	r0, [pc, #204]	@ (80094e8 <_printf_i+0x23c>)
 800941c:	2778      	movs	r7, #120	@ 0x78
 800941e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009422:	6823      	ldr	r3, [r4, #0]
 8009424:	6831      	ldr	r1, [r6, #0]
 8009426:	061f      	lsls	r7, r3, #24
 8009428:	f851 5b04 	ldr.w	r5, [r1], #4
 800942c:	d402      	bmi.n	8009434 <_printf_i+0x188>
 800942e:	065f      	lsls	r7, r3, #25
 8009430:	bf48      	it	mi
 8009432:	b2ad      	uxthmi	r5, r5
 8009434:	6031      	str	r1, [r6, #0]
 8009436:	07d9      	lsls	r1, r3, #31
 8009438:	bf44      	itt	mi
 800943a:	f043 0320 	orrmi.w	r3, r3, #32
 800943e:	6023      	strmi	r3, [r4, #0]
 8009440:	b11d      	cbz	r5, 800944a <_printf_i+0x19e>
 8009442:	2310      	movs	r3, #16
 8009444:	e7ac      	b.n	80093a0 <_printf_i+0xf4>
 8009446:	4827      	ldr	r0, [pc, #156]	@ (80094e4 <_printf_i+0x238>)
 8009448:	e7e9      	b.n	800941e <_printf_i+0x172>
 800944a:	6823      	ldr	r3, [r4, #0]
 800944c:	f023 0320 	bic.w	r3, r3, #32
 8009450:	6023      	str	r3, [r4, #0]
 8009452:	e7f6      	b.n	8009442 <_printf_i+0x196>
 8009454:	4616      	mov	r6, r2
 8009456:	e7bd      	b.n	80093d4 <_printf_i+0x128>
 8009458:	6833      	ldr	r3, [r6, #0]
 800945a:	6825      	ldr	r5, [r4, #0]
 800945c:	6961      	ldr	r1, [r4, #20]
 800945e:	1d18      	adds	r0, r3, #4
 8009460:	6030      	str	r0, [r6, #0]
 8009462:	062e      	lsls	r6, r5, #24
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	d501      	bpl.n	800946c <_printf_i+0x1c0>
 8009468:	6019      	str	r1, [r3, #0]
 800946a:	e002      	b.n	8009472 <_printf_i+0x1c6>
 800946c:	0668      	lsls	r0, r5, #25
 800946e:	d5fb      	bpl.n	8009468 <_printf_i+0x1bc>
 8009470:	8019      	strh	r1, [r3, #0]
 8009472:	2300      	movs	r3, #0
 8009474:	6123      	str	r3, [r4, #16]
 8009476:	4616      	mov	r6, r2
 8009478:	e7bc      	b.n	80093f4 <_printf_i+0x148>
 800947a:	6833      	ldr	r3, [r6, #0]
 800947c:	1d1a      	adds	r2, r3, #4
 800947e:	6032      	str	r2, [r6, #0]
 8009480:	681e      	ldr	r6, [r3, #0]
 8009482:	6862      	ldr	r2, [r4, #4]
 8009484:	2100      	movs	r1, #0
 8009486:	4630      	mov	r0, r6
 8009488:	f7f6 fec2 	bl	8000210 <memchr>
 800948c:	b108      	cbz	r0, 8009492 <_printf_i+0x1e6>
 800948e:	1b80      	subs	r0, r0, r6
 8009490:	6060      	str	r0, [r4, #4]
 8009492:	6863      	ldr	r3, [r4, #4]
 8009494:	6123      	str	r3, [r4, #16]
 8009496:	2300      	movs	r3, #0
 8009498:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800949c:	e7aa      	b.n	80093f4 <_printf_i+0x148>
 800949e:	6923      	ldr	r3, [r4, #16]
 80094a0:	4632      	mov	r2, r6
 80094a2:	4649      	mov	r1, r9
 80094a4:	4640      	mov	r0, r8
 80094a6:	47d0      	blx	sl
 80094a8:	3001      	adds	r0, #1
 80094aa:	d0ad      	beq.n	8009408 <_printf_i+0x15c>
 80094ac:	6823      	ldr	r3, [r4, #0]
 80094ae:	079b      	lsls	r3, r3, #30
 80094b0:	d413      	bmi.n	80094da <_printf_i+0x22e>
 80094b2:	68e0      	ldr	r0, [r4, #12]
 80094b4:	9b03      	ldr	r3, [sp, #12]
 80094b6:	4298      	cmp	r0, r3
 80094b8:	bfb8      	it	lt
 80094ba:	4618      	movlt	r0, r3
 80094bc:	e7a6      	b.n	800940c <_printf_i+0x160>
 80094be:	2301      	movs	r3, #1
 80094c0:	4632      	mov	r2, r6
 80094c2:	4649      	mov	r1, r9
 80094c4:	4640      	mov	r0, r8
 80094c6:	47d0      	blx	sl
 80094c8:	3001      	adds	r0, #1
 80094ca:	d09d      	beq.n	8009408 <_printf_i+0x15c>
 80094cc:	3501      	adds	r5, #1
 80094ce:	68e3      	ldr	r3, [r4, #12]
 80094d0:	9903      	ldr	r1, [sp, #12]
 80094d2:	1a5b      	subs	r3, r3, r1
 80094d4:	42ab      	cmp	r3, r5
 80094d6:	dcf2      	bgt.n	80094be <_printf_i+0x212>
 80094d8:	e7eb      	b.n	80094b2 <_printf_i+0x206>
 80094da:	2500      	movs	r5, #0
 80094dc:	f104 0619 	add.w	r6, r4, #25
 80094e0:	e7f5      	b.n	80094ce <_printf_i+0x222>
 80094e2:	bf00      	nop
 80094e4:	08009ee7 	.word	0x08009ee7
 80094e8:	08009ef8 	.word	0x08009ef8

080094ec <__sflush_r>:
 80094ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80094f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094f4:	0716      	lsls	r6, r2, #28
 80094f6:	4605      	mov	r5, r0
 80094f8:	460c      	mov	r4, r1
 80094fa:	d454      	bmi.n	80095a6 <__sflush_r+0xba>
 80094fc:	684b      	ldr	r3, [r1, #4]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	dc02      	bgt.n	8009508 <__sflush_r+0x1c>
 8009502:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009504:	2b00      	cmp	r3, #0
 8009506:	dd48      	ble.n	800959a <__sflush_r+0xae>
 8009508:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800950a:	2e00      	cmp	r6, #0
 800950c:	d045      	beq.n	800959a <__sflush_r+0xae>
 800950e:	2300      	movs	r3, #0
 8009510:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009514:	682f      	ldr	r7, [r5, #0]
 8009516:	6a21      	ldr	r1, [r4, #32]
 8009518:	602b      	str	r3, [r5, #0]
 800951a:	d030      	beq.n	800957e <__sflush_r+0x92>
 800951c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800951e:	89a3      	ldrh	r3, [r4, #12]
 8009520:	0759      	lsls	r1, r3, #29
 8009522:	d505      	bpl.n	8009530 <__sflush_r+0x44>
 8009524:	6863      	ldr	r3, [r4, #4]
 8009526:	1ad2      	subs	r2, r2, r3
 8009528:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800952a:	b10b      	cbz	r3, 8009530 <__sflush_r+0x44>
 800952c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800952e:	1ad2      	subs	r2, r2, r3
 8009530:	2300      	movs	r3, #0
 8009532:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009534:	6a21      	ldr	r1, [r4, #32]
 8009536:	4628      	mov	r0, r5
 8009538:	47b0      	blx	r6
 800953a:	1c43      	adds	r3, r0, #1
 800953c:	89a3      	ldrh	r3, [r4, #12]
 800953e:	d106      	bne.n	800954e <__sflush_r+0x62>
 8009540:	6829      	ldr	r1, [r5, #0]
 8009542:	291d      	cmp	r1, #29
 8009544:	d82b      	bhi.n	800959e <__sflush_r+0xb2>
 8009546:	4a2a      	ldr	r2, [pc, #168]	@ (80095f0 <__sflush_r+0x104>)
 8009548:	410a      	asrs	r2, r1
 800954a:	07d6      	lsls	r6, r2, #31
 800954c:	d427      	bmi.n	800959e <__sflush_r+0xb2>
 800954e:	2200      	movs	r2, #0
 8009550:	6062      	str	r2, [r4, #4]
 8009552:	04d9      	lsls	r1, r3, #19
 8009554:	6922      	ldr	r2, [r4, #16]
 8009556:	6022      	str	r2, [r4, #0]
 8009558:	d504      	bpl.n	8009564 <__sflush_r+0x78>
 800955a:	1c42      	adds	r2, r0, #1
 800955c:	d101      	bne.n	8009562 <__sflush_r+0x76>
 800955e:	682b      	ldr	r3, [r5, #0]
 8009560:	b903      	cbnz	r3, 8009564 <__sflush_r+0x78>
 8009562:	6560      	str	r0, [r4, #84]	@ 0x54
 8009564:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009566:	602f      	str	r7, [r5, #0]
 8009568:	b1b9      	cbz	r1, 800959a <__sflush_r+0xae>
 800956a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800956e:	4299      	cmp	r1, r3
 8009570:	d002      	beq.n	8009578 <__sflush_r+0x8c>
 8009572:	4628      	mov	r0, r5
 8009574:	f7ff fbea 	bl	8008d4c <_free_r>
 8009578:	2300      	movs	r3, #0
 800957a:	6363      	str	r3, [r4, #52]	@ 0x34
 800957c:	e00d      	b.n	800959a <__sflush_r+0xae>
 800957e:	2301      	movs	r3, #1
 8009580:	4628      	mov	r0, r5
 8009582:	47b0      	blx	r6
 8009584:	4602      	mov	r2, r0
 8009586:	1c50      	adds	r0, r2, #1
 8009588:	d1c9      	bne.n	800951e <__sflush_r+0x32>
 800958a:	682b      	ldr	r3, [r5, #0]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d0c6      	beq.n	800951e <__sflush_r+0x32>
 8009590:	2b1d      	cmp	r3, #29
 8009592:	d001      	beq.n	8009598 <__sflush_r+0xac>
 8009594:	2b16      	cmp	r3, #22
 8009596:	d11e      	bne.n	80095d6 <__sflush_r+0xea>
 8009598:	602f      	str	r7, [r5, #0]
 800959a:	2000      	movs	r0, #0
 800959c:	e022      	b.n	80095e4 <__sflush_r+0xf8>
 800959e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095a2:	b21b      	sxth	r3, r3
 80095a4:	e01b      	b.n	80095de <__sflush_r+0xf2>
 80095a6:	690f      	ldr	r7, [r1, #16]
 80095a8:	2f00      	cmp	r7, #0
 80095aa:	d0f6      	beq.n	800959a <__sflush_r+0xae>
 80095ac:	0793      	lsls	r3, r2, #30
 80095ae:	680e      	ldr	r6, [r1, #0]
 80095b0:	bf08      	it	eq
 80095b2:	694b      	ldreq	r3, [r1, #20]
 80095b4:	600f      	str	r7, [r1, #0]
 80095b6:	bf18      	it	ne
 80095b8:	2300      	movne	r3, #0
 80095ba:	eba6 0807 	sub.w	r8, r6, r7
 80095be:	608b      	str	r3, [r1, #8]
 80095c0:	f1b8 0f00 	cmp.w	r8, #0
 80095c4:	dde9      	ble.n	800959a <__sflush_r+0xae>
 80095c6:	6a21      	ldr	r1, [r4, #32]
 80095c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80095ca:	4643      	mov	r3, r8
 80095cc:	463a      	mov	r2, r7
 80095ce:	4628      	mov	r0, r5
 80095d0:	47b0      	blx	r6
 80095d2:	2800      	cmp	r0, #0
 80095d4:	dc08      	bgt.n	80095e8 <__sflush_r+0xfc>
 80095d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80095de:	81a3      	strh	r3, [r4, #12]
 80095e0:	f04f 30ff 	mov.w	r0, #4294967295
 80095e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095e8:	4407      	add	r7, r0
 80095ea:	eba8 0800 	sub.w	r8, r8, r0
 80095ee:	e7e7      	b.n	80095c0 <__sflush_r+0xd4>
 80095f0:	dfbffffe 	.word	0xdfbffffe

080095f4 <_fflush_r>:
 80095f4:	b538      	push	{r3, r4, r5, lr}
 80095f6:	690b      	ldr	r3, [r1, #16]
 80095f8:	4605      	mov	r5, r0
 80095fa:	460c      	mov	r4, r1
 80095fc:	b913      	cbnz	r3, 8009604 <_fflush_r+0x10>
 80095fe:	2500      	movs	r5, #0
 8009600:	4628      	mov	r0, r5
 8009602:	bd38      	pop	{r3, r4, r5, pc}
 8009604:	b118      	cbz	r0, 800960e <_fflush_r+0x1a>
 8009606:	6a03      	ldr	r3, [r0, #32]
 8009608:	b90b      	cbnz	r3, 800960e <_fflush_r+0x1a>
 800960a:	f7ff f8ad 	bl	8008768 <__sinit>
 800960e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d0f3      	beq.n	80095fe <_fflush_r+0xa>
 8009616:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009618:	07d0      	lsls	r0, r2, #31
 800961a:	d404      	bmi.n	8009626 <_fflush_r+0x32>
 800961c:	0599      	lsls	r1, r3, #22
 800961e:	d402      	bmi.n	8009626 <_fflush_r+0x32>
 8009620:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009622:	f7ff fb64 	bl	8008cee <__retarget_lock_acquire_recursive>
 8009626:	4628      	mov	r0, r5
 8009628:	4621      	mov	r1, r4
 800962a:	f7ff ff5f 	bl	80094ec <__sflush_r>
 800962e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009630:	07da      	lsls	r2, r3, #31
 8009632:	4605      	mov	r5, r0
 8009634:	d4e4      	bmi.n	8009600 <_fflush_r+0xc>
 8009636:	89a3      	ldrh	r3, [r4, #12]
 8009638:	059b      	lsls	r3, r3, #22
 800963a:	d4e1      	bmi.n	8009600 <_fflush_r+0xc>
 800963c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800963e:	f7ff fb57 	bl	8008cf0 <__retarget_lock_release_recursive>
 8009642:	e7dd      	b.n	8009600 <_fflush_r+0xc>

08009644 <fiprintf>:
 8009644:	b40e      	push	{r1, r2, r3}
 8009646:	b503      	push	{r0, r1, lr}
 8009648:	4601      	mov	r1, r0
 800964a:	ab03      	add	r3, sp, #12
 800964c:	4805      	ldr	r0, [pc, #20]	@ (8009664 <fiprintf+0x20>)
 800964e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009652:	6800      	ldr	r0, [r0, #0]
 8009654:	9301      	str	r3, [sp, #4]
 8009656:	f7ff fca3 	bl	8008fa0 <_vfiprintf_r>
 800965a:	b002      	add	sp, #8
 800965c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009660:	b003      	add	sp, #12
 8009662:	4770      	bx	lr
 8009664:	2000001c 	.word	0x2000001c

08009668 <__swhatbuf_r>:
 8009668:	b570      	push	{r4, r5, r6, lr}
 800966a:	460c      	mov	r4, r1
 800966c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009670:	2900      	cmp	r1, #0
 8009672:	b096      	sub	sp, #88	@ 0x58
 8009674:	4615      	mov	r5, r2
 8009676:	461e      	mov	r6, r3
 8009678:	da0d      	bge.n	8009696 <__swhatbuf_r+0x2e>
 800967a:	89a3      	ldrh	r3, [r4, #12]
 800967c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009680:	f04f 0100 	mov.w	r1, #0
 8009684:	bf14      	ite	ne
 8009686:	2340      	movne	r3, #64	@ 0x40
 8009688:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800968c:	2000      	movs	r0, #0
 800968e:	6031      	str	r1, [r6, #0]
 8009690:	602b      	str	r3, [r5, #0]
 8009692:	b016      	add	sp, #88	@ 0x58
 8009694:	bd70      	pop	{r4, r5, r6, pc}
 8009696:	466a      	mov	r2, sp
 8009698:	f000 f87c 	bl	8009794 <_fstat_r>
 800969c:	2800      	cmp	r0, #0
 800969e:	dbec      	blt.n	800967a <__swhatbuf_r+0x12>
 80096a0:	9901      	ldr	r1, [sp, #4]
 80096a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80096a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80096aa:	4259      	negs	r1, r3
 80096ac:	4159      	adcs	r1, r3
 80096ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80096b2:	e7eb      	b.n	800968c <__swhatbuf_r+0x24>

080096b4 <__smakebuf_r>:
 80096b4:	898b      	ldrh	r3, [r1, #12]
 80096b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80096b8:	079d      	lsls	r5, r3, #30
 80096ba:	4606      	mov	r6, r0
 80096bc:	460c      	mov	r4, r1
 80096be:	d507      	bpl.n	80096d0 <__smakebuf_r+0x1c>
 80096c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80096c4:	6023      	str	r3, [r4, #0]
 80096c6:	6123      	str	r3, [r4, #16]
 80096c8:	2301      	movs	r3, #1
 80096ca:	6163      	str	r3, [r4, #20]
 80096cc:	b003      	add	sp, #12
 80096ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096d0:	ab01      	add	r3, sp, #4
 80096d2:	466a      	mov	r2, sp
 80096d4:	f7ff ffc8 	bl	8009668 <__swhatbuf_r>
 80096d8:	9f00      	ldr	r7, [sp, #0]
 80096da:	4605      	mov	r5, r0
 80096dc:	4639      	mov	r1, r7
 80096de:	4630      	mov	r0, r6
 80096e0:	f7ff fba8 	bl	8008e34 <_malloc_r>
 80096e4:	b948      	cbnz	r0, 80096fa <__smakebuf_r+0x46>
 80096e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096ea:	059a      	lsls	r2, r3, #22
 80096ec:	d4ee      	bmi.n	80096cc <__smakebuf_r+0x18>
 80096ee:	f023 0303 	bic.w	r3, r3, #3
 80096f2:	f043 0302 	orr.w	r3, r3, #2
 80096f6:	81a3      	strh	r3, [r4, #12]
 80096f8:	e7e2      	b.n	80096c0 <__smakebuf_r+0xc>
 80096fa:	89a3      	ldrh	r3, [r4, #12]
 80096fc:	6020      	str	r0, [r4, #0]
 80096fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009702:	81a3      	strh	r3, [r4, #12]
 8009704:	9b01      	ldr	r3, [sp, #4]
 8009706:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800970a:	b15b      	cbz	r3, 8009724 <__smakebuf_r+0x70>
 800970c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009710:	4630      	mov	r0, r6
 8009712:	f000 f851 	bl	80097b8 <_isatty_r>
 8009716:	b128      	cbz	r0, 8009724 <__smakebuf_r+0x70>
 8009718:	89a3      	ldrh	r3, [r4, #12]
 800971a:	f023 0303 	bic.w	r3, r3, #3
 800971e:	f043 0301 	orr.w	r3, r3, #1
 8009722:	81a3      	strh	r3, [r4, #12]
 8009724:	89a3      	ldrh	r3, [r4, #12]
 8009726:	431d      	orrs	r5, r3
 8009728:	81a5      	strh	r5, [r4, #12]
 800972a:	e7cf      	b.n	80096cc <__smakebuf_r+0x18>

0800972c <_putc_r>:
 800972c:	b570      	push	{r4, r5, r6, lr}
 800972e:	460d      	mov	r5, r1
 8009730:	4614      	mov	r4, r2
 8009732:	4606      	mov	r6, r0
 8009734:	b118      	cbz	r0, 800973e <_putc_r+0x12>
 8009736:	6a03      	ldr	r3, [r0, #32]
 8009738:	b90b      	cbnz	r3, 800973e <_putc_r+0x12>
 800973a:	f7ff f815 	bl	8008768 <__sinit>
 800973e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009740:	07d8      	lsls	r0, r3, #31
 8009742:	d405      	bmi.n	8009750 <_putc_r+0x24>
 8009744:	89a3      	ldrh	r3, [r4, #12]
 8009746:	0599      	lsls	r1, r3, #22
 8009748:	d402      	bmi.n	8009750 <_putc_r+0x24>
 800974a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800974c:	f7ff facf 	bl	8008cee <__retarget_lock_acquire_recursive>
 8009750:	68a3      	ldr	r3, [r4, #8]
 8009752:	3b01      	subs	r3, #1
 8009754:	2b00      	cmp	r3, #0
 8009756:	60a3      	str	r3, [r4, #8]
 8009758:	da05      	bge.n	8009766 <_putc_r+0x3a>
 800975a:	69a2      	ldr	r2, [r4, #24]
 800975c:	4293      	cmp	r3, r2
 800975e:	db12      	blt.n	8009786 <_putc_r+0x5a>
 8009760:	b2eb      	uxtb	r3, r5
 8009762:	2b0a      	cmp	r3, #10
 8009764:	d00f      	beq.n	8009786 <_putc_r+0x5a>
 8009766:	6823      	ldr	r3, [r4, #0]
 8009768:	1c5a      	adds	r2, r3, #1
 800976a:	6022      	str	r2, [r4, #0]
 800976c:	701d      	strb	r5, [r3, #0]
 800976e:	b2ed      	uxtb	r5, r5
 8009770:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009772:	07da      	lsls	r2, r3, #31
 8009774:	d405      	bmi.n	8009782 <_putc_r+0x56>
 8009776:	89a3      	ldrh	r3, [r4, #12]
 8009778:	059b      	lsls	r3, r3, #22
 800977a:	d402      	bmi.n	8009782 <_putc_r+0x56>
 800977c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800977e:	f7ff fab7 	bl	8008cf0 <__retarget_lock_release_recursive>
 8009782:	4628      	mov	r0, r5
 8009784:	bd70      	pop	{r4, r5, r6, pc}
 8009786:	4629      	mov	r1, r5
 8009788:	4622      	mov	r2, r4
 800978a:	4630      	mov	r0, r6
 800978c:	f7ff f8dd 	bl	800894a <__swbuf_r>
 8009790:	4605      	mov	r5, r0
 8009792:	e7ed      	b.n	8009770 <_putc_r+0x44>

08009794 <_fstat_r>:
 8009794:	b538      	push	{r3, r4, r5, lr}
 8009796:	4d07      	ldr	r5, [pc, #28]	@ (80097b4 <_fstat_r+0x20>)
 8009798:	2300      	movs	r3, #0
 800979a:	4604      	mov	r4, r0
 800979c:	4608      	mov	r0, r1
 800979e:	4611      	mov	r1, r2
 80097a0:	602b      	str	r3, [r5, #0]
 80097a2:	f7f8 f8fb 	bl	800199c <_fstat>
 80097a6:	1c43      	adds	r3, r0, #1
 80097a8:	d102      	bne.n	80097b0 <_fstat_r+0x1c>
 80097aa:	682b      	ldr	r3, [r5, #0]
 80097ac:	b103      	cbz	r3, 80097b0 <_fstat_r+0x1c>
 80097ae:	6023      	str	r3, [r4, #0]
 80097b0:	bd38      	pop	{r3, r4, r5, pc}
 80097b2:	bf00      	nop
 80097b4:	2000563c 	.word	0x2000563c

080097b8 <_isatty_r>:
 80097b8:	b538      	push	{r3, r4, r5, lr}
 80097ba:	4d06      	ldr	r5, [pc, #24]	@ (80097d4 <_isatty_r+0x1c>)
 80097bc:	2300      	movs	r3, #0
 80097be:	4604      	mov	r4, r0
 80097c0:	4608      	mov	r0, r1
 80097c2:	602b      	str	r3, [r5, #0]
 80097c4:	f7f8 f8fa 	bl	80019bc <_isatty>
 80097c8:	1c43      	adds	r3, r0, #1
 80097ca:	d102      	bne.n	80097d2 <_isatty_r+0x1a>
 80097cc:	682b      	ldr	r3, [r5, #0]
 80097ce:	b103      	cbz	r3, 80097d2 <_isatty_r+0x1a>
 80097d0:	6023      	str	r3, [r4, #0]
 80097d2:	bd38      	pop	{r3, r4, r5, pc}
 80097d4:	2000563c 	.word	0x2000563c

080097d8 <_sbrk_r>:
 80097d8:	b538      	push	{r3, r4, r5, lr}
 80097da:	4d06      	ldr	r5, [pc, #24]	@ (80097f4 <_sbrk_r+0x1c>)
 80097dc:	2300      	movs	r3, #0
 80097de:	4604      	mov	r4, r0
 80097e0:	4608      	mov	r0, r1
 80097e2:	602b      	str	r3, [r5, #0]
 80097e4:	f7f8 f902 	bl	80019ec <_sbrk>
 80097e8:	1c43      	adds	r3, r0, #1
 80097ea:	d102      	bne.n	80097f2 <_sbrk_r+0x1a>
 80097ec:	682b      	ldr	r3, [r5, #0]
 80097ee:	b103      	cbz	r3, 80097f2 <_sbrk_r+0x1a>
 80097f0:	6023      	str	r3, [r4, #0]
 80097f2:	bd38      	pop	{r3, r4, r5, pc}
 80097f4:	2000563c 	.word	0x2000563c

080097f8 <abort>:
 80097f8:	b508      	push	{r3, lr}
 80097fa:	2006      	movs	r0, #6
 80097fc:	f000 f82c 	bl	8009858 <raise>
 8009800:	2001      	movs	r0, #1
 8009802:	f7f8 f897 	bl	8001934 <_exit>

08009806 <_raise_r>:
 8009806:	291f      	cmp	r1, #31
 8009808:	b538      	push	{r3, r4, r5, lr}
 800980a:	4605      	mov	r5, r0
 800980c:	460c      	mov	r4, r1
 800980e:	d904      	bls.n	800981a <_raise_r+0x14>
 8009810:	2316      	movs	r3, #22
 8009812:	6003      	str	r3, [r0, #0]
 8009814:	f04f 30ff 	mov.w	r0, #4294967295
 8009818:	bd38      	pop	{r3, r4, r5, pc}
 800981a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800981c:	b112      	cbz	r2, 8009824 <_raise_r+0x1e>
 800981e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009822:	b94b      	cbnz	r3, 8009838 <_raise_r+0x32>
 8009824:	4628      	mov	r0, r5
 8009826:	f000 f831 	bl	800988c <_getpid_r>
 800982a:	4622      	mov	r2, r4
 800982c:	4601      	mov	r1, r0
 800982e:	4628      	mov	r0, r5
 8009830:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009834:	f000 b818 	b.w	8009868 <_kill_r>
 8009838:	2b01      	cmp	r3, #1
 800983a:	d00a      	beq.n	8009852 <_raise_r+0x4c>
 800983c:	1c59      	adds	r1, r3, #1
 800983e:	d103      	bne.n	8009848 <_raise_r+0x42>
 8009840:	2316      	movs	r3, #22
 8009842:	6003      	str	r3, [r0, #0]
 8009844:	2001      	movs	r0, #1
 8009846:	e7e7      	b.n	8009818 <_raise_r+0x12>
 8009848:	2100      	movs	r1, #0
 800984a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800984e:	4620      	mov	r0, r4
 8009850:	4798      	blx	r3
 8009852:	2000      	movs	r0, #0
 8009854:	e7e0      	b.n	8009818 <_raise_r+0x12>
	...

08009858 <raise>:
 8009858:	4b02      	ldr	r3, [pc, #8]	@ (8009864 <raise+0xc>)
 800985a:	4601      	mov	r1, r0
 800985c:	6818      	ldr	r0, [r3, #0]
 800985e:	f7ff bfd2 	b.w	8009806 <_raise_r>
 8009862:	bf00      	nop
 8009864:	2000001c 	.word	0x2000001c

08009868 <_kill_r>:
 8009868:	b538      	push	{r3, r4, r5, lr}
 800986a:	4d07      	ldr	r5, [pc, #28]	@ (8009888 <_kill_r+0x20>)
 800986c:	2300      	movs	r3, #0
 800986e:	4604      	mov	r4, r0
 8009870:	4608      	mov	r0, r1
 8009872:	4611      	mov	r1, r2
 8009874:	602b      	str	r3, [r5, #0]
 8009876:	f7f8 f84d 	bl	8001914 <_kill>
 800987a:	1c43      	adds	r3, r0, #1
 800987c:	d102      	bne.n	8009884 <_kill_r+0x1c>
 800987e:	682b      	ldr	r3, [r5, #0]
 8009880:	b103      	cbz	r3, 8009884 <_kill_r+0x1c>
 8009882:	6023      	str	r3, [r4, #0]
 8009884:	bd38      	pop	{r3, r4, r5, pc}
 8009886:	bf00      	nop
 8009888:	2000563c 	.word	0x2000563c

0800988c <_getpid_r>:
 800988c:	f7f8 b83a 	b.w	8001904 <_getpid>

08009890 <_init>:
 8009890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009892:	bf00      	nop
 8009894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009896:	bc08      	pop	{r3}
 8009898:	469e      	mov	lr, r3
 800989a:	4770      	bx	lr

0800989c <_fini>:
 800989c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800989e:	bf00      	nop
 80098a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098a2:	bc08      	pop	{r3}
 80098a4:	469e      	mov	lr, r3
 80098a6:	4770      	bx	lr
